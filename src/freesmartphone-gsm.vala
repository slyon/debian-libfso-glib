/* Generated by vala-dbus-binding-tool 0.4.0. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=/usr/local/share/freesmartphone/xml --directory=../src --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone --gdbus */
using GLib;

namespace FreeSmartphone {

	namespace GSM {

		[DBus (name = "org.freesmartphone.GSM.Error0", timeout = 120000)]
		public interface Error0 : GLib.Object {
		}

		[DBus (name = "org.freesmartphone.GSM.Error0", timeout = 120000)]
		public interface Error0Sync : GLib.Object {
		}

		[DBus (name = "org.freesmartphone.GSM.SIM", timeout = 120000)]
		public interface SIM : GLib.Object {

			[DBus (name = "GetAuthStatus")]
			public abstract async FreeSmartphone.GSM.SIMAuthStatus get_auth_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "AuthStatus")]
			public signal void auth_status(FreeSmartphone.GSM.SIMAuthStatus status);

			[DBus (name = "SendAuthCode")]
			public abstract async void send_auth_code(string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetUnlockCounters")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_unlock_counters() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Unlock")]
			public abstract async void unlock(string puk, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ChangeAuthCode")]
			public abstract async void change_auth_code(string old_pin, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetAuthCodeRequired")]
			public abstract async void set_auth_code_required(bool check, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetAuthCodeRequired")]
			public abstract async bool get_auth_code_required() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetSimInfo")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_sim_info() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendGenericSimCommand")]
			public abstract async string send_generic_sim_command(string command) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendRestrictedSimCommand")]
			public abstract async string send_restricted_sim_command(int command, int fileid, int p1, int p2, int p3, string data) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetHomeZoneParameters")]
			public abstract async FreeSmartphone.GSM.SIMHomeZone[] get_home_zone_parameters() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetPhonebookInfo")]
			public abstract async void get_phonebook_info(string category, out int slots, out int numberlength, out int namelength) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DeleteEntry")]
			public abstract async void delete_entry(string category, int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StoreEntry")]
			public abstract async void store_entry(string category, int index, string name, string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RetrievePhonebook")]
			public abstract async FreeSmartphone.GSM.SIMEntry[] retrieve_phonebook(string category, int mindex, int maxdex) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetServiceCenterNumber")]
			public abstract async string get_service_center_number() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetServiceCenterNumber")]
			public abstract async void set_service_center_number(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingMessage")]
			public signal void incoming_message(int index);

			[DBus (name = "DeleteMessage")]
			public abstract async void delete_message(int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StoreMessage")]
			public abstract async int store_message(string recipient_number, string contents, GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendStoredMessage")]
			public abstract async void send_stored_message(int index, out int transaction_index, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RetrieveMessage")]
			public abstract async void retrieve_message(int index, out string status, out string sender_number, out string contents, out GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.GSM.SIM", timeout = 120000)]
		public interface SIMSync : GLib.Object {

			[DBus (name = "GetAuthStatus")]
			public abstract FreeSmartphone.GSM.SIMAuthStatus get_auth_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "AuthStatus")]
			public signal void auth_status(FreeSmartphone.GSM.SIMAuthStatus status);

			[DBus (name = "SendAuthCode")]
			public abstract void send_auth_code(string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetUnlockCounters")]
			public abstract GLib.HashTable<string, GLib.Variant> get_unlock_counters() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Unlock")]
			public abstract void unlock(string puk, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ChangeAuthCode")]
			public abstract void change_auth_code(string old_pin, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetAuthCodeRequired")]
			public abstract void set_auth_code_required(bool check, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetAuthCodeRequired")]
			public abstract bool get_auth_code_required() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetSimInfo")]
			public abstract GLib.HashTable<string, GLib.Variant> get_sim_info() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendGenericSimCommand")]
			public abstract string send_generic_sim_command(string command) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendRestrictedSimCommand")]
			public abstract string send_restricted_sim_command(int command, int fileid, int p1, int p2, int p3, string data) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetHomeZoneParameters")]
			public abstract FreeSmartphone.GSM.SIMHomeZone[] get_home_zone_parameters() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetPhonebookInfo")]
			public abstract void get_phonebook_info(string category, out int slots, out int numberlength, out int namelength) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DeleteEntry")]
			public abstract void delete_entry(string category, int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StoreEntry")]
			public abstract void store_entry(string category, int index, string name, string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RetrievePhonebook")]
			public abstract FreeSmartphone.GSM.SIMEntry[] retrieve_phonebook(string category, int mindex, int maxdex) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetServiceCenterNumber")]
			public abstract string get_service_center_number() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetServiceCenterNumber")]
			public abstract void set_service_center_number(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingMessage")]
			public signal void incoming_message(int index);

			[DBus (name = "DeleteMessage")]
			public abstract void delete_message(int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StoreMessage")]
			public abstract int store_message(string recipient_number, string contents, GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendStoredMessage")]
			public abstract void send_stored_message(int index, out int transaction_index, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RetrieveMessage")]
			public abstract void retrieve_message(int index, out string status, out string sender_number, out string contents, out GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.GSM.MUX", timeout = 120000)]
		public interface MUX : GLib.Object {

			[DBus (name = "OpenSession")]
			public abstract async void open_session(bool advanced, int framesize, string portname, int portspeed) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "CloseSession")]
			public abstract async void close_session() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "AllocChannel")]
			public abstract async void alloc_channel(string origin, int channel, out string path, out int allocated_channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseChannel")]
			public abstract async void release_channel(string origin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetStatus")]
			public abstract async void set_status(int channel, string status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Status")]
			public signal void status(string status);
		}

		[DBus (name = "org.freesmartphone.GSM.MUX", timeout = 120000)]
		public interface MUXSync : GLib.Object {

			[DBus (name = "OpenSession")]
			public abstract void open_session(bool advanced, int framesize, string portname, int portspeed) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "CloseSession")]
			public abstract void close_session() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "AllocChannel")]
			public abstract void alloc_channel(string origin, int channel, out string path, out int allocated_channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseChannel")]
			public abstract void release_channel(string origin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetStatus")]
			public abstract void set_status(int channel, string status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Status")]
			public signal void status(string status);
		}

		[DBus (name = "org.freesmartphone.GSM.CB", timeout = 120000)]
		public interface CB : GLib.Object {

			[DBus (name = "GetCellBroadcastSubscriptions")]
			public abstract async string get_cell_broadcast_subscriptions() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetCellBroadcastSubscriptions")]
			public abstract async void set_cell_broadcast_subscriptions(string channels) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingCellBroadcast")]
			public signal void incoming_cell_broadcast(string text, string language, GLib.HashTable<string, GLib.Variant> properties);
		}

		[DBus (name = "org.freesmartphone.GSM.CB", timeout = 120000)]
		public interface CBSync : GLib.Object {

			[DBus (name = "GetCellBroadcastSubscriptions")]
			public abstract string get_cell_broadcast_subscriptions() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetCellBroadcastSubscriptions")]
			public abstract void set_cell_broadcast_subscriptions(string channels) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingCellBroadcast")]
			public signal void incoming_cell_broadcast(string text, string language, GLib.HashTable<string, GLib.Variant> properties);
		}

		[DBus (name = "org.freesmartphone.GSM.HZ", timeout = 120000)]
		public interface HZ : GLib.Object {

			[DBus (name = "GetKnownHomeZones")]
			public abstract async string[] get_known_home_zones() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetHomeZoneStatus")]
			public abstract async string get_home_zone_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "HomeZoneStatus")]
			public signal void home_zone_status(string name);
		}

		[DBus (name = "org.freesmartphone.GSM.HZ", timeout = 120000)]
		public interface HZSync : GLib.Object {

			[DBus (name = "GetKnownHomeZones")]
			public abstract string[] get_known_home_zones() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetHomeZoneStatus")]
			public abstract string get_home_zone_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "HomeZoneStatus")]
			public signal void home_zone_status(string name);
		}

		[DBus (name = "org.freesmartphone.GSM.VoiceMail", timeout = 120000)]
		public interface VoiceMail : GLib.Object {

			[DBus (name = "GetVoiceMailboxNumber")]
			public abstract async string get_voice_mailbox_number() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetVoiceMailboxNumber")]
			public abstract async void set_voice_mailbox_number(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingVoiceMail")]
			public signal void incoming_voice_mail(int index);

			[DBus (name = "GetStoredVoiceMails")]
			public abstract async string[] get_stored_voice_mails() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.GSM.VoiceMail", timeout = 120000)]
		public interface VoiceMailSync : GLib.Object {

			[DBus (name = "GetVoiceMailboxNumber")]
			public abstract string get_voice_mailbox_number() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetVoiceMailboxNumber")]
			public abstract void set_voice_mailbox_number(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingVoiceMail")]
			public signal void incoming_voice_mail(int index);

			[DBus (name = "GetStoredVoiceMails")]
			public abstract string[] get_stored_voice_mails() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (use_string_marshalling = true)]
		public enum SIMAuthStatus {
			[DBus (value="UNKNOWN")]
			UNKNOWN,
			[DBus (value="READY")]
			READY,
			[DBus (value="SIM PIN")]
			PIN_REQUIRED,
			[DBus (value="SIM PUK")]
			PUK_REQUIRED,
			[DBus (value="SIM PIN2")]
			PIN2_REQUIRED,
			[DBus (value="SIM PUK2")]
			PUK2_REQUIRED,
		}

		[DBus (use_string_marshalling = true)]
		public enum CipherStatus {
			[DBus (value="disabled")]
			DISABLED,
			[DBus (value="enabled")]
			ENABLED,
			[DBus (value="unknown")]
			UNKNOWN,
		}

		[DBus (name = "org.freesmartphone.GSM.PDP", timeout = 120000)]
		public interface PDP : GLib.Object {

			[DBus (name = "SetCredentials")]
			public abstract async void set_credentials(string apn, string username, string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetCredentials")]
			public abstract async void get_credentials(out string apn, out string username, out string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RoamingAllowed")]
			public abstract bool roaming_allowed {  get; set; }

			[DBus (name = "ActivateContext")]
			public abstract async void activate_context() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DeactivateContext")]
			public abstract async void deactivate_context() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetContextStatus")]
			public abstract async void get_context_status(out FreeSmartphone.GSM.ContextStatus status, out GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ContextStatus")]
			public signal void context_status(FreeSmartphone.GSM.ContextStatus status, GLib.HashTable<string, GLib.Variant> properties);

			[DBus (name = "InternalStatusUpdate")]
			public abstract async void internal_status_update(string status, GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.GSM.PDP", timeout = 120000)]
		public interface PDPSync : GLib.Object {

			[DBus (name = "SetCredentials")]
			public abstract void set_credentials(string apn, string username, string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetCredentials")]
			public abstract void get_credentials(out string apn, out string username, out string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RoamingAllowed")]
			public abstract bool roaming_allowed {  get; set; }

			[DBus (name = "ActivateContext")]
			public abstract void activate_context() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DeactivateContext")]
			public abstract void deactivate_context() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetContextStatus")]
			public abstract void get_context_status(out FreeSmartphone.GSM.ContextStatus status, out GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ContextStatus")]
			public signal void context_status(FreeSmartphone.GSM.ContextStatus status, GLib.HashTable<string, GLib.Variant> properties);

			[DBus (name = "InternalStatusUpdate")]
			public abstract void internal_status_update(string status, GLib.HashTable<string, GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (use_string_marshalling = true)]
		public enum ContextStatus {
			[DBus (value="unknown")]
			UNKNOWN,
			[DBus (value="incoming")]
			INCOMING,
			[DBus (value="outgoing")]
			OUTGOING,
			[DBus (value="active")]
			ACTIVE,
			[DBus (value="released")]
			RELEASED,
			[DBus (value="shutdown")]
			SHUTDOWN,
			[DBus (value="suspended")]
			SUSPENDED,
		}

		[DBus (name = "org.freesmartphone.GSM.Monitor", timeout = 120000)]
		public interface Monitor : GLib.Object {

			[DBus (name = "GetServingCellInformation")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_serving_cell_information() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetNeighbourCellInformation")]
			public abstract async GLib.HashTable<string, GLib.Variant>[] get_neighbour_cell_information() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.GSM.Monitor", timeout = 120000)]
		public interface MonitorSync : GLib.Object {

			[DBus (name = "GetServingCellInformation")]
			public abstract GLib.HashTable<string, GLib.Variant> get_serving_cell_information() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetNeighbourCellInformation")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_neighbour_cell_information() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (use_string_marshalling = true)]
		public enum CallStatus {
			[DBus (value="INCOMING")]
			INCOMING,
			[DBus (value="OUTGOING")]
			OUTGOING,
			[DBus (value="ACTIVE")]
			ACTIVE,
			[DBus (value="HELD")]
			HELD,
			[DBus (value="RELEASE")]
			RELEASE,
		}

		public struct SIMEntry {
			public int index;
			public string name;
			public string number;

			public SIMEntry (int index, string name, string number ) {
				this.index = index;
				this.name = name;
				this.number = number;
			}

			public static SIMEntry from_variant (Variant v) {
				return v as SIMEntry;
			}
		}
		public struct SIMHomeZone {
			public string name;
			public int x;
			public int y;
			public int radius;

			public SIMHomeZone (string name, int x, int y, int radius ) {
				this.name = name;
				this.x = x;
				this.y = y;
				this.radius = radius;
			}

			public static SIMHomeZone from_variant (Variant v) {
				return v as SIMHomeZone;
			}
		}
		[DBus (name = "org.freesmartphone.GSM.Call", timeout = 120000)]
		public interface Call : GLib.Object {

			[DBus (name = "Emergency")]
			public abstract async void emergency(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Activate")]
			public abstract async void activate(int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ActivateConference")]
			public abstract async void activate_conference(int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Release")]
			public abstract async void release(int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "HoldActive")]
			public abstract async void hold_active() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Join")]
			public abstract async void join() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Transfer")]
			public abstract async void transfer() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Deflect")]
			public abstract async void deflect(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseHeld")]
			public abstract async void release_held() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseAll")]
			public abstract async void release_all() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Initiate")]
			public abstract async int initiate(string number, string type) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ListCalls")]
			public abstract async FreeSmartphone.GSM.CallDetail[] list_calls() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendDtmf")]
			public abstract async void send_dtmf(string tones) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "CallStatus")]
			public signal void call_status(int id, FreeSmartphone.GSM.CallStatus status, GLib.HashTable<string, GLib.Variant> properties);
		}

		[DBus (name = "org.freesmartphone.GSM.Call", timeout = 120000)]
		public interface CallSync : GLib.Object {

			[DBus (name = "Emergency")]
			public abstract void emergency(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Activate")]
			public abstract void activate(int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ActivateConference")]
			public abstract void activate_conference(int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Release")]
			public abstract void release(int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "HoldActive")]
			public abstract void hold_active() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Join")]
			public abstract void join() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Transfer")]
			public abstract void transfer() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Deflect")]
			public abstract void deflect(string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseHeld")]
			public abstract void release_held() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseAll")]
			public abstract void release_all() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Initiate")]
			public abstract int initiate(string number, string type) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ListCalls")]
			public abstract FreeSmartphone.GSM.CallDetail[] list_calls() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendDtmf")]
			public abstract void send_dtmf(string tones) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "CallStatus")]
			public signal void call_status(int id, FreeSmartphone.GSM.CallStatus status, GLib.HashTable<string, GLib.Variant> properties);
		}

		[DBus (name = "org.freesmartphone.GSM")]
		public errordomain Error {
			[DBus (name = "DeviceNotPresent")]
			DEVICE_NOT_PRESENT,
			[DBus (name = "DeviceTimeout")]
			DEVICE_TIMEOUT,
			[DBus (name = "DeviceFailed")]
			DEVICE_FAILED,
			[DBus (name = "AuthorizationRequired")]
			AUTHORIZATION_REQUIRED,
			[DBus (name = "SimNotPresent")]
			SIM_NOT_PRESENT,
			[DBus (name = "SimAuthFailed")]
			SIM_AUTH_FAILED,
			[DBus (name = "SimBlocked")]
			SIM_BLOCKED,
			[DBus (name = "SimNotFound")]
			SIM_NOT_FOUND,
			[DBus (name = "SimMemoryFull")]
			SIM_MEMORY_FULL,
			[DBus (name = "SimInvalidIndex")]
			SIM_INVALID_INDEX,
			[DBus (name = "CallNotFound")]
			CALL_NOT_FOUND,
			[DBus (name = "MuxChannelTaken")]
			MUX_CHANNEL_TAKEN,
			[DBus (name = "MuxNoChannel")]
			MUX_NO_CHANNEL,
			[DBus (name = "MuxNoSession")]
			MUX_NO_SESSION,
			[DBus (name = "MuxSessionAlreadyOpen")]
			MUX_SESSION_ALREADY_OPEN,
			[DBus (name = "MuxSessionOpenError")]
			MUX_SESSION_OPEN_ERROR,
			[DBus (name = "NetworkNotPresent")]
			NETWORK_NOT_PRESENT,
			[DBus (name = "NetworkUnauthorized")]
			NETWORK_UNAUTHORIZED,
			[DBus (name = "NetworkNotSupported")]
			NETWORK_NOT_SUPPORTED,
			[DBus (name = "NetworkNotFound")]
			NETWORK_NOT_FOUND,
			[DBus (name = "ContextNotFound")]
			CONTEXT_NOT_FOUND,
		}

		[DBus (use_string_marshalling = true)]
		public enum UssdStatus {
			[DBus (value="completed")]
			COMPLETED,
			[DBus (value="useraction")]
			USERACTION,
			[DBus (value="terminated")]
			TERMINATED,
			[DBus (value="localclient")]
			LOCALCLIENT,
			[DBus (value="unsupported")]
			UNSUPPORTED,
			[DBus (value="timeout")]
			TIMEOUT,
		}

		[DBus (name = "org.freesmartphone.GSM.Debug", timeout = 120000)]
		public interface Debug : GLib.Object {

			[DBus (name = "DebugCommand")]
			public abstract async string debug_command(string command, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DebugInjectResponse")]
			public abstract async void debug_inject_response(string response, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DebugPing")]
			public abstract async void debug_ping() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DebugStatus")]
			public signal void debug_status(GLib.HashTable<string, string> channels);
		}

		[DBus (name = "org.freesmartphone.GSM.Debug", timeout = 120000)]
		public interface DebugSync : GLib.Object {

			[DBus (name = "DebugCommand")]
			public abstract string debug_command(string command, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DebugInjectResponse")]
			public abstract void debug_inject_response(string response, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DebugPing")]
			public abstract void debug_ping() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DebugStatus")]
			public signal void debug_status(GLib.HashTable<string, string> channels);
		}

		[DBus (use_string_marshalling = true)]
		public enum DeviceStatus {
			[DBus (value="unknown")]
			UNKNOWN,
			[DBus (value="closed")]
			CLOSED,
			[DBus (value="initializing")]
			INITIALIZING,
			[DBus (value="alive-no-sim")]
			ALIVE_NO_SIM,
			[DBus (value="alive-sim-locked")]
			ALIVE_SIM_LOCKED,
			[DBus (value="alive-sim-unlocked")]
			ALIVE_SIM_UNLOCKED,
			[DBus (value="alive-sim-ready")]
			ALIVE_SIM_READY,
			[DBus (value="alive-registered")]
			ALIVE_REGISTERED,
			[DBus (value="suspending")]
			SUSPENDING,
			[DBus (value="suspended")]
			SUSPENDED,
			[DBus (value="resuming")]
			RESUMING,
			[DBus (value="closing")]
			CLOSING,
		}

		[DBus (name = "org.freesmartphone.GSM.SMS", timeout = 120000)]
		public interface SMS : GLib.Object {

			[DBus (name = "RetrieveTextMessages")]
			public abstract async FreeSmartphone.GSM.SIMMessage[] retrieve_text_messages() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetSizeForTextMessage")]
			public abstract async uint get_size_for_text_message(string contents) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendTextMessage")]
			public abstract async void send_text_message(string recipient_number, string contents, bool report, out int reference, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingTextMessage")]
			public signal void incoming_text_message(string number, string timestamp, string contents);

			[DBus (name = "IncomingMessageReport")]
			public signal void incoming_message_report(int reference, string status, string sender_number, string contents);
		}

		[DBus (name = "org.freesmartphone.GSM.SMS", timeout = 120000)]
		public interface SMSSync : GLib.Object {

			[DBus (name = "RetrieveTextMessages")]
			public abstract FreeSmartphone.GSM.SIMMessage[] retrieve_text_messages() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetSizeForTextMessage")]
			public abstract uint get_size_for_text_message(string contents) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendTextMessage")]
			public abstract void send_text_message(string recipient_number, string contents, bool report, out int reference, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingTextMessage")]
			public signal void incoming_text_message(string number, string timestamp, string contents);

			[DBus (name = "IncomingMessageReport")]
			public signal void incoming_message_report(int reference, string status, string sender_number, string contents);
		}

		[DBus (name = "org.freesmartphone.GSM.Network", timeout = 120000)]
		public interface Network : GLib.Object {

			[DBus (name = "Register")]
			public abstract async void register_() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Unregister")]
			public abstract async void unregister() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetStatus")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Status")]
			public signal void status(GLib.HashTable<string, GLib.Variant> status);

			[DBus (name = "GetSignalStrength")]
			public abstract async int get_signal_strength() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SignalStrength")]
			public signal void signal_strength(int signal_strength);

			[DBus (name = "GetTimeReport")]
			public abstract async void get_time_report(out int time, out int timestamp, out int zone, out int zonestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "TimeReport")]
			public signal void time_report(int time, int zone);

			[DBus (name = "ListProviders")]
			public abstract async FreeSmartphone.GSM.NetworkProvider[] list_providers() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RegisterWithProvider")]
			public abstract async void register_with_provider(string operator_code) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetCallingIdentification")]
			public abstract async void set_calling_identification(FreeSmartphone.GSM.CallingIdentificationStatus status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetCallingIdentification")]
			public abstract async FreeSmartphone.GSM.CallingIdentificationStatus get_calling_identification() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendUssdRequest")]
			public abstract async void send_ussd_request(string request) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingUssd")]
			public signal void incoming_ussd(FreeSmartphone.GSM.UssdStatus mode, string message_);

			[DBus (name = "CipherStatus")]
			public signal void cipher_status(FreeSmartphone.GSM.CipherStatus telephony, FreeSmartphone.GSM.CipherStatus pdp);
		}

		[DBus (name = "org.freesmartphone.GSM.Network", timeout = 120000)]
		public interface NetworkSync : GLib.Object {

			[DBus (name = "Register")]
			public abstract void register_() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Unregister")]
			public abstract void unregister() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetStatus")]
			public abstract GLib.HashTable<string, GLib.Variant> get_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Status")]
			public signal void status(GLib.HashTable<string, GLib.Variant> status);

			[DBus (name = "GetSignalStrength")]
			public abstract int get_signal_strength() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SignalStrength")]
			public signal void signal_strength(int signal_strength);

			[DBus (name = "GetTimeReport")]
			public abstract void get_time_report(out int time, out int timestamp, out int zone, out int zonestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "TimeReport")]
			public signal void time_report(int time, int zone);

			[DBus (name = "ListProviders")]
			public abstract FreeSmartphone.GSM.NetworkProvider[] list_providers() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RegisterWithProvider")]
			public abstract void register_with_provider(string operator_code) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetCallingIdentification")]
			public abstract void set_calling_identification(FreeSmartphone.GSM.CallingIdentificationStatus status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetCallingIdentification")]
			public abstract FreeSmartphone.GSM.CallingIdentificationStatus get_calling_identification() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SendUssdRequest")]
			public abstract void send_ussd_request(string request) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "IncomingUssd")]
			public signal void incoming_ussd(FreeSmartphone.GSM.UssdStatus mode, string message_);

			[DBus (name = "CipherStatus")]
			public signal void cipher_status(FreeSmartphone.GSM.CipherStatus telephony, FreeSmartphone.GSM.CipherStatus pdp);
		}

		public struct NetworkProvider {
			public string status;
			public string shortname;
			public string longname;
			public string mccmnc;
			public string act;

			public NetworkProvider (string status, string shortname, string longname, string mccmnc, string act ) {
				this.status = status;
				this.shortname = shortname;
				this.longname = longname;
				this.mccmnc = mccmnc;
				this.act = act;
			}

			public static NetworkProvider from_variant (Variant v) {
				return v as NetworkProvider;
			}
		}
		[DBus (name = "org.freesmartphone.GSM.CallForwarding", timeout = 120000)]
		public interface CallForwarding : GLib.Object {

			[DBus (name = "DisableAll")]
			public abstract async void disable_all(string type) throws FreeSmartphone.Error, FreeSmartphone.GSM.Error, DBusError, IOError;

			[DBus (name = "Enable")]
			public abstract async void enable(string rule, string number, int timeout) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Disable")]
			public abstract async void disable(string rule) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetStatus")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_status(string rule) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StatusChanged")]
			public signal void status_changed(string rule, GLib.HashTable<string, GLib.Variant> status);
		}

		[DBus (name = "org.freesmartphone.GSM.CallForwarding", timeout = 120000)]
		public interface CallForwardingSync : GLib.Object {

			[DBus (name = "DisableAll")]
			public abstract void disable_all(string type) throws FreeSmartphone.Error, FreeSmartphone.GSM.Error, DBusError, IOError;

			[DBus (name = "Enable")]
			public abstract void enable(string rule, string number, int timeout) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Disable")]
			public abstract void disable(string rule) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetStatus")]
			public abstract GLib.HashTable<string, GLib.Variant> get_status(string rule) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StatusChanged")]
			public signal void status_changed(string rule, GLib.HashTable<string, GLib.Variant> status);
		}

		public struct CallDetail {
			public int id;
			public FreeSmartphone.GSM.CallStatus status;
			public GLib.HashTable<string, GLib.Variant> properties;

			public CallDetail (int id, FreeSmartphone.GSM.CallStatus status, GLib.HashTable<string, GLib.Variant> properties ) {
				this.id = id;
				this.status = status;
				this.properties = properties;
			}

			public static CallDetail from_variant (Variant v) {
				return v as CallDetail;
			}
		}
		[DBus (use_string_marshalling = true)]
		public enum CallingIdentificationStatus {
			[DBus (value="network")]
			NETWORK,
			[DBus (value="off")]
			OFF,
			[DBus (value="on")]
			ON,
		}

		[DBus (name = "org.freesmartphone.GSM.Device", timeout = 120000)]
		public interface Device : GLib.Object {

			[DBus (name = "GetFunctionality")]
			public abstract async void get_functionality(out string level, out bool autoregister, out string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetFunctionality")]
			public abstract async void set_functionality(string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetFeatures")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_features() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetDeviceStatus")]
			public abstract async FreeSmartphone.GSM.DeviceStatus get_device_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DeviceStatus")]
			public signal void device_status(FreeSmartphone.GSM.DeviceStatus status);

			[DBus (name = "GetSpeakerVolume")]
			public abstract async int get_speaker_volume() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetSpeakerVolume")]
			public abstract async void set_speaker_volume(int volume) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetMicrophoneMuted")]
			public abstract async bool get_microphone_muted() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetMicrophoneMuted")]
			public abstract async void set_microphone_muted(bool muted) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "KeypadEvent")]
			public signal void keypad_event(string name, bool pressed);
		}

		[DBus (name = "org.freesmartphone.GSM.Device", timeout = 120000)]
		public interface DeviceSync : GLib.Object {

			[DBus (name = "GetFunctionality")]
			public abstract void get_functionality(out string level, out bool autoregister, out string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetFunctionality")]
			public abstract void set_functionality(string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetFeatures")]
			public abstract GLib.HashTable<string, GLib.Variant> get_features() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetDeviceStatus")]
			public abstract FreeSmartphone.GSM.DeviceStatus get_device_status() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "DeviceStatus")]
			public signal void device_status(FreeSmartphone.GSM.DeviceStatus status);

			[DBus (name = "GetSpeakerVolume")]
			public abstract int get_speaker_volume() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetSpeakerVolume")]
			public abstract void set_speaker_volume(int volume) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetMicrophoneMuted")]
			public abstract bool get_microphone_muted() throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetMicrophoneMuted")]
			public abstract void set_microphone_muted(bool muted) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "KeypadEvent")]
			public signal void keypad_event(string name, bool pressed);
		}

		public struct SIMMessage {
			public int index;
			public string status;
			public string number;
			public string timestamp;
			public string contents;
			public GLib.HashTable<string, GLib.Variant> properties;

			public SIMMessage (int index, string status, string number, string timestamp, string contents, GLib.HashTable<string, GLib.Variant> properties ) {
				this.index = index;
				this.status = status;
				this.number = number;
				this.timestamp = timestamp;
				this.contents = contents;
				this.properties = properties;
			}

			public static SIMMessage from_variant (Variant v) {
				return v as SIMMessage;
			}
		}	}
}
