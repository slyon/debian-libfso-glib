/* Generated by vala-dbus-binding-tool 0.3.3. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=/usr/local/share/freesmartphone/xml --directory=../src --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone --gdbus */
using GLib;

namespace FreeSmartphone {

	namespace Time {

		public struct WakeupAlarm {
			public string busname;
			public int timestamp;

			public WakeupAlarm (string busname, int timestamp ) {
				this.busname = busname;
				this.timestamp = timestamp;
			}

			public static WakeupAlarm from_variant (Variant v) {
				return v as WakeupAlarm;
			}
		}
		[DBus (name = "org.freesmartphone.Time.Alarm", timeout = 120000)]
		public interface Alarm : GLib.Object {

			[DBus (name = "ClearAlarms")]
			public abstract async void clear_alarms(string busname) throws DBusError, IOError;

			[DBus (name = "ListAlarms")]
			public abstract async FreeSmartphone.Time.WakeupAlarm[] list_alarms() throws DBusError, IOError;

			[DBus (name = "RemoveAlarm")]
			public abstract async void remove_alarm(string busname, int timestamp) throws DBusError, IOError;

			[DBus (name = "AddAlarm")]
			public abstract async void add_alarm(string busname, int timestamp) throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Time.Alarm", timeout = 120000)]
		public interface AlarmSync : GLib.Object {

			[DBus (name = "ClearAlarms")]
			public abstract void clear_alarms(string busname) throws DBusError, IOError;

			[DBus (name = "ListAlarms")]
			public abstract FreeSmartphone.Time.WakeupAlarm[] list_alarms() throws DBusError, IOError;

			[DBus (name = "RemoveAlarm")]
			public abstract void remove_alarm(string busname, int timestamp) throws DBusError, IOError;

			[DBus (name = "AddAlarm")]
			public abstract void add_alarm(string busname, int timestamp) throws FreeSmartphone.Error, DBusError, IOError;
		}
	}
}
