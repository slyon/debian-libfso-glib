/* Generated by vala-dbus-binding-tool 0.3.3. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=/usr/local/share/freesmartphone/xml --directory=../src --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone --gdbus */
using GLib;

namespace FreeSmartphone {

	namespace Device {

		[DBus (name = "org.freesmartphone.Device.IdleNotifier", timeout = 120000)]
		public interface IdleNotifier : GLib.Object {

			[DBus (name = "GetState")]
			public abstract async FreeSmartphone.Device.IdleState get_state() throws DBusError, IOError;

			[DBus (name = "GetTimeouts")]
			public abstract async GLib.HashTable<string, int> get_timeouts() throws DBusError, IOError;

			[DBus (name = "SetTimeout")]
			public abstract async void set_timeout(FreeSmartphone.Device.IdleState status, int timeout) throws DBusError, IOError;

			[DBus (name = "SetState")]
			public abstract async void set_state(FreeSmartphone.Device.IdleState status) throws DBusError, IOError;

			[DBus (name = "State")]
			public signal void state(FreeSmartphone.Device.IdleState status);
		}

		[DBus (name = "org.freesmartphone.Device.IdleNotifier", timeout = 120000)]
		public interface IdleNotifierSync : GLib.Object {

			[DBus (name = "GetState")]
			public abstract FreeSmartphone.Device.IdleState get_state() throws DBusError, IOError;

			[DBus (name = "GetTimeouts")]
			public abstract GLib.HashTable<string, int> get_timeouts() throws DBusError, IOError;

			[DBus (name = "SetTimeout")]
			public abstract void set_timeout(FreeSmartphone.Device.IdleState status, int timeout) throws DBusError, IOError;

			[DBus (name = "SetState")]
			public abstract void set_state(FreeSmartphone.Device.IdleState status) throws DBusError, IOError;

			[DBus (name = "State")]
			public signal void state(FreeSmartphone.Device.IdleState status);
		}

		[DBus (name = "org.freesmartphone.Device.Display", timeout = 120000)]
		public interface Display : GLib.Object {

			[DBus (name = "GetBrightness")]
			public abstract async int get_brightness() throws DBusError, IOError;

			[DBus (name = "SetBrightness")]
			public abstract async void set_brightness(int brightness) throws DBusError, IOError;

			[DBus (name = "GetBacklightPower")]
			public abstract async bool get_backlight_power() throws DBusError, IOError;

			[DBus (name = "SetBacklightPower")]
			public abstract async void set_backlight_power(bool power) throws DBusError, IOError;

			[DBus (name = "BacklightPower")]
			public signal void backlight_power(bool power);
		}

		[DBus (name = "org.freesmartphone.Device.Display", timeout = 120000)]
		public interface DisplaySync : GLib.Object {

			[DBus (name = "GetBrightness")]
			public abstract int get_brightness() throws DBusError, IOError;

			[DBus (name = "SetBrightness")]
			public abstract void set_brightness(int brightness) throws DBusError, IOError;

			[DBus (name = "GetBacklightPower")]
			public abstract bool get_backlight_power() throws DBusError, IOError;

			[DBus (name = "SetBacklightPower")]
			public abstract void set_backlight_power(bool power) throws DBusError, IOError;

			[DBus (name = "BacklightPower")]
			public signal void backlight_power(bool power);
		}

		[DBus (name = "org.freesmartphone.Device.LED", timeout = 120000)]
		public interface LED : GLib.Object {

			[DBus (name = "SetBrightness")]
			public abstract async void set_brightness(int brightness) throws DBusError, IOError;

			[DBus (name = "SetBlinking")]
			public abstract async void set_blinking(int on_duration, int off_duration) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "BlinkSeconds")]
			public abstract async void blink_seconds(int seconds, int on_duration, int off_duration) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetNetworking")]
			public abstract async void set_networking(string interface, string mode) throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.LED", timeout = 120000)]
		public interface LEDSync : GLib.Object {

			[DBus (name = "SetBrightness")]
			public abstract void set_brightness(int brightness) throws DBusError, IOError;

			[DBus (name = "SetBlinking")]
			public abstract void set_blinking(int on_duration, int off_duration) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "BlinkSeconds")]
			public abstract void blink_seconds(int seconds, int on_duration, int off_duration) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetNetworking")]
			public abstract void set_networking(string interface, string mode) throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.Vibrator", timeout = 120000)]
		public interface Vibrator : GLib.Object {

			[DBus (name = "VibratePattern")]
			public abstract async void vibrate_pattern(int pulses, int on_duration_ms, int off_duration_ms, int strength_percentage) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Vibrate")]
			public abstract async void vibrate(int duration_ms, int strength_percentage) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Stop")]
			public abstract async void stop() throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.Vibrator", timeout = 120000)]
		public interface VibratorSync : GLib.Object {

			[DBus (name = "VibratePattern")]
			public abstract void vibrate_pattern(int pulses, int on_duration_ms, int off_duration_ms, int strength_percentage) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Vibrate")]
			public abstract void vibrate(int duration_ms, int strength_percentage) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Stop")]
			public abstract void stop() throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.Audio", timeout = 120000)]
		public interface Audio : GLib.Object {

			[DBus (name = "PlaySound")]
			public abstract async void play_sound(string name, int loop, int length) throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StopSound")]
			public abstract async void stop_sound(string name) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StopAllSounds")]
			public abstract async void stop_all_sounds() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SoundStatus")]
			public signal void sound_status(string id, FreeSmartphone.Device.SoundState status, GLib.HashTable<string, GLib.Variant> properties);

			[DBus (name = "GetAvailableScenarios")]
			public abstract async string[] get_available_scenarios() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetScenario")]
			public abstract async string get_scenario() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetScenario")]
			public abstract async void set_scenario(string scenario) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PushScenario")]
			public abstract async void push_scenario(string scenario) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PullScenario")]
			public abstract async string pull_scenario() throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SaveScenario")]
			public abstract async void save_scenario(string scenario) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Scenario")]
			public signal void scenario(string scenario, string reason);

			[DBus (name = "GetVolume")]
			public abstract async uint8 get_volume() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetVolume")]
			public abstract async void set_volume(uint8 volume) throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.Audio", timeout = 120000)]
		public interface AudioSync : GLib.Object {

			[DBus (name = "PlaySound")]
			public abstract void play_sound(string name, int loop, int length) throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StopSound")]
			public abstract void stop_sound(string name) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "StopAllSounds")]
			public abstract void stop_all_sounds() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SoundStatus")]
			public signal void sound_status(string id, FreeSmartphone.Device.SoundState status, GLib.HashTable<string, GLib.Variant> properties);

			[DBus (name = "GetAvailableScenarios")]
			public abstract string[] get_available_scenarios() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetScenario")]
			public abstract string get_scenario() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetScenario")]
			public abstract void set_scenario(string scenario) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PushScenario")]
			public abstract void push_scenario(string scenario) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PullScenario")]
			public abstract string pull_scenario() throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SaveScenario")]
			public abstract void save_scenario(string scenario) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Scenario")]
			public signal void scenario(string scenario, string reason);

			[DBus (name = "GetVolume")]
			public abstract uint8 get_volume() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetVolume")]
			public abstract void set_volume(uint8 volume) throws FreeSmartphone.Error, DBusError, IOError;
		}

		[DBus (use_string_marshalling = true)]
		public enum IdleState {
			[DBus (value="busy")]
			BUSY,
			[DBus (value="idle")]
			IDLE,
			[DBus (value="idle_dim")]
			IDLE_DIM,
			[DBus (value="idle_prelock")]
			IDLE_PRELOCK,
			[DBus (value="lock")]
			LOCK,
			[DBus (value="suspend")]
			SUSPEND,
			[DBus (value="awake")]
			AWAKE,
		}

		[DBus (name = "org.freesmartphone.Device.Proximity", timeout = 120000)]
		public interface Proximity : GLib.Object {

			[DBus (name = "GetProximity")]
			public abstract async void get_proximity(out int proximity, out int epoch) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Proximity")]
			public signal void proximity(int proximity);
		}

		[DBus (name = "org.freesmartphone.Device.Proximity", timeout = 120000)]
		public interface ProximitySync : GLib.Object {

			[DBus (name = "GetProximity")]
			public abstract void get_proximity(out int proximity, out int epoch) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "Proximity")]
			public signal void proximity(int proximity);
		}

		[DBus (name = "org.freesmartphone.Device.Orientation", timeout = 120000)]
		public interface Orientation : GLib.Object {

			[DBus (name = "GetOrientation")]
			public abstract async string get_orientation() throws DBusError, IOError;

			[DBus (name = "OrientationChanged")]
			public signal void orientation_changed(string orientation);
		}

		[DBus (name = "org.freesmartphone.Device.Orientation", timeout = 120000)]
		public interface OrientationSync : GLib.Object {

			[DBus (name = "GetOrientation")]
			public abstract string get_orientation() throws DBusError, IOError;

			[DBus (name = "OrientationChanged")]
			public signal void orientation_changed(string orientation);
		}

		[DBus (name = "org.freesmartphone.Device.RealtimeClock", timeout = 120000)]
		public interface RealtimeClock : GLib.Object {

			[DBus (name = "GetCurrentTime")]
			public abstract async int get_current_time() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetCurrentTime")]
			public abstract async void set_current_time(int time) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetWakeupTime")]
			public abstract async int get_wakeup_time() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetWakeupTime")]
			public abstract async void set_wakeup_time(int time) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "WakeupTimeChanged")]
			public signal void wakeup_time_changed(int time);

			[DBus (name = "Alarm")]
			public signal void alarm(int time);
		}

		[DBus (name = "org.freesmartphone.Device.RealtimeClock", timeout = 120000)]
		public interface RealtimeClockSync : GLib.Object {

			[DBus (name = "GetCurrentTime")]
			public abstract int get_current_time() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetCurrentTime")]
			public abstract void set_current_time(int time) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetWakeupTime")]
			public abstract int get_wakeup_time() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetWakeupTime")]
			public abstract void set_wakeup_time(int time) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "WakeupTimeChanged")]
			public signal void wakeup_time_changed(int time);

			[DBus (name = "Alarm")]
			public signal void alarm(int time);
		}

		[DBus (name = "org.freesmartphone.Device.PowerSupply", timeout = 120000)]
		public interface PowerSupply : GLib.Object {

			[DBus (name = "GetCapacity")]
			public abstract async int get_capacity() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetPowerStatus")]
			public abstract async FreeSmartphone.Device.PowerStatus get_power_status() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PowerStatus")]
			public signal void power_status(FreeSmartphone.Device.PowerStatus status);

			[DBus (name = "Capacity")]
			public signal void capacity(int energy);
		}

		[DBus (name = "org.freesmartphone.Device.PowerSupply", timeout = 120000)]
		public interface PowerSupplySync : GLib.Object {

			[DBus (name = "GetCapacity")]
			public abstract int get_capacity() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetPowerStatus")]
			public abstract FreeSmartphone.Device.PowerStatus get_power_status() throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PowerStatus")]
			public signal void power_status(FreeSmartphone.Device.PowerStatus status);

			[DBus (name = "Capacity")]
			public signal void capacity(int energy);
		}

		[DBus (name = "org.freesmartphone.Device.PowerControl", timeout = 120000)]
		public interface PowerControl : GLib.Object {

			[DBus (name = "GetPower")]
			public abstract async bool get_power() throws DBusError, IOError;

			[DBus (name = "SetPower")]
			public abstract async void set_power(bool on) throws DBusError, IOError;

			[DBus (name = "Power")]
			public signal void power(bool on);
		}

		[DBus (name = "org.freesmartphone.Device.PowerControl", timeout = 120000)]
		public interface PowerControlSync : GLib.Object {

			[DBus (name = "GetPower")]
			public abstract bool get_power() throws DBusError, IOError;

			[DBus (name = "SetPower")]
			public abstract void set_power(bool on) throws DBusError, IOError;

			[DBus (name = "Power")]
			public signal void power(bool on);
		}

		[DBus (name = "org.freesmartphone.Device.Info", timeout = 120000)]
		public interface Info : GLib.Object {

			[DBus (name = "GetCpuInfo")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_cpu_info() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.Info", timeout = 120000)]
		public interface InfoSync : GLib.Object {

			[DBus (name = "GetCpuInfo")]
			public abstract GLib.HashTable<string, GLib.Variant> get_cpu_info() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.Device.Input", timeout = 120000)]
		public interface Input : GLib.Object {

			[DBus (name = "GetId")]
			public abstract async string get_id() throws DBusError, IOError;

			[DBus (name = "GetCapabilities")]
			public abstract async string get_capabilities() throws DBusError, IOError;

			[DBus (name = "Event")]
			public signal void event(string name, FreeSmartphone.Device.InputState action, int seconds);

			[DBus (name = "DirectionalEvent")]
			public signal void directional_event(string name, int axis, int offset);
		}

		[DBus (name = "org.freesmartphone.Device.Input", timeout = 120000)]
		public interface InputSync : GLib.Object {

			[DBus (name = "GetId")]
			public abstract string get_id() throws DBusError, IOError;

			[DBus (name = "GetCapabilities")]
			public abstract string get_capabilities() throws DBusError, IOError;

			[DBus (name = "Event")]
			public signal void event(string name, FreeSmartphone.Device.InputState action, int seconds);

			[DBus (name = "DirectionalEvent")]
			public signal void directional_event(string name, int axis, int offset);
		}

		[DBus (use_string_marshalling = true)]
		public enum InputState {
			[DBus (value="pressed")]
			PRESSED,
			[DBus (value="held")]
			HELD,
			[DBus (value="released")]
			RELEASED,
		}

		[DBus (name = "org.freesmartphone.Device.Audio")]
		public errordomain AudioError {
			[DBus (name = "UnknownFormat")]
			UNKNOWN_FORMAT,
			[DBus (name = "PlayerError")]
			PLAYER_ERROR,
			[DBus (name = "NotPlaying")]
			NOT_PLAYING,
			[DBus (name = "AlreadyPlaying")]
			ALREADY_PLAYING,
			[DBus (name = "ScenarioInvalid")]
			SCENARIO_INVALID,
			[DBus (name = "ScenarioStackUnderflow")]
			SCENARIO_STACK_UNDERFLOW,
			[DBus (name = "DeviceFailed")]
			DEVICE_FAILED,
		}

		[DBus (use_string_marshalling = true)]
		public enum SoundState {
			[DBus (value="playing")]
			PLAYING,
			[DBus (value="stopped")]
			STOPPED,
		}

		[DBus (name = "org.freesmartphone.Device.AmbientLight", timeout = 120000)]
		public interface AmbientLight : GLib.Object {

			[DBus (name = "GetAmbientLightBrightness")]
			public abstract async void get_ambient_light_brightness(out int brightness, out int epoch) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "AmbientLightBrightness")]
			public signal void ambient_light_brightness(int brightness);
		}

		[DBus (name = "org.freesmartphone.Device.AmbientLight", timeout = 120000)]
		public interface AmbientLightSync : GLib.Object {

			[DBus (name = "GetAmbientLightBrightness")]
			public abstract void get_ambient_light_brightness(out int brightness, out int epoch) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "AmbientLightBrightness")]
			public signal void ambient_light_brightness(int brightness);
		}

		[DBus (use_string_marshalling = true)]
		public enum PowerStatus {
			[DBus (value="charging")]
			CHARGING,
			[DBus (value="discharging")]
			DISCHARGING,
			[DBus (value="full")]
			FULL,
			[DBus (value="empty")]
			EMPTY,
			[DBus (value="critical")]
			CRITICAL,
			[DBus (value="critical")]
			REMOVED,
			[DBus (value="unknown")]
			UNKNOWN,
			[DBus (value="online")]
			ONLINE,
			[DBus (value="offline")]
			OFFLINE,
			[DBus (value="ac")]
			AC,
		}
	}
}
