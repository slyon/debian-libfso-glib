/* Generated by vala-dbus-binding-tool 0.3.3. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=/usr/local/share/freesmartphone/xml --directory=../src --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone --gdbus */
using GLib;

namespace FreeSmartphone {

	namespace Audio {

		[DBus (name = "org.freesmartphone.Audio.Manager", timeout = 120000)]
		public interface Manager : GLib.Object {

			[DBus (name = "SetMode")]
			public abstract async void set_mode(FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetMode")]
			public abstract async FreeSmartphone.Audio.Mode get_mode() throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetDevice")]
			public abstract async void set_device(FreeSmartphone.Audio.Device name) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetDevice")]
			public abstract async FreeSmartphone.Audio.Device get_device() throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PushDevice")]
			public abstract async void push_device(FreeSmartphone.Audio.Device device) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PullDevice")]
			public abstract async FreeSmartphone.Audio.Device pull_device() throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetAvailableDevices")]
			public abstract async FreeSmartphone.Audio.Device[] get_available_devices(FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetVolume")]
			public abstract async int get_volume(FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetVolume")]
			public abstract async void set_volume(FreeSmartphone.Audio.Control control, int volume) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetMute")]
			public abstract async void set_mute(FreeSmartphone.Audio.Control control, bool mute) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetMute")]
			public abstract async bool get_mute(FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RegisterSession")]
			public abstract async string register_session(FreeSmartphone.Audio.Stream stream) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseSession")]
			public abstract async void release_session(string token) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ModeChanged")]
			public signal void mode_changed(FreeSmartphone.Audio.Mode mode);

			[DBus (name = "DeviceChanged")]
			public signal void device_changed(FreeSmartphone.Audio.Device device);

			[DBus (name = "VolumeChanged")]
			public signal void volume_changed(FreeSmartphone.Audio.Control control, int volume);

			[DBus (name = "MuteChanged")]
			public signal void mute_changed(FreeSmartphone.Audio.Control control, bool mute);
		}

		[DBus (name = "org.freesmartphone.Audio.Manager", timeout = 120000)]
		public interface ManagerSync : GLib.Object {

			[DBus (name = "SetMode")]
			public abstract void set_mode(FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetMode")]
			public abstract FreeSmartphone.Audio.Mode get_mode() throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetDevice")]
			public abstract void set_device(FreeSmartphone.Audio.Device name) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetDevice")]
			public abstract FreeSmartphone.Audio.Device get_device() throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PushDevice")]
			public abstract void push_device(FreeSmartphone.Audio.Device device) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "PullDevice")]
			public abstract FreeSmartphone.Audio.Device pull_device() throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetAvailableDevices")]
			public abstract FreeSmartphone.Audio.Device[] get_available_devices(FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetVolume")]
			public abstract int get_volume(FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetVolume")]
			public abstract void set_volume(FreeSmartphone.Audio.Control control, int volume) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "SetMute")]
			public abstract void set_mute(FreeSmartphone.Audio.Control control, bool mute) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "GetMute")]
			public abstract bool get_mute(FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "RegisterSession")]
			public abstract string register_session(FreeSmartphone.Audio.Stream stream) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ReleaseSession")]
			public abstract void release_session(string token) throws FreeSmartphone.Error, DBusError, IOError;

			[DBus (name = "ModeChanged")]
			public signal void mode_changed(FreeSmartphone.Audio.Mode mode);

			[DBus (name = "DeviceChanged")]
			public signal void device_changed(FreeSmartphone.Audio.Device device);

			[DBus (name = "VolumeChanged")]
			public signal void volume_changed(FreeSmartphone.Audio.Control control, int volume);

			[DBus (name = "MuteChanged")]
			public signal void mute_changed(FreeSmartphone.Audio.Control control, bool mute);
		}

		[DBus (name = "org.freesmartphone.Audio")]
		public errordomain Error {
			[DBus (name = "NotSupportedDevice")]
			NOT_SUPPORTED_DEVICE,
			[DBus (name = "DeviceStackUnderflow")]
			DEVICE_STACK_UNDERFLOW,
		}

		[DBus (use_string_marshalling = true)]
		public enum Stream {
			[DBus (value="invalid")]
			INVALID,
			[DBus (value="media")]
			MEDIA,
			[DBus (value="alert")]
			ALERT,
			[DBus (value="ringtone")]
			RINGTONE,
			[DBus (value="alarm")]
			ALARM,
			[DBus (value="navigation")]
			NAVIGATION,
		}

		[DBus (use_string_marshalling = true)]
		public enum Mode {
			[DBus (value="normal")]
			NORMAL,
			[DBus (value="call")]
			CALL,
		}

		[DBus (use_string_marshalling = true)]
		public enum Control {
			[DBus (value="speaker")]
			SPEAKER,
			[DBus (value="microphone")]
			MICROPHONE,
		}

		[DBus (use_string_marshalling = true)]
		public enum Device {
			[DBus (value="backspeaker")]
			BACKSPEAKER,
			[DBus (value="frontspeaker")]
			FRONTSPEAKER,
			[DBus (value="headset")]
			HEADSET,
			[DBus (value="bluetooth-sco")]
			BLUETOOTH_SCO,
			[DBus (value="bluetooth-a2dp")]
			BLUETOOTH_A2DP,
		}
	}
}
