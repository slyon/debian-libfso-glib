/* Generated by vala-dbus-binding-tool 0.3.3. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=/usr/local/share/freesmartphone/xml --directory=../src --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone --gdbus */
using GLib;

namespace FreeSmartphone {

	namespace PIM {

		[DBus (name = "org.freesmartphone.PIM.Fields", timeout = 120000)]
		public interface Fields : GLib.Object {

			[DBus (name = "AddField")]
			public abstract async void add_field(string name, string type) throws DBusError, IOError;

			[DBus (name = "DeleteField")]
			public abstract async void delete_field(string name) throws DBusError, IOError;

			[DBus (name = "GetType")]
			public abstract async string get_type_(string name) throws DBusError, IOError;

			[DBus (name = "ListFields")]
			public abstract async GLib.HashTable<string, string> list_fields() throws DBusError, IOError;

			[DBus (name = "ListFieldsWithType")]
			public abstract async string[] list_fields_with_type(string type) throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.Fields", timeout = 120000)]
		public interface FieldsSync : GLib.Object {

			[DBus (name = "AddField")]
			public abstract void add_field(string name, string type) throws DBusError, IOError;

			[DBus (name = "DeleteField")]
			public abstract void delete_field(string name) throws DBusError, IOError;

			[DBus (name = "GetType")]
			public abstract string get_type_(string name) throws DBusError, IOError;

			[DBus (name = "ListFields")]
			public abstract GLib.HashTable<string, string> list_fields() throws DBusError, IOError;

			[DBus (name = "ListFieldsWithType")]
			public abstract string[] list_fields_with_type(string type) throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.TaskQuery", timeout = 120000)]
		public interface TaskQuery : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract async void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract async void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetTaskPath")]
			public abstract async string get_task_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract async void dispose_() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.TaskQuery", timeout = 120000)]
		public interface TaskQuerySync : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetTaskPath")]
			public abstract string get_task_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract void dispose_() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.NoteQuery", timeout = 120000)]
		public interface NoteQuery : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract async void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract async void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetNotePath")]
			public abstract async string get_note_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract async void dispose_() throws DBusError, IOError;

			[DBus (name = "NoteAdded")]
			public signal void note_added(string note_path);
		}

		[DBus (name = "org.freesmartphone.PIM.NoteQuery", timeout = 120000)]
		public interface NoteQuerySync : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetNotePath")]
			public abstract string get_note_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract void dispose_() throws DBusError, IOError;

			[DBus (name = "NoteAdded")]
			public signal void note_added(string note_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Message", timeout = 120000)]
		public interface Message : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "MoveToFolder")]
			public abstract async void move_to_folder(string folder_name) throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract async void update(GLib.HashTable<string, GLib.Variant> message_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract async void delete() throws DBusError, IOError;

			[DBus (name = "MessageDeleted")]
			public signal void message_deleted();

			[DBus (name = "MessageUpdated")]
			public signal void message_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Message", timeout = 120000)]
		public interface MessageSync : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "MoveToFolder")]
			public abstract void move_to_folder(string folder_name) throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract void update(GLib.HashTable<string, GLib.Variant> message_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract void delete() throws DBusError, IOError;

			[DBus (name = "MessageDeleted")]
			public signal void message_deleted();

			[DBus (name = "MessageUpdated")]
			public signal void message_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.CallQuery", timeout = 120000)]
		public interface CallQuery : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract async void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract async void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetCallPath")]
			public abstract async string get_call_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract async void dispose_() throws DBusError, IOError;

			[DBus (name = "CallAdded")]
			public signal void call_added(string call_path);
		}

		[DBus (name = "org.freesmartphone.PIM.CallQuery", timeout = 120000)]
		public interface CallQuerySync : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetCallPath")]
			public abstract string get_call_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract void dispose_() throws DBusError, IOError;

			[DBus (name = "CallAdded")]
			public signal void call_added(string call_path);
		}

		[DBus (name = "org.freesmartphone.PIM.DateQuery", timeout = 120000)]
		public interface DateQuery : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract async void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract async void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetDatePath")]
			public abstract async string get_date_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract async void dispose_() throws DBusError, IOError;

			[DBus (name = "DateAdded")]
			public signal void date_added(string date_path);
		}

		[DBus (name = "org.freesmartphone.PIM.DateQuery", timeout = 120000)]
		public interface DateQuerySync : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetDatePath")]
			public abstract string get_date_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract void dispose_() throws DBusError, IOError;

			[DBus (name = "DateAdded")]
			public signal void date_added(string date_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Contacts", timeout = 120000)]
		public interface Contacts : GLib.Object {

			[DBus (name = "Add")]
			public abstract async string add(GLib.HashTable<string, GLib.Variant> contact_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract async string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewContact")]
			public signal void new_contact(string contact_path);

			[DBus (name = "UpdatedContact")]
			public signal void updated_contact(string contact_path, GLib.HashTable<string, GLib.Variant> contact_data);

			[DBus (name = "DeletedContact")]
			public signal void deleted_contact(string contact_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Contacts", timeout = 120000)]
		public interface ContactsSync : GLib.Object {

			[DBus (name = "Add")]
			public abstract string add(GLib.HashTable<string, GLib.Variant> contact_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewContact")]
			public signal void new_contact(string contact_path);

			[DBus (name = "UpdatedContact")]
			public signal void updated_contact(string contact_path, GLib.HashTable<string, GLib.Variant> contact_data);

			[DBus (name = "DeletedContact")]
			public signal void deleted_contact(string contact_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Task", timeout = 120000)]
		public interface Task : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract async void update(GLib.HashTable<string, GLib.Variant> task_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract async void delete() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.Task", timeout = 120000)]
		public interface TaskSync : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract void update(GLib.HashTable<string, GLib.Variant> task_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract void delete() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.Messages", timeout = 120000)]
		public interface Messages : GLib.Object {

			[DBus (name = "Add")]
			public abstract async string add(GLib.HashTable<string, GLib.Variant> message_data) throws DBusError, IOError;

			[DBus (name = "AddIncoming")]
			public abstract async string add_incoming(GLib.HashTable<string, GLib.Variant> message_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract async string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "QueryThreads")]
			public abstract async string query_threads(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "GetUnreadMessages")]
			public abstract async int get_unread_messages() throws DBusError, IOError;

			[DBus (name = "NewMessage")]
			public signal void new_message(string message_path);

			[DBus (name = "IncomingMessage")]
			public signal void incoming_message(string message_path);

			[DBus (name = "UnreadMessages")]
			public signal void unread_messages(int amount);

			[DBus (name = "UpdatedMessage")]
			public signal void updated_message(string message_path, GLib.HashTable<string, GLib.Variant> message_data);

			[DBus (name = "DeletedMessage")]
			public signal void deleted_message(string message_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Messages", timeout = 120000)]
		public interface MessagesSync : GLib.Object {

			[DBus (name = "Add")]
			public abstract string add(GLib.HashTable<string, GLib.Variant> message_data) throws DBusError, IOError;

			[DBus (name = "AddIncoming")]
			public abstract string add_incoming(GLib.HashTable<string, GLib.Variant> message_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "QueryThreads")]
			public abstract string query_threads(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "GetUnreadMessages")]
			public abstract int get_unread_messages() throws DBusError, IOError;

			[DBus (name = "NewMessage")]
			public signal void new_message(string message_path);

			[DBus (name = "IncomingMessage")]
			public signal void incoming_message(string message_path);

			[DBus (name = "UnreadMessages")]
			public signal void unread_messages(int amount);

			[DBus (name = "UpdatedMessage")]
			public signal void updated_message(string message_path, GLib.HashTable<string, GLib.Variant> message_data);

			[DBus (name = "DeletedMessage")]
			public signal void deleted_message(string message_path);
		}

		[DBus (name = "org.freesmartphone.PIM.MessageQuery", timeout = 120000)]
		public interface MessageQuery : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract async void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract async void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetMessagePath")]
			public abstract async string get_message_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract async void dispose_() throws DBusError, IOError;

			[DBus (name = "MessageAdded")]
			public signal void message_added(string message_path);
		}

		[DBus (name = "org.freesmartphone.PIM.MessageQuery", timeout = 120000)]
		public interface MessageQuerySync : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetMessagePath")]
			public abstract string get_message_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract void dispose_() throws DBusError, IOError;

			[DBus (name = "MessageAdded")]
			public signal void message_added(string message_path);
		}

		[DBus (name = "org.freesmartphone.PIM.MessageFolder", timeout = 120000)]
		public interface MessageFolder : GLib.Object {

			[DBus (name = "GetMessageCount")]
			public abstract async int get_message_count() throws DBusError, IOError;

			[DBus (name = "GetMessagePaths")]
			public abstract async string[] get_message_paths(int first, int count) throws DBusError, IOError;

			[DBus (name = "MessageMoved")]
			public signal void message_moved(string message_path, string new_folder);
		}

		[DBus (name = "org.freesmartphone.PIM.MessageFolder", timeout = 120000)]
		public interface MessageFolderSync : GLib.Object {

			[DBus (name = "GetMessageCount")]
			public abstract int get_message_count() throws DBusError, IOError;

			[DBus (name = "GetMessagePaths")]
			public abstract string[] get_message_paths(int first, int count) throws DBusError, IOError;

			[DBus (name = "MessageMoved")]
			public signal void message_moved(string message_path, string new_folder);
		}

		[DBus (name = "org.freesmartphone.PIM.Call", timeout = 120000)]
		public interface Call : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract async void update(GLib.HashTable<string, GLib.Variant> call_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract async void delete() throws DBusError, IOError;

			[DBus (name = "CallDeleted")]
			public signal void call_deleted();

			[DBus (name = "CallUpdated")]
			public signal void call_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Call", timeout = 120000)]
		public interface CallSync : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract void update(GLib.HashTable<string, GLib.Variant> call_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract void delete() throws DBusError, IOError;

			[DBus (name = "CallDeleted")]
			public signal void call_deleted();

			[DBus (name = "CallUpdated")]
			public signal void call_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Contact", timeout = 120000)]
		public interface Contact : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract async void update(GLib.HashTable<string, GLib.Variant> contact_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract async void delete() throws DBusError, IOError;

			[DBus (name = "ContactDeleted")]
			public signal void contact_deleted();

			[DBus (name = "ContactUpdated")]
			public signal void contact_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Contact", timeout = 120000)]
		public interface ContactSync : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract void update(GLib.HashTable<string, GLib.Variant> contact_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract void delete() throws DBusError, IOError;

			[DBus (name = "ContactDeleted")]
			public signal void contact_deleted();

			[DBus (name = "ContactUpdated")]
			public signal void contact_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Dates", timeout = 120000)]
		public interface Dates : GLib.Object {

			[DBus (name = "Add")]
			public abstract async string add(GLib.HashTable<string, GLib.Variant> date_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract async string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewDate")]
			public signal void new_date(string date_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Dates", timeout = 120000)]
		public interface DatesSync : GLib.Object {

			[DBus (name = "Add")]
			public abstract string add(GLib.HashTable<string, GLib.Variant> date_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewDate")]
			public signal void new_date(string date_path);
		}

		[DBus (name = "org.freesmartphone.PIM.Notes", timeout = 120000)]
		public interface Notes : GLib.Object {

			[DBus (name = "Add")]
			public abstract async string add(GLib.HashTable<string, GLib.Variant> note_data) throws DBusError, IOError;

			[DBus (name = "GetUsedTags")]
			public abstract async string[] get_used_tags() throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract async string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewNote")]
			public signal void new_note(string note_path);

			[DBus (name = "NewTag")]
			public signal void new_tag(string tag);

			[DBus (name = "TagRemoved")]
			public signal void tag_removed(string tag);
		}

		[DBus (name = "org.freesmartphone.PIM.Notes", timeout = 120000)]
		public interface NotesSync : GLib.Object {

			[DBus (name = "Add")]
			public abstract string add(GLib.HashTable<string, GLib.Variant> note_data) throws DBusError, IOError;

			[DBus (name = "GetUsedTags")]
			public abstract string[] get_used_tags() throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewNote")]
			public signal void new_note(string note_path);

			[DBus (name = "NewTag")]
			public signal void new_tag(string tag);

			[DBus (name = "TagRemoved")]
			public signal void tag_removed(string tag);
		}

		[DBus (name = "org.freesmartphone.PIM.Types", timeout = 120000)]
		public interface Types : GLib.Object {

			[DBus (name = "List")]
			public abstract async string[] list() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.Types", timeout = 120000)]
		public interface TypesSync : GLib.Object {

			[DBus (name = "List")]
			public abstract string[] list() throws DBusError, IOError;
		}

		[DBus (name = "org.freesmartphone.PIM.Calls", timeout = 120000)]
		public interface Calls : GLib.Object {

			[DBus (name = "Add")]
			public abstract async string add(GLib.HashTable<string, GLib.Variant> call_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract async string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "GetNewMissedCalls")]
			public abstract async int get_new_missed_calls() throws DBusError, IOError;

			[DBus (name = "NewCall")]
			public signal void new_call(string call_path);

			[DBus (name = "IncomingCall")]
			public signal void incoming_call(string call_path);

			[DBus (name = "NewMissedCalls")]
			public signal void new_missed_calls(int amount);
		}

		[DBus (name = "org.freesmartphone.PIM.Calls", timeout = 120000)]
		public interface CallsSync : GLib.Object {

			[DBus (name = "Add")]
			public abstract string add(GLib.HashTable<string, GLib.Variant> call_data) throws DBusError, IOError;

			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "GetNewMissedCalls")]
			public abstract int get_new_missed_calls() throws DBusError, IOError;

			[DBus (name = "NewCall")]
			public signal void new_call(string call_path);

			[DBus (name = "IncomingCall")]
			public signal void incoming_call(string call_path);

			[DBus (name = "NewMissedCalls")]
			public signal void new_missed_calls(int amount);
		}

		[DBus (name = "org.freesmartphone.PIM.Tasks", timeout = 120000)]
		public interface Tasks : GLib.Object {

			[DBus (name = "Add")]
			public abstract async string add(GLib.HashTable<string, GLib.Variant> task_data) throws DBusError, IOError;

			[DBus (name = "GetSingleTaskSingleField")]
			public abstract async string get_single_task_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract async string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewTask")]
			public signal void new_task(string task_path);

			[DBus (name = "UnfinishedTasks")]
			public signal void unfinished_tasks(int amount);
		}

		[DBus (name = "org.freesmartphone.PIM.Tasks", timeout = 120000)]
		public interface TasksSync : GLib.Object {

			[DBus (name = "Add")]
			public abstract string add(GLib.HashTable<string, GLib.Variant> task_data) throws DBusError, IOError;

			[DBus (name = "GetSingleTaskSingleField")]
			public abstract string get_single_task_single_field(GLib.HashTable<string, GLib.Variant> query, string field) throws DBusError, IOError;

			[DBus (name = "Query")]
			public abstract string query(GLib.HashTable<string, GLib.Variant> query) throws DBusError, IOError;

			[DBus (name = "NewTask")]
			public signal void new_task(string task_path);

			[DBus (name = "UnfinishedTasks")]
			public signal void unfinished_tasks(int amount);
		}

		[DBus (name = "org.freesmartphone.PIM.Note", timeout = 120000)]
		public interface Note : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract async void update(GLib.HashTable<string, GLib.Variant> note_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract async void delete() throws DBusError, IOError;

			[DBus (name = "NoteDeleted")]
			public signal void note_deleted();

			[DBus (name = "NoteUpdated")]
			public signal void note_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Note", timeout = 120000)]
		public interface NoteSync : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract void update(GLib.HashTable<string, GLib.Variant> note_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract void delete() throws DBusError, IOError;

			[DBus (name = "NoteDeleted")]
			public signal void note_deleted();

			[DBus (name = "NoteUpdated")]
			public signal void note_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Date", timeout = 120000)]
		public interface Date : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract async void update(GLib.HashTable<string, GLib.Variant> date_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract async void delete() throws DBusError, IOError;

			[DBus (name = "DateDeleted")]
			public signal void date_deleted();

			[DBus (name = "DateUpdated")]
			public signal void date_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.Date", timeout = 120000)]
		public interface DateSync : GLib.Object {

			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string, GLib.Variant> get_content() throws DBusError, IOError;

			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string, GLib.Variant> get_multiple_fields(string field_list) throws DBusError, IOError;

			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends() throws DBusError, IOError;

			[DBus (name = "Update")]
			public abstract void update(GLib.HashTable<string, GLib.Variant> date_data) throws DBusError, IOError;

			[DBus (name = "Delete")]
			public abstract void delete() throws DBusError, IOError;

			[DBus (name = "DateDeleted")]
			public signal void date_deleted();

			[DBus (name = "DateUpdated")]
			public signal void date_updated(GLib.HashTable<string, GLib.Variant> data);
		}

		[DBus (name = "org.freesmartphone.PIM.ContactQuery", timeout = 120000)]
		public interface ContactQuery : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract async void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract async void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetContactPath")]
			public abstract async string get_contact_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract async void dispose_() throws DBusError, IOError;

			[DBus (name = "ContactAdded")]
			public signal void contact_added(string contact_path);
		}

		[DBus (name = "org.freesmartphone.PIM.ContactQuery", timeout = 120000)]
		public interface ContactQuerySync : GLib.Object {

			[DBus (name = "GetResultCount")]
			public abstract int get_result_count() throws DBusError, IOError;

			[DBus (name = "Rewind")]
			public abstract void rewind() throws DBusError, IOError;

			[DBus (name = "Skip")]
			public abstract void skip(int count) throws DBusError, IOError;

			[DBus (name = "GetContactPath")]
			public abstract string get_contact_path() throws DBusError, IOError;

			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string, GLib.Variant> get_result() throws DBusError, IOError;

			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string, GLib.Variant>[] get_multiple_results(int count) throws DBusError, IOError;

			[DBus (name = "Dispose")]
			public abstract void dispose_() throws DBusError, IOError;

			[DBus (name = "ContactAdded")]
			public signal void contact_added(string contact_path);
		}
	}
}
