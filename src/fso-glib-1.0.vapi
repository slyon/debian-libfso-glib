/* fso-glib-1.0.vapi generated by valac 0.14.2, do not modify. */

namespace FreeSmartphone {
	namespace Audio {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Audio.Manager", timeout = 120000)]
		public interface Manager : GLib.Object {
			[DBus (name = "GetAvailableDevices")]
			public abstract async FreeSmartphone.Audio.Device[] get_available_devices (FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetDevice")]
			public abstract async FreeSmartphone.Audio.Device get_device () throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMode")]
			public abstract async FreeSmartphone.Audio.Mode get_mode () throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMute")]
			public abstract async bool get_mute (FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetVolume")]
			public abstract async int get_volume (FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PullDevice")]
			public abstract async FreeSmartphone.Audio.Device pull_device () throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PushDevice")]
			public abstract async void push_device (FreeSmartphone.Audio.Device device) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RegisterSession")]
			public abstract async string register_session (FreeSmartphone.Audio.Stream stream) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseSession")]
			public abstract async void release_session (string token) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetDevice")]
			public abstract async void set_device (FreeSmartphone.Audio.Device name) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetMode")]
			public abstract async void set_mode (FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetMute")]
			public abstract async void set_mute (FreeSmartphone.Audio.Control control, bool mute) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetVolume")]
			public abstract async void set_volume (FreeSmartphone.Audio.Control control, int volume) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeviceChanged")]
			public signal void device_changed (FreeSmartphone.Audio.Device device);
			[DBus (name = "ModeChanged")]
			public signal void mode_changed (FreeSmartphone.Audio.Mode mode);
			[DBus (name = "MuteChanged")]
			public signal void mute_changed (FreeSmartphone.Audio.Control control, bool mute);
			[DBus (name = "VolumeChanged")]
			public signal void volume_changed (FreeSmartphone.Audio.Control control, int volume);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Audio.Manager", timeout = 120000)]
		public interface ManagerSync : GLib.Object {
			[DBus (name = "GetAvailableDevices")]
			public abstract FreeSmartphone.Audio.Device[] get_available_devices (FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetDevice")]
			public abstract FreeSmartphone.Audio.Device get_device () throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMode")]
			public abstract FreeSmartphone.Audio.Mode get_mode () throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMute")]
			public abstract bool get_mute (FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetVolume")]
			public abstract int get_volume (FreeSmartphone.Audio.Control control) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PullDevice")]
			public abstract FreeSmartphone.Audio.Device pull_device () throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PushDevice")]
			public abstract void push_device (FreeSmartphone.Audio.Device device) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RegisterSession")]
			public abstract string register_session (FreeSmartphone.Audio.Stream stream) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseSession")]
			public abstract void release_session (string token) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetDevice")]
			public abstract void set_device (FreeSmartphone.Audio.Device name) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetMode")]
			public abstract void set_mode (FreeSmartphone.Audio.Mode mode) throws FreeSmartphone.Audio.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetMute")]
			public abstract void set_mute (FreeSmartphone.Audio.Control control, bool mute) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetVolume")]
			public abstract void set_volume (FreeSmartphone.Audio.Control control, int volume) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeviceChanged")]
			public signal void device_changed (FreeSmartphone.Audio.Device device);
			[DBus (name = "ModeChanged")]
			public signal void mode_changed (FreeSmartphone.Audio.Mode mode);
			[DBus (name = "MuteChanged")]
			public signal void mute_changed (FreeSmartphone.Audio.Control control, bool mute);
			[DBus (name = "VolumeChanged")]
			public signal void volume_changed (FreeSmartphone.Audio.Control control, int volume);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum Control {
			[DBus (value = "speaker")]
			SPEAKER,
			[DBus (value = "microphone")]
			MICROPHONE
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum Device {
			[DBus (value = "backspeaker")]
			BACKSPEAKER,
			[DBus (value = "frontspeaker")]
			FRONTSPEAKER,
			[DBus (value = "headset")]
			HEADSET,
			[DBus (value = "bluetooth-sco")]
			BLUETOOTH_SCO,
			[DBus (value = "bluetooth-a2dp")]
			BLUETOOTH_A2DP
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum Mode {
			[DBus (value = "normal")]
			NORMAL,
			[DBus (value = "call")]
			CALL
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum Stream {
			[DBus (value = "invalid")]
			INVALID,
			[DBus (value = "media")]
			MEDIA,
			[DBus (value = "alert")]
			ALERT,
			[DBus (value = "ringtone")]
			RINGTONE,
			[DBus (value = "alarm")]
			ALARM,
			[DBus (value = "navigation")]
			NAVIGATION
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Audio")]
		public errordomain Error {
			[DBus (name = "NotSupportedDevice")]
			NOT_SUPPORTED_DEVICE,
			[DBus (name = "DeviceStackUnderflow")]
			DEVICE_STACK_UNDERFLOW
		}
	}
	namespace Context {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Context.Client", timeout = 120000)]
		public interface Client : GLib.Object {
			[DBus (name = "LocationUpdate", no_reply = true)]
			public abstract void location_update (GLib.HashTable<string,GLib.Variant> from, GLib.HashTable<string,GLib.Variant> to) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Context.Client", timeout = 120000)]
		public interface ClientSync : GLib.Object {
			[DBus (name = "LocationUpdate", no_reply = true)]
			public abstract void location_update (GLib.HashTable<string,GLib.Variant> from, GLib.HashTable<string,GLib.Variant> to) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Context.Manager", timeout = 120000)]
		public interface Manager : GLib.Object {
			[DBus (name = "SubscribeLocationUpdates")]
			public abstract async void subscribe_location_updates (FreeSmartphone.Context.LocationUpdateAccuracy desired_accuracy) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "UnsubscribeLocationUpdates")]
			public abstract async void unsubscribe_location_updates () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Context.Manager", timeout = 120000)]
		public interface ManagerSync : GLib.Object {
			[DBus (name = "SubscribeLocationUpdates")]
			public abstract void subscribe_location_updates (FreeSmartphone.Context.LocationUpdateAccuracy desired_accuracy) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "UnsubscribeLocationUpdates")]
			public abstract void unsubscribe_location_updates () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum LocationUpdateAccuracy {
			[DBus (value = "invalid")]
			INVALID,
			[DBus (value = "navigation")]
			NAVI,
			[DBus (value = "best")]
			BEST,
			[DBus (value = "nearest-ten-meters")]
			@10M,
			[DBus (value = "hundred-meters")]
			@100M,
			[DBus (value = "one-kilometer")]
			@1KM,
			[DBus (value = "three-kilometers")]
			@3KM,
			[DBus (value = "hundred-kilometers")]
			@100KM
		}
	}
	namespace Data {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Data.World", timeout = 120000)]
		public interface World : GLib.Object {
			[DBus (name = "GetAllCountries")]
			public abstract async FreeSmartphone.Data.WorldCountry[] get_all_countries () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetApnsForMccMnc")]
			public abstract async FreeSmartphone.Data.WorldConnectivityAccessPoint[] get_apns_for_mcc_mnc (string mcc_mnc) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCountryCodeForMccMnc")]
			public abstract async string get_country_code_for_mcc_mnc (string mcc_mnc) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTimezonesForCountryCode")]
			public abstract async GLib.HashTable<string,string> get_timezones_for_country_code (string country_code) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Data.World", timeout = 120000)]
		public interface WorldSync : GLib.Object {
			[DBus (name = "GetAllCountries")]
			public abstract FreeSmartphone.Data.WorldCountry[] get_all_countries () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetApnsForMccMnc")]
			public abstract FreeSmartphone.Data.WorldConnectivityAccessPoint[] get_apns_for_mcc_mnc (string mcc_mnc) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCountryCodeForMccMnc")]
			public abstract string get_country_code_for_mcc_mnc (string mcc_mnc) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTimezonesForCountryCode")]
			public abstract GLib.HashTable<string,string> get_timezones_for_country_code (string country_code) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct WorldConnectivityAccessPoint {
			public string description;
			public string apn;
			public string username;
			public string password;
			public string dns1;
			public string dns2;
			public WorldConnectivityAccessPoint (string description, string apn, string username, string password, string dns1, string dns2);
			public static FreeSmartphone.Data.WorldConnectivityAccessPoint from_variant (GLib.Variant v);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct WorldCountry {
			public string code;
			public string name;
			public WorldCountry (string code, string name);
			public static FreeSmartphone.Data.WorldCountry from_variant (GLib.Variant v);
		}
	}
	namespace Device {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.AmbientLight", timeout = 120000)]
		public interface AmbientLight : GLib.Object {
			[DBus (name = "GetAmbientLightBrightness")]
			public abstract async void get_ambient_light_brightness (out int brightness, out int epoch) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "AmbientLightBrightness")]
			public signal void ambient_light_brightness (int brightness);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.AmbientLight", timeout = 120000)]
		public interface AmbientLightSync : GLib.Object {
			[DBus (name = "GetAmbientLightBrightness")]
			public abstract void get_ambient_light_brightness (out int brightness, out int epoch) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "AmbientLightBrightness")]
			public signal void ambient_light_brightness (int brightness);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Audio", timeout = 120000)]
		public interface Audio : GLib.Object {
			[DBus (name = "GetAvailableScenarios")]
			public abstract async string[] get_available_scenarios () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetScenario")]
			public abstract async string get_scenario () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetVolume")]
			public abstract async uint8 get_volume () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PlaySound")]
			public abstract async void play_sound (string name, int loop, int length) throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PullScenario")]
			public abstract async string pull_scenario () throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PushScenario")]
			public abstract async void push_scenario (string scenario) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SaveScenario")]
			public abstract async void save_scenario (string scenario) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetScenario")]
			public abstract async void set_scenario (string scenario) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetVolume")]
			public abstract async void set_volume (uint8 volume) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StopAllSounds")]
			public abstract async void stop_all_sounds () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StopSound")]
			public abstract async void stop_sound (string name) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Scenario")]
			public signal void scenario (string scenario, string reason);
			[DBus (name = "SoundStatus")]
			public signal void sound_status (string id, FreeSmartphone.Device.SoundState status, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Audio", timeout = 120000)]
		public interface AudioSync : GLib.Object {
			[DBus (name = "GetAvailableScenarios")]
			public abstract string[] get_available_scenarios () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetScenario")]
			public abstract string get_scenario () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetVolume")]
			public abstract uint8 get_volume () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PlaySound")]
			public abstract void play_sound (string name, int loop, int length) throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PullScenario")]
			public abstract string pull_scenario () throws FreeSmartphone.Device.AudioError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "PushScenario")]
			public abstract void push_scenario (string scenario) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SaveScenario")]
			public abstract void save_scenario (string scenario) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetScenario")]
			public abstract void set_scenario (string scenario) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetVolume")]
			public abstract void set_volume (uint8 volume) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StopAllSounds")]
			public abstract void stop_all_sounds () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StopSound")]
			public abstract void stop_sound (string name) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Scenario")]
			public signal void scenario (string scenario, string reason);
			[DBus (name = "SoundStatus")]
			public signal void sound_status (string id, FreeSmartphone.Device.SoundState status, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Display", timeout = 120000)]
		public interface Display : GLib.Object {
			[DBus (name = "GetBacklightPower")]
			public abstract async bool get_backlight_power () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetBrightness")]
			public abstract async int get_brightness () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBacklightPower")]
			public abstract async void set_backlight_power (bool power) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBrightness")]
			public abstract async void set_brightness (int brightness) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "BacklightPower")]
			public signal void backlight_power (bool power);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Display", timeout = 120000)]
		public interface DisplaySync : GLib.Object {
			[DBus (name = "GetBacklightPower")]
			public abstract bool get_backlight_power () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetBrightness")]
			public abstract int get_brightness () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBacklightPower")]
			public abstract void set_backlight_power (bool power) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBrightness")]
			public abstract void set_brightness (int brightness) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "BacklightPower")]
			public signal void backlight_power (bool power);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.IdleNotifier", timeout = 120000)]
		public interface IdleNotifier : GLib.Object {
			[DBus (name = "GetState")]
			public abstract async FreeSmartphone.Device.IdleState get_state () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTimeouts")]
			public abstract async GLib.HashTable<string,int> get_timeouts () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetState")]
			public abstract async void set_state (FreeSmartphone.Device.IdleState status) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetTimeout")]
			public abstract async void set_timeout (FreeSmartphone.Device.IdleState status, int timeout) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "State")]
			public signal void state (FreeSmartphone.Device.IdleState status);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.IdleNotifier", timeout = 120000)]
		public interface IdleNotifierSync : GLib.Object {
			[DBus (name = "GetState")]
			public abstract FreeSmartphone.Device.IdleState get_state () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTimeouts")]
			public abstract GLib.HashTable<string,int> get_timeouts () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetState")]
			public abstract void set_state (FreeSmartphone.Device.IdleState status) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetTimeout")]
			public abstract void set_timeout (FreeSmartphone.Device.IdleState status, int timeout) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "State")]
			public signal void state (FreeSmartphone.Device.IdleState status);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Info", timeout = 120000)]
		public interface Info : GLib.Object {
			[DBus (name = "GetCpuInfo")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_cpu_info () throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Info", timeout = 120000)]
		public interface InfoSync : GLib.Object {
			[DBus (name = "GetCpuInfo")]
			public abstract GLib.HashTable<string,GLib.Variant> get_cpu_info () throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Input", timeout = 120000)]
		public interface Input : GLib.Object {
			[DBus (name = "GetCapabilities")]
			public abstract async string get_capabilities () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetId")]
			public abstract async string get_id () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DirectionalEvent")]
			public signal void directional_event (string name, int axis, int offset);
			[DBus (name = "Event")]
			public signal void event (string name, FreeSmartphone.Device.InputState action, int seconds);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Input", timeout = 120000)]
		public interface InputSync : GLib.Object {
			[DBus (name = "GetCapabilities")]
			public abstract string get_capabilities () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetId")]
			public abstract string get_id () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DirectionalEvent")]
			public signal void directional_event (string name, int axis, int offset);
			[DBus (name = "Event")]
			public signal void event (string name, FreeSmartphone.Device.InputState action, int seconds);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.LED", timeout = 120000)]
		public interface LED : GLib.Object {
			[DBus (name = "BlinkSeconds")]
			public abstract async void blink_seconds (int seconds, int on_duration, int off_duration) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBlinking")]
			public abstract async void set_blinking (int on_duration, int off_duration) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBrightness")]
			public abstract async void set_brightness (int brightness) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetNetworking")]
			public abstract async void set_networking (string @interface, string mode) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.LED", timeout = 120000)]
		public interface LEDSync : GLib.Object {
			[DBus (name = "BlinkSeconds")]
			public abstract void blink_seconds (int seconds, int on_duration, int off_duration) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBlinking")]
			public abstract void set_blinking (int on_duration, int off_duration) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetBrightness")]
			public abstract void set_brightness (int brightness) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetNetworking")]
			public abstract void set_networking (string @interface, string mode) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Orientation", timeout = 120000)]
		public interface Orientation : GLib.Object {
			[DBus (name = "GetOrientation")]
			public abstract async string get_orientation () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "OrientationChanged")]
			public signal void orientation_changed (string orientation);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Orientation", timeout = 120000)]
		public interface OrientationSync : GLib.Object {
			[DBus (name = "GetOrientation")]
			public abstract string get_orientation () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "OrientationChanged")]
			public signal void orientation_changed (string orientation);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.PowerControl", timeout = 120000)]
		public interface PowerControl : GLib.Object {
			[DBus (name = "GetPower")]
			public abstract async bool get_power () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetPower")]
			public abstract async void set_power (bool on) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Power")]
			public signal void power (bool on);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.PowerControl", timeout = 120000)]
		public interface PowerControlSync : GLib.Object {
			[DBus (name = "GetPower")]
			public abstract bool get_power () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "SetPower")]
			public abstract void set_power (bool on) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Power")]
			public signal void power (bool on);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.PowerSupply", timeout = 120000)]
		public interface PowerSupply : GLib.Object {
			[DBus (name = "GetCapacity")]
			public abstract async int get_capacity () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetPowerStatus")]
			public abstract async FreeSmartphone.Device.PowerStatus get_power_status () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Capacity")]
			public signal void capacity (int energy);
			[DBus (name = "PowerStatus")]
			public signal void power_status (FreeSmartphone.Device.PowerStatus status);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.PowerSupply", timeout = 120000)]
		public interface PowerSupplySync : GLib.Object {
			[DBus (name = "GetCapacity")]
			public abstract int get_capacity () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetPowerStatus")]
			public abstract FreeSmartphone.Device.PowerStatus get_power_status () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Capacity")]
			public signal void capacity (int energy);
			[DBus (name = "PowerStatus")]
			public signal void power_status (FreeSmartphone.Device.PowerStatus status);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Proximity", timeout = 120000)]
		public interface Proximity : GLib.Object {
			[DBus (name = "GetProximity")]
			public abstract async void get_proximity (out int proximity, out int epoch) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Proximity")]
			public signal void proximity (int proximity);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Proximity", timeout = 120000)]
		public interface ProximitySync : GLib.Object {
			[DBus (name = "GetProximity")]
			public abstract void get_proximity (out int proximity, out int epoch) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Proximity")]
			public signal void proximity (int proximity);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.RealtimeClock", timeout = 120000)]
		public interface RealtimeClock : GLib.Object {
			[DBus (name = "GetCurrentTime")]
			public abstract async int get_current_time () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetWakeupTime")]
			public abstract async int get_wakeup_time () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCurrentTime")]
			public abstract async void set_current_time (int time) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetWakeupTime")]
			public abstract async void set_wakeup_time (int time) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Alarm")]
			public signal void alarm (int time);
			[DBus (name = "WakeupTimeChanged")]
			public signal void wakeup_time_changed (int time);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.RealtimeClock", timeout = 120000)]
		public interface RealtimeClockSync : GLib.Object {
			[DBus (name = "GetCurrentTime")]
			public abstract int get_current_time () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetWakeupTime")]
			public abstract int get_wakeup_time () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCurrentTime")]
			public abstract void set_current_time (int time) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetWakeupTime")]
			public abstract void set_wakeup_time (int time) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Alarm")]
			public signal void alarm (int time);
			[DBus (name = "WakeupTimeChanged")]
			public signal void wakeup_time_changed (int time);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Vibrator", timeout = 120000)]
		public interface Vibrator : GLib.Object {
			[DBus (name = "Stop")]
			public abstract async void stop () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Vibrate")]
			public abstract async void vibrate (int duration_ms, int strength_percentage) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "VibratePattern")]
			public abstract async void vibrate_pattern (int pulses, int on_duration_ms, int off_duration_ms, int strength_percentage) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Vibrator", timeout = 120000)]
		public interface VibratorSync : GLib.Object {
			[DBus (name = "Stop")]
			public abstract void stop () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Vibrate")]
			public abstract void vibrate (int duration_ms, int strength_percentage) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "VibratePattern")]
			public abstract void vibrate_pattern (int pulses, int on_duration_ms, int off_duration_ms, int strength_percentage) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum IdleState {
			[DBus (value = "busy")]
			BUSY,
			[DBus (value = "idle")]
			IDLE,
			[DBus (value = "idle_dim")]
			IDLE_DIM,
			[DBus (value = "idle_prelock")]
			IDLE_PRELOCK,
			[DBus (value = "lock")]
			LOCK,
			[DBus (value = "suspend")]
			SUSPEND,
			[DBus (value = "awake")]
			AWAKE
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum InputState {
			[DBus (value = "pressed")]
			PRESSED,
			[DBus (value = "held")]
			HELD,
			[DBus (value = "released")]
			RELEASED
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum PowerStatus {
			[DBus (value = "charging")]
			CHARGING,
			[DBus (value = "discharging")]
			DISCHARGING,
			[DBus (value = "full")]
			FULL,
			[DBus (value = "empty")]
			EMPTY,
			[DBus (value = "critical")]
			CRITICAL,
			[DBus (value = "critical")]
			REMOVED,
			[DBus (value = "unknown")]
			UNKNOWN,
			[DBus (value = "online")]
			ONLINE,
			[DBus (value = "offline")]
			OFFLINE,
			[DBus (value = "ac")]
			AC
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum SoundState {
			[DBus (value = "playing")]
			PLAYING,
			[DBus (value = "stopped")]
			STOPPED
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Device.Audio")]
		public errordomain AudioError {
			[DBus (name = "UnknownFormat")]
			UNKNOWN_FORMAT,
			[DBus (name = "PlayerError")]
			PLAYER_ERROR,
			[DBus (name = "NotPlaying")]
			NOT_PLAYING,
			[DBus (name = "AlreadyPlaying")]
			ALREADY_PLAYING,
			[DBus (name = "ScenarioInvalid")]
			SCENARIO_INVALID,
			[DBus (name = "ScenarioStackUnderflow")]
			SCENARIO_STACK_UNDERFLOW,
			[DBus (name = "DeviceFailed")]
			DEVICE_FAILED
		}
	}
	namespace GSM {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.CB", timeout = 120000)]
		public interface CB : GLib.Object {
			[DBus (name = "GetCellBroadcastSubscriptions")]
			public abstract async string get_cell_broadcast_subscriptions () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCellBroadcastSubscriptions")]
			public abstract async void set_cell_broadcast_subscriptions (string channels) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingCellBroadcast")]
			public signal void incoming_cell_broadcast (string text, string language, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.CB", timeout = 120000)]
		public interface CBSync : GLib.Object {
			[DBus (name = "GetCellBroadcastSubscriptions")]
			public abstract string get_cell_broadcast_subscriptions () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCellBroadcastSubscriptions")]
			public abstract void set_cell_broadcast_subscriptions (string channels) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingCellBroadcast")]
			public signal void incoming_cell_broadcast (string text, string language, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Call", timeout = 120000)]
		public interface Call : GLib.Object {
			[DBus (name = "Activate")]
			public abstract async void activate (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ActivateConference")]
			public abstract async void activate_conference (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Emergency")]
			public abstract async void emergency (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "HoldActive")]
			public abstract async void hold_active () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Initiate")]
			public abstract async int initiate (string number, string type) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Join")]
			public abstract async void join () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ListCalls")]
			public abstract async FreeSmartphone.GSM.CallDetail[] list_calls () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Release")]
			public abstract async void release (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseAll")]
			public abstract async void release_all () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseHeld")]
			public abstract async void release_held () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendDtmf")]
			public abstract async void send_dtmf (string tones) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Transfer")]
			public abstract async void transfer (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "CallStatus")]
			public signal void call_status (int id, FreeSmartphone.GSM.CallStatus status, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Call", timeout = 120000)]
		public interface CallSync : GLib.Object {
			[DBus (name = "Activate")]
			public abstract void activate (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ActivateConference")]
			public abstract void activate_conference (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Emergency")]
			public abstract void emergency (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "HoldActive")]
			public abstract void hold_active () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Initiate")]
			public abstract int initiate (string number, string type) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Join")]
			public abstract void join () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ListCalls")]
			public abstract FreeSmartphone.GSM.CallDetail[] list_calls () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Release")]
			public abstract void release (int id) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseAll")]
			public abstract void release_all () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseHeld")]
			public abstract void release_held () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendDtmf")]
			public abstract void send_dtmf (string tones) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Transfer")]
			public abstract void transfer (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "CallStatus")]
			public signal void call_status (int id, FreeSmartphone.GSM.CallStatus status, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Debug", timeout = 120000)]
		public interface Debug : GLib.Object {
			[DBus (name = "DebugCommand")]
			public abstract async string debug_command (string command, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DebugInjectResponse")]
			public abstract async void debug_inject_response (string response, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DebugPing")]
			public abstract async void debug_ping () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DebugStatus")]
			public signal void debug_status (GLib.HashTable<string,string> channels);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Debug", timeout = 120000)]
		public interface DebugSync : GLib.Object {
			[DBus (name = "DebugCommand")]
			public abstract string debug_command (string command, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DebugInjectResponse")]
			public abstract void debug_inject_response (string response, string channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DebugPing")]
			public abstract void debug_ping () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DebugStatus")]
			public signal void debug_status (GLib.HashTable<string,string> channels);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Device", timeout = 120000)]
		public interface Device : GLib.Object {
			[DBus (name = "GetDeviceStatus")]
			public abstract async FreeSmartphone.GSM.DeviceStatus get_device_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetFeatures")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_features () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetFunctionality")]
			public abstract async void get_functionality (out string level, out bool autoregister, out string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMicrophoneMuted")]
			public abstract async bool get_microphone_muted () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSpeakerVolume")]
			public abstract async int get_speaker_volume () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetFunctionality")]
			public abstract async void set_functionality (string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetMicrophoneMuted")]
			public abstract async void set_microphone_muted (bool muted) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetSpeakerVolume")]
			public abstract async void set_speaker_volume (int volume) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeviceStatus")]
			public signal void device_status (FreeSmartphone.GSM.DeviceStatus status);
			[DBus (name = "KeypadEvent")]
			public signal void keypad_event (string name, bool pressed);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Device", timeout = 120000)]
		public interface DeviceSync : GLib.Object {
			[DBus (name = "GetDeviceStatus")]
			public abstract FreeSmartphone.GSM.DeviceStatus get_device_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetFeatures")]
			public abstract GLib.HashTable<string,GLib.Variant> get_features () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetFunctionality")]
			public abstract void get_functionality (out string level, out bool autoregister, out string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMicrophoneMuted")]
			public abstract bool get_microphone_muted () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSpeakerVolume")]
			public abstract int get_speaker_volume () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetFunctionality")]
			public abstract void set_functionality (string level, bool autoregister, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetMicrophoneMuted")]
			public abstract void set_microphone_muted (bool muted) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetSpeakerVolume")]
			public abstract void set_speaker_volume (int volume) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeviceStatus")]
			public signal void device_status (FreeSmartphone.GSM.DeviceStatus status);
			[DBus (name = "KeypadEvent")]
			public signal void keypad_event (string name, bool pressed);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Error0", timeout = 120000)]
		public interface Error0 : GLib.Object {
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Error0", timeout = 120000)]
		public interface Error0Sync : GLib.Object {
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.HZ", timeout = 120000)]
		public interface HZ : GLib.Object {
			[DBus (name = "GetHomeZoneStatus")]
			public abstract async string get_home_zone_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetKnownHomeZones")]
			public abstract async string[] get_known_home_zones () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "HomeZoneStatus")]
			public signal void home_zone_status (string name);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.HZ", timeout = 120000)]
		public interface HZSync : GLib.Object {
			[DBus (name = "GetHomeZoneStatus")]
			public abstract string get_home_zone_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetKnownHomeZones")]
			public abstract string[] get_known_home_zones () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "HomeZoneStatus")]
			public signal void home_zone_status (string name);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.MUX", timeout = 120000)]
		public interface MUX : GLib.Object {
			[DBus (name = "AllocChannel")]
			public abstract async void alloc_channel (string origin, int channel, out string path, out int allocated_channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "CloseSession")]
			public abstract async void close_session () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "OpenSession")]
			public abstract async void open_session (bool advanced, int framesize, string portname, int portspeed) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseChannel")]
			public abstract async void release_channel (string origin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetStatus")]
			public abstract async void set_status (int channel, string status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Status")]
			public signal void status (string status);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.MUX", timeout = 120000)]
		public interface MUXSync : GLib.Object {
			[DBus (name = "AllocChannel")]
			public abstract void alloc_channel (string origin, int channel, out string path, out int allocated_channel) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "CloseSession")]
			public abstract void close_session () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "OpenSession")]
			public abstract void open_session (bool advanced, int framesize, string portname, int portspeed) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ReleaseChannel")]
			public abstract void release_channel (string origin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetStatus")]
			public abstract void set_status (int channel, string status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Status")]
			public signal void status (string status);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Monitor", timeout = 120000)]
		public interface Monitor : GLib.Object {
			[DBus (name = "GetNeighbourCellInformation")]
			public abstract async GLib.HashTable<string,GLib.Variant>[] get_neighbour_cell_information () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetServingCellInformation")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_serving_cell_information () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Monitor", timeout = 120000)]
		public interface MonitorSync : GLib.Object {
			[DBus (name = "GetNeighbourCellInformation")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_neighbour_cell_information () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetServingCellInformation")]
			public abstract GLib.HashTable<string,GLib.Variant> get_serving_cell_information () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Network", timeout = 120000)]
		public interface Network : GLib.Object {
			[DBus (name = "DisableCallForwarding")]
			public abstract async void disable_call_forwarding (string reason, string call_class) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "EnableCallForwarding")]
			public abstract async void enable_call_forwarding (string reason, string call_class, string number, int timeout) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCallForwarding")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_call_forwarding (string reason) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCallingIdentification")]
			public abstract async FreeSmartphone.GSM.CallingIdentificationStatus get_calling_identification () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSignalStrength")]
			public abstract async int get_signal_strength () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetStatus")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTimeReport")]
			public abstract async void get_time_report (out int time, out int timestamp, out int zone, out int zonestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ListProviders")]
			public abstract async FreeSmartphone.GSM.NetworkProvider[] list_providers () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Register")]
			public abstract async void register_ () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RegisterWithProvider")]
			public abstract async void register_with_provider (string operator_code) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendUssdRequest")]
			public abstract async void send_ussd_request (string request) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCallingIdentification")]
			public abstract async void set_calling_identification (FreeSmartphone.GSM.CallingIdentificationStatus status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Unregister")]
			public abstract async void unregister () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "CipherStatus")]
			public signal void cipher_status (FreeSmartphone.GSM.CipherStatus telephony, FreeSmartphone.GSM.CipherStatus pdp);
			[DBus (name = "IncomingUssd")]
			public signal void incoming_ussd (FreeSmartphone.GSM.UssdStatus mode, string message_);
			[DBus (name = "SignalStrength")]
			public signal void signal_strength (int signal_strength);
			[DBus (name = "Status")]
			public signal void status (GLib.HashTable<string,GLib.Variant> status);
			[DBus (name = "TimeReport")]
			public signal void time_report (int time, int zone);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.Network", timeout = 120000)]
		public interface NetworkSync : GLib.Object {
			[DBus (name = "DisableCallForwarding")]
			public abstract void disable_call_forwarding (string reason, string call_class) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "EnableCallForwarding")]
			public abstract void enable_call_forwarding (string reason, string call_class, string number, int timeout) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCallForwarding")]
			public abstract GLib.HashTable<string,GLib.Variant> get_call_forwarding (string reason) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCallingIdentification")]
			public abstract FreeSmartphone.GSM.CallingIdentificationStatus get_calling_identification () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSignalStrength")]
			public abstract int get_signal_strength () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetStatus")]
			public abstract GLib.HashTable<string,GLib.Variant> get_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTimeReport")]
			public abstract void get_time_report (out int time, out int timestamp, out int zone, out int zonestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ListProviders")]
			public abstract FreeSmartphone.GSM.NetworkProvider[] list_providers () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Register")]
			public abstract void register_ () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RegisterWithProvider")]
			public abstract void register_with_provider (string operator_code) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendUssdRequest")]
			public abstract void send_ussd_request (string request) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCallingIdentification")]
			public abstract void set_calling_identification (FreeSmartphone.GSM.CallingIdentificationStatus status) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Unregister")]
			public abstract void unregister () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "CipherStatus")]
			public signal void cipher_status (FreeSmartphone.GSM.CipherStatus telephony, FreeSmartphone.GSM.CipherStatus pdp);
			[DBus (name = "IncomingUssd")]
			public signal void incoming_ussd (FreeSmartphone.GSM.UssdStatus mode, string message_);
			[DBus (name = "SignalStrength")]
			public signal void signal_strength (int signal_strength);
			[DBus (name = "Status")]
			public signal void status (GLib.HashTable<string,GLib.Variant> status);
			[DBus (name = "TimeReport")]
			public signal void time_report (int time, int zone);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.PDP", timeout = 120000)]
		public interface PDP : GLib.Object {
			[DBus (name = "ActivateContext")]
			public abstract async void activate_context () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeactivateContext")]
			public abstract async void deactivate_context () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContextStatus")]
			public abstract async void get_context_status (out FreeSmartphone.GSM.ContextStatus status, out GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCredentials")]
			public abstract async void get_credentials (out string apn, out string username, out string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetRoamingAllowed")]
			public abstract async bool get_roaming_allowed () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "InternalStatusUpdate")]
			public abstract async void internal_status_update (string status, GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCredentials")]
			public abstract async void set_credentials (string apn, string username, string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetRoamingAllowed")]
			public abstract async void set_roaming_allowed (bool state) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ContextStatus")]
			public signal void context_status (FreeSmartphone.GSM.ContextStatus status, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.PDP", timeout = 120000)]
		public interface PDPSync : GLib.Object {
			[DBus (name = "ActivateContext")]
			public abstract void activate_context () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeactivateContext")]
			public abstract void deactivate_context () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContextStatus")]
			public abstract void get_context_status (out FreeSmartphone.GSM.ContextStatus status, out GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCredentials")]
			public abstract void get_credentials (out string apn, out string username, out string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetRoamingAllowed")]
			public abstract bool get_roaming_allowed () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "InternalStatusUpdate")]
			public abstract void internal_status_update (string status, GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetCredentials")]
			public abstract void set_credentials (string apn, string username, string password) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetRoamingAllowed")]
			public abstract void set_roaming_allowed (bool state) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ContextStatus")]
			public signal void context_status (FreeSmartphone.GSM.ContextStatus status, GLib.HashTable<string,GLib.Variant> properties);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.SIM", timeout = 120000)]
		public interface SIM : GLib.Object {
			[DBus (name = "ChangeAuthCode")]
			public abstract async void change_auth_code (string old_pin, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeleteEntry")]
			public abstract async void delete_entry (string category, int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeleteMessage")]
			public abstract async void delete_message (int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetAuthCodeRequired")]
			public abstract async bool get_auth_code_required () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetAuthStatus")]
			public abstract async FreeSmartphone.GSM.SIMAuthStatus get_auth_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetHomeZoneParameters")]
			public abstract async FreeSmartphone.GSM.SIMHomeZone[] get_home_zone_parameters () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetPhonebookInfo")]
			public abstract async void get_phonebook_info (string category, out int slots, out int numberlength, out int namelength) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetServiceCenterNumber")]
			public abstract async string get_service_center_number () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSimInfo")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_sim_info () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUnlockCounters")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_unlock_counters () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RetrieveMessage")]
			public abstract async void retrieve_message (int index, out string status, out string sender_number, out string contents, out GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RetrievePhonebook")]
			public abstract async FreeSmartphone.GSM.SIMEntry[] retrieve_phonebook (string category, int mindex, int maxdex) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendAuthCode")]
			public abstract async void send_auth_code (string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendGenericSimCommand")]
			public abstract async string send_generic_sim_command (string command) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendRestrictedSimCommand")]
			public abstract async string send_restricted_sim_command (int command, int fileid, int p1, int p2, int p3, string data) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendStoredMessage")]
			public abstract async void send_stored_message (int index, out int transaction_index, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetAuthCodeRequired")]
			public abstract async void set_auth_code_required (bool check, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetServiceCenterNumber")]
			public abstract async void set_service_center_number (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StoreEntry")]
			public abstract async void store_entry (string category, int index, string name, string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StoreMessage")]
			public abstract async int store_message (string recipient_number, string contents, GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Unlock")]
			public abstract async void unlock (string puk, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "AuthStatus")]
			public signal void auth_status (FreeSmartphone.GSM.SIMAuthStatus status);
			[DBus (name = "IncomingMessage")]
			public signal void incoming_message (int index);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.SIM", timeout = 120000)]
		public interface SIMSync : GLib.Object {
			[DBus (name = "ChangeAuthCode")]
			public abstract void change_auth_code (string old_pin, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeleteEntry")]
			public abstract void delete_entry (string category, int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "DeleteMessage")]
			public abstract void delete_message (int index) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetAuthCodeRequired")]
			public abstract bool get_auth_code_required () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetAuthStatus")]
			public abstract FreeSmartphone.GSM.SIMAuthStatus get_auth_status () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetHomeZoneParameters")]
			public abstract FreeSmartphone.GSM.SIMHomeZone[] get_home_zone_parameters () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetPhonebookInfo")]
			public abstract void get_phonebook_info (string category, out int slots, out int numberlength, out int namelength) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetServiceCenterNumber")]
			public abstract string get_service_center_number () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSimInfo")]
			public abstract GLib.HashTable<string,GLib.Variant> get_sim_info () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUnlockCounters")]
			public abstract GLib.HashTable<string,GLib.Variant> get_unlock_counters () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RetrieveMessage")]
			public abstract void retrieve_message (int index, out string status, out string sender_number, out string contents, out GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RetrievePhonebook")]
			public abstract FreeSmartphone.GSM.SIMEntry[] retrieve_phonebook (string category, int mindex, int maxdex) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendAuthCode")]
			public abstract void send_auth_code (string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendGenericSimCommand")]
			public abstract string send_generic_sim_command (string command) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendRestrictedSimCommand")]
			public abstract string send_restricted_sim_command (int command, int fileid, int p1, int p2, int p3, string data) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendStoredMessage")]
			public abstract void send_stored_message (int index, out int transaction_index, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetAuthCodeRequired")]
			public abstract void set_auth_code_required (bool check, string pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetServiceCenterNumber")]
			public abstract void set_service_center_number (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StoreEntry")]
			public abstract void store_entry (string category, int index, string name, string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "StoreMessage")]
			public abstract int store_message (string recipient_number, string contents, GLib.HashTable<string,GLib.Variant> properties) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "Unlock")]
			public abstract void unlock (string puk, string new_pin) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "AuthStatus")]
			public signal void auth_status (FreeSmartphone.GSM.SIMAuthStatus status);
			[DBus (name = "IncomingMessage")]
			public signal void incoming_message (int index);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.SMS", timeout = 120000)]
		public interface SMS : GLib.Object {
			[DBus (name = "GetSizeForTextMessage")]
			public abstract async uint get_size_for_text_message (string contents) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RetrieveTextMessages")]
			public abstract async FreeSmartphone.GSM.SIMMessage[] retrieve_text_messages () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendTextMessage")]
			public abstract async void send_text_message (string recipient_number, string contents, bool report, out int reference, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingMessageReport")]
			public signal void incoming_message_report (int reference, string status, string sender_number, string contents);
			[DBus (name = "IncomingTextMessage")]
			public signal void incoming_text_message (string number, string timestamp, string contents);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.SMS", timeout = 120000)]
		public interface SMSSync : GLib.Object {
			[DBus (name = "GetSizeForTextMessage")]
			public abstract uint get_size_for_text_message (string contents) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "RetrieveTextMessages")]
			public abstract FreeSmartphone.GSM.SIMMessage[] retrieve_text_messages () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SendTextMessage")]
			public abstract void send_text_message (string recipient_number, string contents, bool report, out int reference, out string timestamp) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingMessageReport")]
			public signal void incoming_message_report (int reference, string status, string sender_number, string contents);
			[DBus (name = "IncomingTextMessage")]
			public signal void incoming_text_message (string number, string timestamp, string contents);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.VoiceMail", timeout = 120000)]
		public interface VoiceMail : GLib.Object {
			[DBus (name = "GetStoredVoiceMails")]
			public abstract async string[] get_stored_voice_mails () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetVoiceMailboxNumber")]
			public abstract async string get_voice_mailbox_number () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetVoiceMailboxNumber")]
			public abstract async void set_voice_mailbox_number (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingVoiceMail")]
			public signal void incoming_voice_mail (int index);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM.VoiceMail", timeout = 120000)]
		public interface VoiceMailSync : GLib.Object {
			[DBus (name = "GetStoredVoiceMails")]
			public abstract string[] get_stored_voice_mails () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "GetVoiceMailboxNumber")]
			public abstract string get_voice_mailbox_number () throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "SetVoiceMailboxNumber")]
			public abstract void set_voice_mailbox_number (string number) throws FreeSmartphone.GSM.Error, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingVoiceMail")]
			public signal void incoming_voice_mail (int index);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct CallDetail {
			public int id;
			public FreeSmartphone.GSM.CallStatus status;
			public GLib.HashTable<string,GLib.Variant> properties;
			public CallDetail (int id, FreeSmartphone.GSM.CallStatus status, GLib.HashTable<string,GLib.Variant> properties);
			public static FreeSmartphone.GSM.CallDetail from_variant (GLib.Variant v);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct NetworkProvider {
			public string status;
			public string shortname;
			public string longname;
			public string mccmnc;
			public string act;
			public NetworkProvider (string status, string shortname, string longname, string mccmnc, string act);
			public static FreeSmartphone.GSM.NetworkProvider from_variant (GLib.Variant v);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct SIMEntry {
			public int index;
			public string name;
			public string number;
			public SIMEntry (int index, string name, string number);
			public static FreeSmartphone.GSM.SIMEntry from_variant (GLib.Variant v);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct SIMHomeZone {
			public string name;
			public int x;
			public int y;
			public int radius;
			public SIMHomeZone (string name, int x, int y, int radius);
			public static FreeSmartphone.GSM.SIMHomeZone from_variant (GLib.Variant v);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct SIMMessage {
			public int index;
			public string status;
			public string number;
			public string timestamp;
			public string contents;
			public GLib.HashTable<string,GLib.Variant> properties;
			public SIMMessage (int index, string status, string number, string timestamp, string contents, GLib.HashTable<string,GLib.Variant> properties);
			public static FreeSmartphone.GSM.SIMMessage from_variant (GLib.Variant v);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum CallStatus {
			[DBus (value = "INCOMING")]
			INCOMING,
			[DBus (value = "OUTGOING")]
			OUTGOING,
			[DBus (value = "ACTIVE")]
			ACTIVE,
			[DBus (value = "HELD")]
			HELD,
			[DBus (value = "RELEASE")]
			RELEASE
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum CallingIdentificationStatus {
			[DBus (value = "network")]
			NETWORK,
			[DBus (value = "off")]
			OFF,
			[DBus (value = "on")]
			ON
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum CipherStatus {
			[DBus (value = "disabled")]
			DISABLED,
			[DBus (value = "enabled")]
			ENABLED,
			[DBus (value = "unknown")]
			UNKNOWN
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum ContextStatus {
			[DBus (value = "unknown")]
			UNKNOWN,
			[DBus (value = "incoming")]
			INCOMING,
			[DBus (value = "outgoing")]
			OUTGOING,
			[DBus (value = "active")]
			ACTIVE,
			[DBus (value = "released")]
			RELEASED,
			[DBus (value = "shutdown")]
			SHUTDOWN,
			[DBus (value = "suspended")]
			SUSPENDED
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum DeviceStatus {
			[DBus (value = "unknown")]
			UNKNOWN,
			[DBus (value = "closed")]
			CLOSED,
			[DBus (value = "initializing")]
			INITIALIZING,
			[DBus (value = "alive-no-sim")]
			ALIVE_NO_SIM,
			[DBus (value = "alive-sim-locked")]
			ALIVE_SIM_LOCKED,
			[DBus (value = "alive-sim-unlocked")]
			ALIVE_SIM_UNLOCKED,
			[DBus (value = "alive-sim-ready")]
			ALIVE_SIM_READY,
			[DBus (value = "alive-registered")]
			ALIVE_REGISTERED,
			[DBus (value = "suspending")]
			SUSPENDING,
			[DBus (value = "suspended")]
			SUSPENDED,
			[DBus (value = "resuming")]
			RESUMING,
			[DBus (value = "closing")]
			CLOSING
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum SIMAuthStatus {
			[DBus (value = "UNKNOWN")]
			UNKNOWN,
			[DBus (value = "READY")]
			READY,
			[DBus (value = "SIM PIN")]
			PIN_REQUIRED,
			[DBus (value = "SIM PUK")]
			PUK_REQUIRED,
			[DBus (value = "SIM PIN2")]
			PIN2_REQUIRED,
			[DBus (value = "SIM PUK2")]
			PUK2_REQUIRED
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (use_string_marshalling = true)]
		public enum UssdStatus {
			[DBus (value = "completed")]
			COMPLETED,
			[DBus (value = "useraction")]
			USERACTION,
			[DBus (value = "terminated")]
			TERMINATED,
			[DBus (value = "localclient")]
			LOCALCLIENT,
			[DBus (value = "unsupported")]
			UNSUPPORTED,
			[DBus (value = "timeout")]
			TIMEOUT
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.GSM")]
		public errordomain Error {
			[DBus (name = "DeviceNotPresent")]
			DEVICE_NOT_PRESENT,
			[DBus (name = "DeviceTimeout")]
			DEVICE_TIMEOUT,
			[DBus (name = "DeviceFailed")]
			DEVICE_FAILED,
			[DBus (name = "AuthorizationRequired")]
			AUTHORIZATION_REQUIRED,
			[DBus (name = "SimNotPresent")]
			SIM_NOT_PRESENT,
			[DBus (name = "SimAuthFailed")]
			SIM_AUTH_FAILED,
			[DBus (name = "SimBlocked")]
			SIM_BLOCKED,
			[DBus (name = "SimNotFound")]
			SIM_NOT_FOUND,
			[DBus (name = "SimMemoryFull")]
			SIM_MEMORY_FULL,
			[DBus (name = "SimInvalidIndex")]
			SIM_INVALID_INDEX,
			[DBus (name = "CallNotFound")]
			CALL_NOT_FOUND,
			[DBus (name = "MuxChannelTaken")]
			MUX_CHANNEL_TAKEN,
			[DBus (name = "MuxNoChannel")]
			MUX_NO_CHANNEL,
			[DBus (name = "MuxNoSession")]
			MUX_NO_SESSION,
			[DBus (name = "MuxSessionAlreadyOpen")]
			MUX_SESSION_ALREADY_OPEN,
			[DBus (name = "MuxSessionOpenError")]
			MUX_SESSION_OPEN_ERROR,
			[DBus (name = "NetworkNotPresent")]
			NETWORK_NOT_PRESENT,
			[DBus (name = "NetworkUnauthorized")]
			NETWORK_UNAUTHORIZED,
			[DBus (name = "NetworkNotSupported")]
			NETWORK_NOT_SUPPORTED,
			[DBus (name = "NetworkNotFound")]
			NETWORK_NOT_FOUND,
			[DBus (name = "ContextNotFound")]
			CONTEXT_NOT_FOUND
		}
	}
	namespace PIM {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Call", timeout = 120000)]
		public interface Call : GLib.Object {
			[DBus (name = "Delete")]
			public abstract async void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract async void update (GLib.HashTable<string,GLib.Variant> call_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "CallDeleted")]
			public signal void call_deleted ();
			[DBus (name = "CallUpdated")]
			public signal void call_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.CallQuery", timeout = 120000)]
		public interface CallQuery : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract async void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCallPath")]
			public abstract async string get_call_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract async void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract async void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "CallAdded")]
			public signal void call_added (string call_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.CallQuery", timeout = 120000)]
		public interface CallQuerySync : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetCallPath")]
			public abstract string get_call_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "CallAdded")]
			public signal void call_added (string call_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Call", timeout = 120000)]
		public interface CallSync : GLib.Object {
			[DBus (name = "Delete")]
			public abstract void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract void update (GLib.HashTable<string,GLib.Variant> call_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "CallDeleted")]
			public signal void call_deleted ();
			[DBus (name = "CallUpdated")]
			public signal void call_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Calls", timeout = 120000)]
		public interface Calls : GLib.Object {
			[DBus (name = "Add")]
			public abstract async string add (GLib.HashTable<string,GLib.Variant> call_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetNewMissedCalls")]
			public abstract async int get_new_missed_calls () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract async string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingCall")]
			public signal void incoming_call (string call_path);
			[DBus (name = "NewCall")]
			public signal void new_call (string call_path);
			[DBus (name = "NewMissedCalls")]
			public signal void new_missed_calls (int amount);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Calls", timeout = 120000)]
		public interface CallsSync : GLib.Object {
			[DBus (name = "Add")]
			public abstract string add (GLib.HashTable<string,GLib.Variant> call_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetNewMissedCalls")]
			public abstract int get_new_missed_calls () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "IncomingCall")]
			public signal void incoming_call (string call_path);
			[DBus (name = "NewCall")]
			public signal void new_call (string call_path);
			[DBus (name = "NewMissedCalls")]
			public signal void new_missed_calls (int amount);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Contact", timeout = 120000)]
		public interface Contact : GLib.Object {
			[DBus (name = "Delete")]
			public abstract async void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract async void update (GLib.HashTable<string,GLib.Variant> contact_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ContactDeleted")]
			public signal void contact_deleted ();
			[DBus (name = "ContactUpdated")]
			public signal void contact_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.ContactQuery", timeout = 120000)]
		public interface ContactQuery : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract async void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContactPath")]
			public abstract async string get_contact_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract async void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract async void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ContactAdded")]
			public signal void contact_added (string contact_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.ContactQuery", timeout = 120000)]
		public interface ContactQuerySync : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContactPath")]
			public abstract string get_contact_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ContactAdded")]
			public signal void contact_added (string contact_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Contact", timeout = 120000)]
		public interface ContactSync : GLib.Object {
			[DBus (name = "Delete")]
			public abstract void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract void update (GLib.HashTable<string,GLib.Variant> contact_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ContactDeleted")]
			public signal void contact_deleted ();
			[DBus (name = "ContactUpdated")]
			public signal void contact_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Contacts", timeout = 120000)]
		public interface Contacts : GLib.Object {
			[DBus (name = "Add")]
			public abstract async string add (GLib.HashTable<string,GLib.Variant> contact_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract async string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DeletedContact")]
			public signal void deleted_contact (string contact_path);
			[DBus (name = "NewContact")]
			public signal void new_contact (string contact_path);
			[DBus (name = "UpdatedContact")]
			public signal void updated_contact (string contact_path, GLib.HashTable<string,GLib.Variant> contact_data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Contacts", timeout = 120000)]
		public interface ContactsSync : GLib.Object {
			[DBus (name = "Add")]
			public abstract string add (GLib.HashTable<string,GLib.Variant> contact_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DeletedContact")]
			public signal void deleted_contact (string contact_path);
			[DBus (name = "NewContact")]
			public signal void new_contact (string contact_path);
			[DBus (name = "UpdatedContact")]
			public signal void updated_contact (string contact_path, GLib.HashTable<string,GLib.Variant> contact_data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Date", timeout = 120000)]
		public interface Date : GLib.Object {
			[DBus (name = "Delete")]
			public abstract async void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract async void update (GLib.HashTable<string,GLib.Variant> date_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DateDeleted")]
			public signal void date_deleted ();
			[DBus (name = "DateUpdated")]
			public signal void date_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.DateQuery", timeout = 120000)]
		public interface DateQuery : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract async void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetDatePath")]
			public abstract async string get_date_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract async void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract async void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DateAdded")]
			public signal void date_added (string date_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.DateQuery", timeout = 120000)]
		public interface DateQuerySync : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetDatePath")]
			public abstract string get_date_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DateAdded")]
			public signal void date_added (string date_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Date", timeout = 120000)]
		public interface DateSync : GLib.Object {
			[DBus (name = "Delete")]
			public abstract void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract void update (GLib.HashTable<string,GLib.Variant> date_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DateDeleted")]
			public signal void date_deleted ();
			[DBus (name = "DateUpdated")]
			public signal void date_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Dates", timeout = 120000)]
		public interface Dates : GLib.Object {
			[DBus (name = "Add")]
			public abstract async string add (GLib.HashTable<string,GLib.Variant> date_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract async string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NewDate")]
			public signal void new_date (string date_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Dates", timeout = 120000)]
		public interface DatesSync : GLib.Object {
			[DBus (name = "Add")]
			public abstract string add (GLib.HashTable<string,GLib.Variant> date_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NewDate")]
			public signal void new_date (string date_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Fields", timeout = 120000)]
		public interface Fields : GLib.Object {
			[DBus (name = "AddField")]
			public abstract async void add_field (string name, string type) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DeleteField")]
			public abstract async void delete_field (string name) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetType")]
			public abstract async string get_type_ (string name) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ListFields")]
			public abstract async GLib.HashTable<string,string> list_fields () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ListFieldsWithType")]
			public abstract async string[] list_fields_with_type (string type) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Fields", timeout = 120000)]
		public interface FieldsSync : GLib.Object {
			[DBus (name = "AddField")]
			public abstract void add_field (string name, string type) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DeleteField")]
			public abstract void delete_field (string name) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetType")]
			public abstract string get_type_ (string name) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ListFields")]
			public abstract GLib.HashTable<string,string> list_fields () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ListFieldsWithType")]
			public abstract string[] list_fields_with_type (string type) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Message", timeout = 120000)]
		public interface Message : GLib.Object {
			[DBus (name = "Delete")]
			public abstract async void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MoveToFolder")]
			public abstract async void move_to_folder (string folder_name) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract async void update (GLib.HashTable<string,GLib.Variant> message_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MessageDeleted")]
			public signal void message_deleted ();
			[DBus (name = "MessageUpdated")]
			public signal void message_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.MessageFolder", timeout = 120000)]
		public interface MessageFolder : GLib.Object {
			[DBus (name = "GetMessageCount")]
			public abstract async int get_message_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMessagePaths")]
			public abstract async string[] get_message_paths (int first, int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MessageMoved")]
			public signal void message_moved (string message_path, string new_folder);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.MessageFolder", timeout = 120000)]
		public interface MessageFolderSync : GLib.Object {
			[DBus (name = "GetMessageCount")]
			public abstract int get_message_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMessagePaths")]
			public abstract string[] get_message_paths (int first, int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MessageMoved")]
			public signal void message_moved (string message_path, string new_folder);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.MessageQuery", timeout = 120000)]
		public interface MessageQuery : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract async void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMessagePath")]
			public abstract async string get_message_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract async void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract async void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MessageAdded")]
			public signal void message_added (string message_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.MessageQuery", timeout = 120000)]
		public interface MessageQuerySync : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMessagePath")]
			public abstract string get_message_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MessageAdded")]
			public signal void message_added (string message_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Message", timeout = 120000)]
		public interface MessageSync : GLib.Object {
			[DBus (name = "Delete")]
			public abstract void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MoveToFolder")]
			public abstract void move_to_folder (string folder_name) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract void update (GLib.HashTable<string,GLib.Variant> message_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "MessageDeleted")]
			public signal void message_deleted ();
			[DBus (name = "MessageUpdated")]
			public signal void message_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Messages", timeout = 120000)]
		public interface Messages : GLib.Object {
			[DBus (name = "Add")]
			public abstract async string add (GLib.HashTable<string,GLib.Variant> message_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "AddIncoming")]
			public abstract async string add_incoming (GLib.HashTable<string,GLib.Variant> message_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUnreadMessages")]
			public abstract async int get_unread_messages () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract async string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "QueryThreads")]
			public abstract async string query_threads (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DeletedMessage")]
			public signal void deleted_message (string message_path);
			[DBus (name = "IncomingMessage")]
			public signal void incoming_message (string message_path);
			[DBus (name = "NewMessage")]
			public signal void new_message (string message_path);
			[DBus (name = "UnreadMessages")]
			public signal void unread_messages (int amount);
			[DBus (name = "UpdatedMessage")]
			public signal void updated_message (string message_path, GLib.HashTable<string,GLib.Variant> message_data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Messages", timeout = 120000)]
		public interface MessagesSync : GLib.Object {
			[DBus (name = "Add")]
			public abstract string add (GLib.HashTable<string,GLib.Variant> message_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "AddIncoming")]
			public abstract string add_incoming (GLib.HashTable<string,GLib.Variant> message_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUnreadMessages")]
			public abstract int get_unread_messages () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "QueryThreads")]
			public abstract string query_threads (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "DeletedMessage")]
			public signal void deleted_message (string message_path);
			[DBus (name = "IncomingMessage")]
			public signal void incoming_message (string message_path);
			[DBus (name = "NewMessage")]
			public signal void new_message (string message_path);
			[DBus (name = "UnreadMessages")]
			public signal void unread_messages (int amount);
			[DBus (name = "UpdatedMessage")]
			public signal void updated_message (string message_path, GLib.HashTable<string,GLib.Variant> message_data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Note", timeout = 120000)]
		public interface Note : GLib.Object {
			[DBus (name = "Delete")]
			public abstract async void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract async string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract async void update (GLib.HashTable<string,GLib.Variant> note_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NoteDeleted")]
			public signal void note_deleted ();
			[DBus (name = "NoteUpdated")]
			public signal void note_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.NoteQuery", timeout = 120000)]
		public interface NoteQuery : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract async void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract async GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetNotePath")]
			public abstract async string get_note_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract async void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract async void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NoteAdded")]
			public signal void note_added (string note_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.NoteQuery", timeout = 120000)]
		public interface NoteQuerySync : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetNotePath")]
			public abstract string get_note_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract void skip (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NoteAdded")]
			public signal void note_added (string note_path);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Note", timeout = 120000)]
		public interface NoteSync : GLib.Object {
			[DBus (name = "Delete")]
			public abstract void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract void update (GLib.HashTable<string,GLib.Variant> note_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NoteDeleted")]
			public signal void note_deleted ();
			[DBus (name = "NoteUpdated")]
			public signal void note_updated (GLib.HashTable<string,GLib.Variant> data);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Notes", timeout = 120000)]
		public interface Notes : GLib.Object {
			[DBus (name = "Add")]
			public abstract async string add (GLib.HashTable<string,GLib.Variant> note_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract async string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedTags")]
			public abstract async string[] get_used_tags () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract async string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NewNote")]
			public signal void new_note (string note_path);
			[DBus (name = "NewTag")]
			public signal void new_tag (string tag);
			[DBus (name = "TagRemoved")]
			public signal void tag_removed (string tag);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Notes", timeout = 120000)]
		public interface NotesSync : GLib.Object {
			[DBus (name = "Add")]
			public abstract string add (GLib.HashTable<string,GLib.Variant> note_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleEntrySingleField")]
			public abstract string get_single_entry_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedTags")]
			public abstract string[] get_used_tags () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NewNote")]
			public signal void new_note (string note_path);
			[DBus (name = "NewTag")]
			public signal void new_tag (string tag);
			[DBus (name = "TagRemoved")]
			public signal void tag_removed (string tag);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Task", timeout = 120000)]
		public interface Task : GLib.Object {
			[DBus (name = "Delete")]
			public abstract async void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract async void update (GLib.HashTable<string,GLib.Variant> task_data) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.TaskQuery", timeout = 120000)]
		public interface TaskQuery : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract async void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract async GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract async int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTaskPath")]
			public abstract async string get_task_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract async void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract async void skip (int count) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.TaskQuery", timeout = 120000)]
		public interface TaskQuerySync : GLib.Object {
			[DBus (name = "Dispose")]
			public abstract void dispose_ () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleResults")]
			public abstract GLib.HashTable<string,GLib.Variant>[] get_multiple_results (int count) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResult")]
			public abstract GLib.HashTable<string,GLib.Variant> get_result () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetResultCount")]
			public abstract int get_result_count () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetTaskPath")]
			public abstract string get_task_path () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Rewind")]
			public abstract void rewind () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Skip")]
			public abstract void skip (int count) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Task", timeout = 120000)]
		public interface TaskSync : GLib.Object {
			[DBus (name = "Delete")]
			public abstract void @delete () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetContent")]
			public abstract GLib.HashTable<string,GLib.Variant> get_content () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetMultipleFields")]
			public abstract GLib.HashTable<string,GLib.Variant> get_multiple_fields (string field_list) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetUsedBackends")]
			public abstract string[] get_used_backends () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Update")]
			public abstract void update (GLib.HashTable<string,GLib.Variant> task_data) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Tasks", timeout = 120000)]
		public interface Tasks : GLib.Object {
			[DBus (name = "Add")]
			public abstract async string add (GLib.HashTable<string,GLib.Variant> task_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleTaskSingleField")]
			public abstract async string get_single_task_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract async string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NewTask")]
			public signal void new_task (string task_path);
			[DBus (name = "UnfinishedTasks")]
			public signal void unfinished_tasks (int amount);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Tasks", timeout = 120000)]
		public interface TasksSync : GLib.Object {
			[DBus (name = "Add")]
			public abstract string add (GLib.HashTable<string,GLib.Variant> task_data) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "GetSingleTaskSingleField")]
			public abstract string get_single_task_single_field (GLib.HashTable<string,GLib.Variant> query, string field) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "Query")]
			public abstract string query (GLib.HashTable<string,GLib.Variant> query) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "NewTask")]
			public signal void new_task (string task_path);
			[DBus (name = "UnfinishedTasks")]
			public signal void unfinished_tasks (int amount);
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Types", timeout = 120000)]
		public interface Types : GLib.Object {
			[DBus (name = "List")]
			public abstract async string[] list () throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.PIM.Types", timeout = 120000)]
		public interface TypesSync : GLib.Object {
			[DBus (name = "List")]
			public abstract string[] list () throws GLib.DBusError, GLib.IOError;
		}
	}
	namespace Time {
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Time.Alarm", timeout = 120000)]
		public interface Alarm : GLib.Object {
			[DBus (name = "AddAlarm")]
			public abstract async void add_alarm (string busname, int timestamp) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ClearAlarms")]
			public abstract async void clear_alarms (string busname) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ListAlarms")]
			public abstract async FreeSmartphone.Time.WakeupAlarm[] list_alarms () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "RemoveAlarm")]
			public abstract async void remove_alarm (string busname, int timestamp) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		[DBus (name = "org.freesmartphone.Time.Alarm", timeout = 120000)]
		public interface AlarmSync : GLib.Object {
			[DBus (name = "AddAlarm")]
			public abstract void add_alarm (string busname, int timestamp) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
			[DBus (name = "ClearAlarms")]
			public abstract void clear_alarms (string busname) throws GLib.DBusError, GLib.IOError;
			[DBus (name = "ListAlarms")]
			public abstract FreeSmartphone.Time.WakeupAlarm[] list_alarms () throws GLib.DBusError, GLib.IOError;
			[DBus (name = "RemoveAlarm")]
			public abstract void remove_alarm (string busname, int timestamp) throws GLib.DBusError, GLib.IOError;
		}
		[CCode (cheader_filename = "freesmartphone.h")]
		public struct WakeupAlarm {
			public string busname;
			public int timestamp;
			public WakeupAlarm (string busname, int timestamp);
			public static FreeSmartphone.Time.WakeupAlarm from_variant (GLib.Variant v);
		}
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Error0", timeout = 120000)]
	public interface Error0 : GLib.Object {
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Error0", timeout = 120000)]
	public interface Error0Sync : GLib.Object {
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Events", timeout = 120000)]
	public interface Events : GLib.Object {
		[DBus (name = "AddRule")]
		public abstract async void add_rule (string rule) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "RemoveRule")]
		public abstract async void remove_rule (string name) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "TriggerTest")]
		public abstract async void trigger_test (string name, bool value) throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Events", timeout = 120000)]
	public interface EventsSync : GLib.Object {
		[DBus (name = "AddRule")]
		public abstract void add_rule (string rule) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "RemoveRule")]
		public abstract void remove_rule (string name) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "TriggerTest")]
		public abstract void trigger_test (string name, bool value) throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Info", timeout = 120000)]
	public interface Info : GLib.Object {
		[DBus (name = "GetInfo")]
		public abstract async GLib.HashTable<string,GLib.Variant> get_info () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Info", timeout = 120000)]
	public interface InfoSync : GLib.Object {
		[DBus (name = "GetInfo")]
		public abstract GLib.HashTable<string,GLib.Variant> get_info () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Location", timeout = 120000)]
	public interface Location : GLib.Object {
		[DBus (name = "GetLocation")]
		public abstract async GLib.HashTable<string,GLib.Variant> get_location () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "LocationUpdate")]
		public signal void location_update (GLib.HashTable<string,GLib.Variant> location);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Location", timeout = 120000)]
	public interface LocationSync : GLib.Object {
		[DBus (name = "GetLocation")]
		public abstract GLib.HashTable<string,GLib.Variant> get_location () throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "LocationUpdate")]
		public signal void location_update (GLib.HashTable<string,GLib.Variant> location);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Network", timeout = 120000)]
	public interface Network : GLib.Object {
		[DBus (name = "OfferDefaultRoute")]
		public abstract async void offer_default_route (string technology, string @interface, string ipv4address, string ipv4mask, string ipv4gateway, string dns1, string dns2) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "StartConnectionSharingWithInterface")]
		public abstract async void start_connection_sharing_with_interface (string @interface) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "StopConnectionSharingWithInterface")]
		public abstract async void stop_connection_sharing_with_interface (string @interface) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Network", timeout = 120000)]
	public interface NetworkSync : GLib.Object {
		[DBus (name = "OfferDefaultRoute")]
		public abstract void offer_default_route (string technology, string @interface, string ipv4address, string ipv4mask, string ipv4gateway, string dns1, string dns2) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "StartConnectionSharingWithInterface")]
		public abstract void start_connection_sharing_with_interface (string @interface) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "StopConnectionSharingWithInterface")]
		public abstract void stop_connection_sharing_with_interface (string @interface) throws FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Notification", timeout = 120000)]
	public interface Notification : GLib.Object {
		[DBus (name = "Alarm", no_reply = true)]
		public abstract void alarm () throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Notification", timeout = 120000)]
	public interface NotificationSync : GLib.Object {
		[DBus (name = "Alarm", no_reply = true)]
		public abstract void alarm () throws GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Phone", timeout = 120000)]
	public interface Phone : GLib.Object {
		[DBus (name = "CreateCall")]
		public abstract async GLib.ObjectPath create_call (string number, string protocol, bool force) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "InitProtocols")]
		public abstract async string[] init_protocols () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Incoming")]
		public signal void incoming (GLib.ObjectPath call);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Phone.Call", timeout = 120000)]
	public interface PhoneCall : GLib.Object {
		[DBus (name = "Activate")]
		public abstract async string activate () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetPeer")]
		public abstract async string get_peer () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetStatus")]
		public abstract async string get_status () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Initiate")]
		public abstract async string initiate () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Release")]
		public abstract async string release () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Remove")]
		public abstract async void remove () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Activated")]
		public signal void activated ();
		[DBus (name = "Incoming")]
		public signal void incoming ();
		[DBus (name = "Outgoing")]
		public signal void outgoing ();
		[DBus (name = "Released")]
		public signal void released ();
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Phone.Call", timeout = 120000)]
	public interface PhoneCallSync : GLib.Object {
		[DBus (name = "Activate")]
		public abstract string activate () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetPeer")]
		public abstract string get_peer () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetStatus")]
		public abstract string get_status () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Initiate")]
		public abstract string initiate () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Release")]
		public abstract string release () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Remove")]
		public abstract void remove () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Activated")]
		public signal void activated ();
		[DBus (name = "Incoming")]
		public signal void incoming ();
		[DBus (name = "Outgoing")]
		public signal void outgoing ();
		[DBus (name = "Released")]
		public signal void released ();
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Phone", timeout = 120000)]
	public interface PhoneSync : GLib.Object {
		[DBus (name = "CreateCall")]
		public abstract GLib.ObjectPath create_call (string number, string protocol, bool force) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "InitProtocols")]
		public abstract string[] init_protocols () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Incoming")]
		public signal void incoming (GLib.ObjectPath call);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Preferences", timeout = 120000)]
	public interface Preferences : GLib.Object {
		[DBus (name = "GetProfile")]
		public abstract async string get_profile () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetProfiles")]
		public abstract async string[] get_profiles () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetService")]
		public abstract async GLib.ObjectPath get_service (string name) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetServices")]
		public abstract async string[] get_services () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "SetProfile")]
		public abstract async void set_profile (string profile) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Changed")]
		public signal void changed (string profile);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Preferences.Service", timeout = 120000)]
	public interface PreferencesService : GLib.Object {
		[DBus (name = "GetKeys")]
		public abstract async string[] get_keys () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetType")]
		public abstract async string get_type_ (string key) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetValue")]
		public abstract async GLib.Variant get_value (string key) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "IsProfilable")]
		public abstract async bool is_profilable (string key) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "SetValue")]
		public abstract async void set_value (string key, GLib.Variant value) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Notify")]
		public signal void notify (string key, GLib.Variant value);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Preferences.Service", timeout = 120000)]
	public interface PreferencesServiceSync : GLib.Object {
		[DBus (name = "GetKeys")]
		public abstract string[] get_keys () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetType")]
		public abstract string get_type_ (string key) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetValue")]
		public abstract GLib.Variant get_value (string key) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "IsProfilable")]
		public abstract bool is_profilable (string key) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "SetValue")]
		public abstract void set_value (string key, GLib.Variant value) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Notify")]
		public signal void notify (string key, GLib.Variant value);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Preferences", timeout = 120000)]
	public interface PreferencesSync : GLib.Object {
		[DBus (name = "GetProfile")]
		public abstract string get_profile () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetProfiles")]
		public abstract string[] get_profiles () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetService")]
		public abstract GLib.ObjectPath get_service (string name) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "GetServices")]
		public abstract string[] get_services () throws GLib.DBusError, GLib.IOError;
		[DBus (name = "SetProfile")]
		public abstract void set_profile (string profile) throws GLib.DBusError, GLib.IOError;
		[DBus (name = "Changed")]
		public signal void changed (string profile);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Resource", timeout = 120000)]
	public interface Resource : GLib.Object {
		[DBus (name = "Disable")]
		public abstract async void disable () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "Enable")]
		public abstract async void enable () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "GetDependencies")]
		public abstract async GLib.HashTable<string,GLib.Variant> get_dependencies () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "Resume")]
		public abstract async void resume () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "Suspend")]
		public abstract async void suspend () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Resource", timeout = 120000)]
	public interface ResourceSync : GLib.Object {
		[DBus (name = "Disable")]
		public abstract void disable () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "Enable")]
		public abstract void enable () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "GetDependencies")]
		public abstract GLib.HashTable<string,GLib.Variant> get_dependencies () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "Resume")]
		public abstract void resume () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
		[DBus (name = "Suspend")]
		public abstract void suspend () throws FreeSmartphone.ResourceError, GLib.DBusError, GLib.IOError;
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Usage", timeout = 120000)]
	public interface Usage : GLib.Object {
		[DBus (name = "GetResourcePolicy")]
		public abstract async FreeSmartphone.UsageResourcePolicy get_resource_policy (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "GetResourceState")]
		public abstract async bool get_resource_state (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "GetResourceUsers")]
		public abstract async string[] get_resource_users (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "ListResources")]
		public abstract async string[] list_resources () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Reboot")]
		public abstract async void reboot () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "RegisterResource")]
		public abstract async void register_resource (string name, GLib.ObjectPath path) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "ReleaseResource")]
		public abstract async void release_resource (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "RequestResource")]
		public abstract async void request_resource (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Resume")]
		public abstract async void resume (string source, string reason) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "SetResourcePolicy")]
		public abstract async void set_resource_policy (string name, FreeSmartphone.UsageResourcePolicy policy) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Shutdown")]
		public abstract async void shutdown () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Suspend")]
		public abstract async void suspend () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "UnregisterResource")]
		public abstract async void unregister_resource (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "ResourceAvailable")]
		public signal void resource_available (string name, bool availability);
		[DBus (name = "ResourceChanged")]
		public signal void resource_changed (string name, bool state, GLib.HashTable<string,GLib.Variant> attributes);
		[DBus (name = "SystemAction")]
		public signal void system_action (FreeSmartphone.UsageSystemAction action);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Usage", timeout = 120000)]
	public interface UsageSync : GLib.Object {
		[DBus (name = "GetResourcePolicy")]
		public abstract FreeSmartphone.UsageResourcePolicy get_resource_policy (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "GetResourceState")]
		public abstract bool get_resource_state (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "GetResourceUsers")]
		public abstract string[] get_resource_users (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "ListResources")]
		public abstract string[] list_resources () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Reboot")]
		public abstract void reboot () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "RegisterResource")]
		public abstract void register_resource (string name, GLib.ObjectPath path) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "ReleaseResource")]
		public abstract void release_resource (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "RequestResource")]
		public abstract void request_resource (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Resume")]
		public abstract void resume (string source, string reason) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "SetResourcePolicy")]
		public abstract void set_resource_policy (string name, FreeSmartphone.UsageResourcePolicy policy) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Shutdown")]
		public abstract void shutdown () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "Suspend")]
		public abstract void suspend () throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "UnregisterResource")]
		public abstract void unregister_resource (string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, GLib.DBusError, GLib.IOError;
		[DBus (name = "ResourceAvailable")]
		public signal void resource_available (string name, bool availability);
		[DBus (name = "ResourceChanged")]
		public signal void resource_changed (string name, bool state, GLib.HashTable<string,GLib.Variant> attributes);
		[DBus (name = "SystemAction")]
		public signal void system_action (FreeSmartphone.UsageSystemAction action);
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (use_string_marshalling = true)]
	public enum UsageResourcePolicy {
		[DBus (value = "auto")]
		AUTO,
		[DBus (value = "disabled")]
		DISABLED,
		[DBus (value = "enabled")]
		ENABLED
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (use_string_marshalling = true)]
	public enum UsageSystemAction {
		[DBus (value = "alive")]
		ALIVE,
		[DBus (value = "suspend")]
		SUSPEND,
		[DBus (value = "resume")]
		RESUME,
		[DBus (value = "shutdown")]
		SHUTDOWN,
		[DBus (value = "reboot")]
		REBOOT
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone")]
	public errordomain Error {
		[DBus (name = "InvalidParameter")]
		INVALID_PARAMETER,
		[DBus (name = "InternalError")]
		INTERNAL_ERROR,
		[DBus (name = "SystemError")]
		SYSTEM_ERROR,
		[DBus (name = "Unsupported")]
		UNSUPPORTED,
		[DBus (name = "Unavailable")]
		UNAVAILABLE
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Resource")]
	public errordomain ResourceError {
		[DBus (name = "NotEnabled")]
		NOT_ENABLED,
		[DBus (name = "UnableToEnable")]
		UNABLE_TO_ENABLE
	}
	[CCode (cheader_filename = "freesmartphone.h")]
	[DBus (name = "org.freesmartphone.Usage")]
	public errordomain UsageError {
		[DBus (name = "PolicyUnknown")]
		POLICY_UNKNOWN,
		[DBus (name = "PolicyDisabled")]
		POLICY_DISABLED,
		[DBus (name = "ResourceUnknown")]
		RESOURCE_UNKNOWN,
		[DBus (name = "ResourceExists")]
		RESOURCE_EXISTS,
		[DBus (name = "ResourceInUse")]
		RESOURCE_IN_USE,
		[DBus (name = "UserExists")]
		USER_EXISTS,
		[DBus (name = "UserUnknown")]
		USER_UNKNOWN
	}
}
