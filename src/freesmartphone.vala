/* Generated by vala-dbus-binding-tool 0.3.3. Do not modify! */
/* Generated with: vala-dbus-binding-tool --api-path=/usr/local/share/freesmartphone/xml --directory=../src --strip-namespace=org --rename-namespace=freedesktop:FreeDesktop --rename-namespace=freesmartphone:FreeSmartphone --gdbus */
using GLib;

namespace FreeSmartphone {

	[DBus (name = "org.freesmartphone.Error0", timeout = 120000)]
	public interface Error0 : GLib.Object {
	}

	[DBus (name = "org.freesmartphone.Error0", timeout = 120000)]
	public interface Error0Sync : GLib.Object {
	}

	[DBus (name = "org.freesmartphone.Events", timeout = 120000)]
	public interface Events : GLib.Object {

		[DBus (name = "AddRule")]
		public abstract async void add_rule(string rule) throws DBusError, IOError;

		[DBus (name = "RemoveRule")]
		public abstract async void remove_rule(string name) throws DBusError, IOError;

		[DBus (name = "TriggerTest")]
		public abstract async void trigger_test(string name, bool value) throws DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Events", timeout = 120000)]
	public interface EventsSync : GLib.Object {

		[DBus (name = "AddRule")]
		public abstract void add_rule(string rule) throws DBusError, IOError;

		[DBus (name = "RemoveRule")]
		public abstract void remove_rule(string name) throws DBusError, IOError;

		[DBus (name = "TriggerTest")]
		public abstract void trigger_test(string name, bool value) throws DBusError, IOError;
	}

	[DBus (use_string_marshalling = true)]
	public enum UsageSystemAction {
		[DBus (value="alive")]
		ALIVE,
		[DBus (value="suspend")]
		SUSPEND,
		[DBus (value="resume")]
		RESUME,
		[DBus (value="shutdown")]
		SHUTDOWN,
		[DBus (value="reboot")]
		REBOOT,
	}

	[DBus (name = "org.freesmartphone.Usage", timeout = 120000)]
	public interface Usage : GLib.Object {

		[DBus (name = "RegisterResource")]
		public abstract async void register_resource(string name, GLib.ObjectPath path) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "UnregisterResource")]
		public abstract async void unregister_resource(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "ListResources")]
		public abstract async string[] list_resources() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "GetResourcePolicy")]
		public abstract async FreeSmartphone.UsageResourcePolicy get_resource_policy(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "SetResourcePolicy")]
		public abstract async void set_resource_policy(string name, FreeSmartphone.UsageResourcePolicy policy) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "GetResourceState")]
		public abstract async bool get_resource_state(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "GetResourceUsers")]
		public abstract async string[] get_resource_users(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "RequestResource")]
		public abstract async void request_resource(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "ReleaseResource")]
		public abstract async void release_resource(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Suspend")]
		public abstract async void suspend() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Resume")]
		public abstract async void resume(string source, string reason) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Shutdown")]
		public abstract async void shutdown() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Reboot")]
		public abstract async void reboot() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "ResourceAvailable")]
		public signal void resource_available(string name, bool availability);

		[DBus (name = "ResourceChanged")]
		public signal void resource_changed(string name, bool state, GLib.HashTable<string, GLib.Variant> attributes);

		[DBus (name = "SystemAction")]
		public signal void system_action(FreeSmartphone.UsageSystemAction action);
	}

	[DBus (name = "org.freesmartphone.Usage", timeout = 120000)]
	public interface UsageSync : GLib.Object {

		[DBus (name = "RegisterResource")]
		public abstract void register_resource(string name, GLib.ObjectPath path) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "UnregisterResource")]
		public abstract void unregister_resource(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "ListResources")]
		public abstract string[] list_resources() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "GetResourcePolicy")]
		public abstract FreeSmartphone.UsageResourcePolicy get_resource_policy(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "SetResourcePolicy")]
		public abstract void set_resource_policy(string name, FreeSmartphone.UsageResourcePolicy policy) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "GetResourceState")]
		public abstract bool get_resource_state(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "GetResourceUsers")]
		public abstract string[] get_resource_users(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "RequestResource")]
		public abstract void request_resource(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "ReleaseResource")]
		public abstract void release_resource(string name) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Suspend")]
		public abstract void suspend() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Resume")]
		public abstract void resume(string source, string reason) throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Shutdown")]
		public abstract void shutdown() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "Reboot")]
		public abstract void reboot() throws FreeSmartphone.UsageError, FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "ResourceAvailable")]
		public signal void resource_available(string name, bool availability);

		[DBus (name = "ResourceChanged")]
		public signal void resource_changed(string name, bool state, GLib.HashTable<string, GLib.Variant> attributes);

		[DBus (name = "SystemAction")]
		public signal void system_action(FreeSmartphone.UsageSystemAction action);
	}

	[DBus (use_string_marshalling = true)]
	public enum UsageResourcePolicy {
		[DBus (value="auto")]
		AUTO,
		[DBus (value="disabled")]
		DISABLED,
		[DBus (value="enabled")]
		ENABLED,
	}

	[DBus (name = "org.freesmartphone.Notification", timeout = 120000)]
	public interface Notification : GLib.Object {

		[DBus (name = "Alarm", no_reply = true)]
		public abstract void alarm() throws DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Notification", timeout = 120000)]
	public interface NotificationSync : GLib.Object {

		[DBus (name = "Alarm", no_reply = true)]
		public abstract void alarm() throws DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Phone", timeout = 120000)]
	public interface Phone : GLib.Object {

		[DBus (name = "InitProtocols")]
		public abstract async string[] init_protocols() throws DBusError, IOError;

		[DBus (name = "CreateCall")]
		public abstract async GLib.ObjectPath create_call(string number, string protocol, bool force) throws DBusError, IOError;

		[DBus (name = "Incoming")]
		public signal void incoming(GLib.ObjectPath call);
	}

	[DBus (name = "org.freesmartphone.Phone", timeout = 120000)]
	public interface PhoneSync : GLib.Object {

		[DBus (name = "InitProtocols")]
		public abstract string[] init_protocols() throws DBusError, IOError;

		[DBus (name = "CreateCall")]
		public abstract GLib.ObjectPath create_call(string number, string protocol, bool force) throws DBusError, IOError;

		[DBus (name = "Incoming")]
		public signal void incoming(GLib.ObjectPath call);
	}

	[DBus (name = "org.freesmartphone.Location", timeout = 120000)]
	public interface Location : GLib.Object {

		[DBus (name = "GetLocation")]
		public abstract async GLib.HashTable<string, GLib.Variant> get_location() throws FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "LocationUpdate")]
		public signal void location_update(GLib.HashTable<string, GLib.Variant> location);
	}

	[DBus (name = "org.freesmartphone.Location", timeout = 120000)]
	public interface LocationSync : GLib.Object {

		[DBus (name = "GetLocation")]
		public abstract GLib.HashTable<string, GLib.Variant> get_location() throws FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "LocationUpdate")]
		public signal void location_update(GLib.HashTable<string, GLib.Variant> location);
	}

	[DBus (name = "org.freesmartphone")]
	public errordomain Error {
		[DBus (name = "InvalidParameter")]
		INVALID_PARAMETER,
		[DBus (name = "InternalError")]
		INTERNAL_ERROR,
		[DBus (name = "SystemError")]
		SYSTEM_ERROR,
		[DBus (name = "Unsupported")]
		UNSUPPORTED,
		[DBus (name = "Unavailable")]
		UNAVAILABLE,
	}

	[DBus (name = "org.freesmartphone.Phone.Call", timeout = 120000)]
	public interface PhoneCall : GLib.Object {

		[DBus (name = "GetPeer")]
		public abstract async string get_peer() throws DBusError, IOError;

		[DBus (name = "Initiate")]
		public abstract async string initiate() throws DBusError, IOError;

		[DBus (name = "Activate")]
		public abstract async string activate() throws DBusError, IOError;

		[DBus (name = "Release")]
		public abstract async string release() throws DBusError, IOError;

		[DBus (name = "GetStatus")]
		public abstract async string get_status() throws DBusError, IOError;

		[DBus (name = "Remove")]
		public abstract async void remove() throws DBusError, IOError;

		[DBus (name = "Incoming")]
		public signal void incoming();

		[DBus (name = "Outgoing")]
		public signal void outgoing();

		[DBus (name = "Released")]
		public signal void released();

		[DBus (name = "Activated")]
		public signal void activated();
	}

	[DBus (name = "org.freesmartphone.Phone.Call", timeout = 120000)]
	public interface PhoneCallSync : GLib.Object {

		[DBus (name = "GetPeer")]
		public abstract string get_peer() throws DBusError, IOError;

		[DBus (name = "Initiate")]
		public abstract string initiate() throws DBusError, IOError;

		[DBus (name = "Activate")]
		public abstract string activate() throws DBusError, IOError;

		[DBus (name = "Release")]
		public abstract string release() throws DBusError, IOError;

		[DBus (name = "GetStatus")]
		public abstract string get_status() throws DBusError, IOError;

		[DBus (name = "Remove")]
		public abstract void remove() throws DBusError, IOError;

		[DBus (name = "Incoming")]
		public signal void incoming();

		[DBus (name = "Outgoing")]
		public signal void outgoing();

		[DBus (name = "Released")]
		public signal void released();

		[DBus (name = "Activated")]
		public signal void activated();
	}

	[DBus (name = "org.freesmartphone.Network", timeout = 120000)]
	public interface Network : GLib.Object {

		[DBus (name = "StartConnectionSharingWithInterface")]
		public abstract async void start_connection_sharing_with_interface(string interface) throws FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "StopConnectionSharingWithInterface")]
		public abstract async void stop_connection_sharing_with_interface(string interface) throws FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "OfferDefaultRoute")]
		public abstract async void offer_default_route(string technology, string interface, string ipv4address, string ipv4mask, string ipv4gateway, string dns1, string dns2) throws FreeSmartphone.Error, DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Network", timeout = 120000)]
	public interface NetworkSync : GLib.Object {

		[DBus (name = "StartConnectionSharingWithInterface")]
		public abstract void start_connection_sharing_with_interface(string interface) throws FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "StopConnectionSharingWithInterface")]
		public abstract void stop_connection_sharing_with_interface(string interface) throws FreeSmartphone.Error, DBusError, IOError;

		[DBus (name = "OfferDefaultRoute")]
		public abstract void offer_default_route(string technology, string interface, string ipv4address, string ipv4mask, string ipv4gateway, string dns1, string dns2) throws FreeSmartphone.Error, DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Preferences", timeout = 120000)]
	public interface Preferences : GLib.Object {

		[DBus (name = "GetServices")]
		public abstract async string[] get_services() throws DBusError, IOError;

		[DBus (name = "GetService")]
		public abstract async GLib.ObjectPath get_service(string name) throws DBusError, IOError;

		[DBus (name = "GetProfiles")]
		public abstract async string[] get_profiles() throws DBusError, IOError;

		[DBus (name = "GetProfile")]
		public abstract async string get_profile() throws DBusError, IOError;

		[DBus (name = "SetProfile")]
		public abstract async void set_profile(string profile) throws DBusError, IOError;

		[DBus (name = "Changed")]
		public signal void changed(string profile);
	}

	[DBus (name = "org.freesmartphone.Preferences", timeout = 120000)]
	public interface PreferencesSync : GLib.Object {

		[DBus (name = "GetServices")]
		public abstract string[] get_services() throws DBusError, IOError;

		[DBus (name = "GetService")]
		public abstract GLib.ObjectPath get_service(string name) throws DBusError, IOError;

		[DBus (name = "GetProfiles")]
		public abstract string[] get_profiles() throws DBusError, IOError;

		[DBus (name = "GetProfile")]
		public abstract string get_profile() throws DBusError, IOError;

		[DBus (name = "SetProfile")]
		public abstract void set_profile(string profile) throws DBusError, IOError;

		[DBus (name = "Changed")]
		public signal void changed(string profile);
	}

	[DBus (name = "org.freesmartphone.Preferences.Service", timeout = 120000)]
	public interface PreferencesService : GLib.Object {

		[DBus (name = "GetKeys")]
		public abstract async string[] get_keys() throws DBusError, IOError;

		[DBus (name = "GetValue")]
		public abstract async GLib.Variant get_value(string key) throws DBusError, IOError;

		[DBus (name = "SetValue")]
		public abstract async void set_value(string key, GLib.Variant value) throws DBusError, IOError;

		[DBus (name = "IsProfilable")]
		public abstract async bool is_profilable(string key) throws DBusError, IOError;

		[DBus (name = "GetType")]
		public abstract async string get_type_(string key) throws DBusError, IOError;

		[DBus (name = "Notify")]
		public signal void notify(string key, GLib.Variant value);
	}

	[DBus (name = "org.freesmartphone.Preferences.Service", timeout = 120000)]
	public interface PreferencesServiceSync : GLib.Object {

		[DBus (name = "GetKeys")]
		public abstract string[] get_keys() throws DBusError, IOError;

		[DBus (name = "GetValue")]
		public abstract GLib.Variant get_value(string key) throws DBusError, IOError;

		[DBus (name = "SetValue")]
		public abstract void set_value(string key, GLib.Variant value) throws DBusError, IOError;

		[DBus (name = "IsProfilable")]
		public abstract bool is_profilable(string key) throws DBusError, IOError;

		[DBus (name = "GetType")]
		public abstract string get_type_(string key) throws DBusError, IOError;

		[DBus (name = "Notify")]
		public signal void notify(string key, GLib.Variant value);
	}

	[DBus (name = "org.freesmartphone.Info", timeout = 120000)]
	public interface Info : GLib.Object {

		[DBus (name = "GetInfo")]
		public abstract async GLib.HashTable<string, GLib.Variant> get_info() throws FreeSmartphone.Error, DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Info", timeout = 120000)]
	public interface InfoSync : GLib.Object {

		[DBus (name = "GetInfo")]
		public abstract GLib.HashTable<string, GLib.Variant> get_info() throws FreeSmartphone.Error, DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Usage")]
	public errordomain UsageError {
		[DBus (name = "PolicyUnknown")]
		POLICY_UNKNOWN,
		[DBus (name = "PolicyDisabled")]
		POLICY_DISABLED,
		[DBus (name = "ResourceUnknown")]
		RESOURCE_UNKNOWN,
		[DBus (name = "ResourceExists")]
		RESOURCE_EXISTS,
		[DBus (name = "ResourceInUse")]
		RESOURCE_IN_USE,
		[DBus (name = "UserExists")]
		USER_EXISTS,
		[DBus (name = "UserUnknown")]
		USER_UNKNOWN,
	}

	[DBus (name = "org.freesmartphone.Resource", timeout = 120000)]
	public interface Resource : GLib.Object {

		[DBus (name = "Enable")]
		public abstract async void enable() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "Disable")]
		public abstract async void disable() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "Suspend")]
		public abstract async void suspend() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "Resume")]
		public abstract async void resume() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "GetDependencies")]
		public abstract async GLib.HashTable<string, GLib.Variant> get_dependencies() throws FreeSmartphone.ResourceError, DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Resource", timeout = 120000)]
	public interface ResourceSync : GLib.Object {

		[DBus (name = "Enable")]
		public abstract void enable() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "Disable")]
		public abstract void disable() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "Suspend")]
		public abstract void suspend() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "Resume")]
		public abstract void resume() throws FreeSmartphone.ResourceError, DBusError, IOError;

		[DBus (name = "GetDependencies")]
		public abstract GLib.HashTable<string, GLib.Variant> get_dependencies() throws FreeSmartphone.ResourceError, DBusError, IOError;
	}

	[DBus (name = "org.freesmartphone.Resource")]
	public errordomain ResourceError {
		[DBus (name = "NotEnabled")]
		NOT_ENABLED,
		[DBus (name = "UnableToEnable")]
		UNABLE_TO_ENABLE,
	}
}
