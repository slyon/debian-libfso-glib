/* freesmartphone.h generated by valac 0.16.0, the Vala compiler, do not modify */


#ifndef __FREESMARTPHONE_H__
#define __FREESMARTPHONE_H__

#include <glib.h>
#include <glib-object.h>
#include <gio/gio.h>
#include <stdlib.h>
#include <string.h>

G_BEGIN_DECLS


#define FREE_SMARTPHONE_TYPE_ERROR0 (free_smartphone_error0_get_type ())
#define FREE_SMARTPHONE_ERROR0(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_ERROR0, FreeSmartphoneError0))
#define FREE_SMARTPHONE_IS_ERROR0(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_ERROR0))
#define FREE_SMARTPHONE_ERROR0_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_ERROR0, FreeSmartphoneError0Iface))

typedef struct _FreeSmartphoneError0 FreeSmartphoneError0;
typedef struct _FreeSmartphoneError0Iface FreeSmartphoneError0Iface;

#define FREE_SMARTPHONE_TYPE_ERROR0_PROXY (free_smartphone_error0_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_ERROR0_SYNC (free_smartphone_error0_sync_get_type ())
#define FREE_SMARTPHONE_ERROR0_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_ERROR0_SYNC, FreeSmartphoneError0Sync))
#define FREE_SMARTPHONE_IS_ERROR0_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_ERROR0_SYNC))
#define FREE_SMARTPHONE_ERROR0_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_ERROR0_SYNC, FreeSmartphoneError0SyncIface))

typedef struct _FreeSmartphoneError0Sync FreeSmartphoneError0Sync;
typedef struct _FreeSmartphoneError0SyncIface FreeSmartphoneError0SyncIface;

#define FREE_SMARTPHONE_TYPE_ERROR0_SYNC_PROXY (free_smartphone_error0_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_EVENTS (free_smartphone_events_get_type ())
#define FREE_SMARTPHONE_EVENTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_EVENTS, FreeSmartphoneEvents))
#define FREE_SMARTPHONE_IS_EVENTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_EVENTS))
#define FREE_SMARTPHONE_EVENTS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_EVENTS, FreeSmartphoneEventsIface))

typedef struct _FreeSmartphoneEvents FreeSmartphoneEvents;
typedef struct _FreeSmartphoneEventsIface FreeSmartphoneEventsIface;

#define FREE_SMARTPHONE_TYPE_EVENTS_PROXY (free_smartphone_events_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_EVENTS_SYNC (free_smartphone_events_sync_get_type ())
#define FREE_SMARTPHONE_EVENTS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_EVENTS_SYNC, FreeSmartphoneEventsSync))
#define FREE_SMARTPHONE_IS_EVENTS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_EVENTS_SYNC))
#define FREE_SMARTPHONE_EVENTS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_EVENTS_SYNC, FreeSmartphoneEventsSyncIface))

typedef struct _FreeSmartphoneEventsSync FreeSmartphoneEventsSync;
typedef struct _FreeSmartphoneEventsSyncIface FreeSmartphoneEventsSyncIface;

#define FREE_SMARTPHONE_TYPE_EVENTS_SYNC_PROXY (free_smartphone_events_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_USAGE_SYSTEM_ACTION (free_smartphone_usage_system_action_get_type ())

#define FREE_SMARTPHONE_TYPE_PHONE (free_smartphone_phone_get_type ())
#define FREE_SMARTPHONE_PHONE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PHONE, FreeSmartphonePhone))
#define FREE_SMARTPHONE_IS_PHONE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PHONE))
#define FREE_SMARTPHONE_PHONE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PHONE, FreeSmartphonePhoneIface))

typedef struct _FreeSmartphonePhone FreeSmartphonePhone;
typedef struct _FreeSmartphonePhoneIface FreeSmartphonePhoneIface;

#define FREE_SMARTPHONE_TYPE_PHONE_PROXY (free_smartphone_phone_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PHONE_SYNC (free_smartphone_phone_sync_get_type ())
#define FREE_SMARTPHONE_PHONE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PHONE_SYNC, FreeSmartphonePhoneSync))
#define FREE_SMARTPHONE_IS_PHONE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PHONE_SYNC))
#define FREE_SMARTPHONE_PHONE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PHONE_SYNC, FreeSmartphonePhoneSyncIface))

typedef struct _FreeSmartphonePhoneSync FreeSmartphonePhoneSync;
typedef struct _FreeSmartphonePhoneSyncIface FreeSmartphonePhoneSyncIface;

#define FREE_SMARTPHONE_TYPE_PHONE_SYNC_PROXY (free_smartphone_phone_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_NOTIFICATION (free_smartphone_notification_get_type ())
#define FREE_SMARTPHONE_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_NOTIFICATION, FreeSmartphoneNotification))
#define FREE_SMARTPHONE_IS_NOTIFICATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_NOTIFICATION))
#define FREE_SMARTPHONE_NOTIFICATION_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_NOTIFICATION, FreeSmartphoneNotificationIface))

typedef struct _FreeSmartphoneNotification FreeSmartphoneNotification;
typedef struct _FreeSmartphoneNotificationIface FreeSmartphoneNotificationIface;

#define FREE_SMARTPHONE_TYPE_NOTIFICATION_PROXY (free_smartphone_notification_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_NOTIFICATION_SYNC (free_smartphone_notification_sync_get_type ())
#define FREE_SMARTPHONE_NOTIFICATION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_NOTIFICATION_SYNC, FreeSmartphoneNotificationSync))
#define FREE_SMARTPHONE_IS_NOTIFICATION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_NOTIFICATION_SYNC))
#define FREE_SMARTPHONE_NOTIFICATION_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_NOTIFICATION_SYNC, FreeSmartphoneNotificationSyncIface))

typedef struct _FreeSmartphoneNotificationSync FreeSmartphoneNotificationSync;
typedef struct _FreeSmartphoneNotificationSyncIface FreeSmartphoneNotificationSyncIface;

#define FREE_SMARTPHONE_TYPE_NOTIFICATION_SYNC_PROXY (free_smartphone_notification_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_USAGE (free_smartphone_usage_get_type ())
#define FREE_SMARTPHONE_USAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_USAGE, FreeSmartphoneUsage))
#define FREE_SMARTPHONE_IS_USAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_USAGE))
#define FREE_SMARTPHONE_USAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_USAGE, FreeSmartphoneUsageIface))

typedef struct _FreeSmartphoneUsage FreeSmartphoneUsage;
typedef struct _FreeSmartphoneUsageIface FreeSmartphoneUsageIface;

#define FREE_SMARTPHONE_TYPE_USAGE_PROXY (free_smartphone_usage_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_USAGE_RESOURCE_POLICY (free_smartphone_usage_resource_policy_get_type ())

#define FREE_SMARTPHONE_TYPE_USAGE_SYNC (free_smartphone_usage_sync_get_type ())
#define FREE_SMARTPHONE_USAGE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_USAGE_SYNC, FreeSmartphoneUsageSync))
#define FREE_SMARTPHONE_IS_USAGE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_USAGE_SYNC))
#define FREE_SMARTPHONE_USAGE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_USAGE_SYNC, FreeSmartphoneUsageSyncIface))

typedef struct _FreeSmartphoneUsageSync FreeSmartphoneUsageSync;
typedef struct _FreeSmartphoneUsageSyncIface FreeSmartphoneUsageSyncIface;

#define FREE_SMARTPHONE_TYPE_USAGE_SYNC_PROXY (free_smartphone_usage_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_LOCATION (free_smartphone_location_get_type ())
#define FREE_SMARTPHONE_LOCATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_LOCATION, FreeSmartphoneLocation))
#define FREE_SMARTPHONE_IS_LOCATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_LOCATION))
#define FREE_SMARTPHONE_LOCATION_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_LOCATION, FreeSmartphoneLocationIface))

typedef struct _FreeSmartphoneLocation FreeSmartphoneLocation;
typedef struct _FreeSmartphoneLocationIface FreeSmartphoneLocationIface;

#define FREE_SMARTPHONE_TYPE_LOCATION_PROXY (free_smartphone_location_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_LOCATION_SYNC (free_smartphone_location_sync_get_type ())
#define FREE_SMARTPHONE_LOCATION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_LOCATION_SYNC, FreeSmartphoneLocationSync))
#define FREE_SMARTPHONE_IS_LOCATION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_LOCATION_SYNC))
#define FREE_SMARTPHONE_LOCATION_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_LOCATION_SYNC, FreeSmartphoneLocationSyncIface))

typedef struct _FreeSmartphoneLocationSync FreeSmartphoneLocationSync;
typedef struct _FreeSmartphoneLocationSyncIface FreeSmartphoneLocationSyncIface;

#define FREE_SMARTPHONE_TYPE_LOCATION_SYNC_PROXY (free_smartphone_location_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PHONE_CALL (free_smartphone_phone_call_get_type ())
#define FREE_SMARTPHONE_PHONE_CALL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PHONE_CALL, FreeSmartphonePhoneCall))
#define FREE_SMARTPHONE_IS_PHONE_CALL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PHONE_CALL))
#define FREE_SMARTPHONE_PHONE_CALL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PHONE_CALL, FreeSmartphonePhoneCallIface))

typedef struct _FreeSmartphonePhoneCall FreeSmartphonePhoneCall;
typedef struct _FreeSmartphonePhoneCallIface FreeSmartphonePhoneCallIface;

#define FREE_SMARTPHONE_TYPE_PHONE_CALL_PROXY (free_smartphone_phone_call_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PHONE_CALL_SYNC (free_smartphone_phone_call_sync_get_type ())
#define FREE_SMARTPHONE_PHONE_CALL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PHONE_CALL_SYNC, FreeSmartphonePhoneCallSync))
#define FREE_SMARTPHONE_IS_PHONE_CALL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PHONE_CALL_SYNC))
#define FREE_SMARTPHONE_PHONE_CALL_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PHONE_CALL_SYNC, FreeSmartphonePhoneCallSyncIface))

typedef struct _FreeSmartphonePhoneCallSync FreeSmartphonePhoneCallSync;
typedef struct _FreeSmartphonePhoneCallSyncIface FreeSmartphonePhoneCallSyncIface;

#define FREE_SMARTPHONE_TYPE_PHONE_CALL_SYNC_PROXY (free_smartphone_phone_call_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PREFERENCES (free_smartphone_preferences_get_type ())
#define FREE_SMARTPHONE_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES, FreeSmartphonePreferences))
#define FREE_SMARTPHONE_IS_PREFERENCES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES))
#define FREE_SMARTPHONE_PREFERENCES_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES, FreeSmartphonePreferencesIface))

typedef struct _FreeSmartphonePreferences FreeSmartphonePreferences;
typedef struct _FreeSmartphonePreferencesIface FreeSmartphonePreferencesIface;

#define FREE_SMARTPHONE_TYPE_PREFERENCES_PROXY (free_smartphone_preferences_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PREFERENCES_SYNC (free_smartphone_preferences_sync_get_type ())
#define FREE_SMARTPHONE_PREFERENCES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SYNC, FreeSmartphonePreferencesSync))
#define FREE_SMARTPHONE_IS_PREFERENCES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SYNC))
#define FREE_SMARTPHONE_PREFERENCES_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SYNC, FreeSmartphonePreferencesSyncIface))

typedef struct _FreeSmartphonePreferencesSync FreeSmartphonePreferencesSync;
typedef struct _FreeSmartphonePreferencesSyncIface FreeSmartphonePreferencesSyncIface;

#define FREE_SMARTPHONE_TYPE_PREFERENCES_SYNC_PROXY (free_smartphone_preferences_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE (free_smartphone_preferences_service_get_type ())
#define FREE_SMARTPHONE_PREFERENCES_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE, FreeSmartphonePreferencesService))
#define FREE_SMARTPHONE_IS_PREFERENCES_SERVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE))
#define FREE_SMARTPHONE_PREFERENCES_SERVICE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE, FreeSmartphonePreferencesServiceIface))

typedef struct _FreeSmartphonePreferencesService FreeSmartphonePreferencesService;
typedef struct _FreeSmartphonePreferencesServiceIface FreeSmartphonePreferencesServiceIface;

#define FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE_PROXY (free_smartphone_preferences_service_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE_SYNC (free_smartphone_preferences_service_sync_get_type ())
#define FREE_SMARTPHONE_PREFERENCES_SERVICE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE_SYNC, FreeSmartphonePreferencesServiceSync))
#define FREE_SMARTPHONE_IS_PREFERENCES_SERVICE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE_SYNC))
#define FREE_SMARTPHONE_PREFERENCES_SERVICE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE_SYNC, FreeSmartphonePreferencesServiceSyncIface))

typedef struct _FreeSmartphonePreferencesServiceSync FreeSmartphonePreferencesServiceSync;
typedef struct _FreeSmartphonePreferencesServiceSyncIface FreeSmartphonePreferencesServiceSyncIface;

#define FREE_SMARTPHONE_TYPE_PREFERENCES_SERVICE_SYNC_PROXY (free_smartphone_preferences_service_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_NETWORK (free_smartphone_network_get_type ())
#define FREE_SMARTPHONE_NETWORK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_NETWORK, FreeSmartphoneNetwork))
#define FREE_SMARTPHONE_IS_NETWORK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_NETWORK))
#define FREE_SMARTPHONE_NETWORK_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_NETWORK, FreeSmartphoneNetworkIface))

typedef struct _FreeSmartphoneNetwork FreeSmartphoneNetwork;
typedef struct _FreeSmartphoneNetworkIface FreeSmartphoneNetworkIface;

#define FREE_SMARTPHONE_TYPE_NETWORK_PROXY (free_smartphone_network_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_NETWORK_SYNC (free_smartphone_network_sync_get_type ())
#define FREE_SMARTPHONE_NETWORK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_NETWORK_SYNC, FreeSmartphoneNetworkSync))
#define FREE_SMARTPHONE_IS_NETWORK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_NETWORK_SYNC))
#define FREE_SMARTPHONE_NETWORK_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_NETWORK_SYNC, FreeSmartphoneNetworkSyncIface))

typedef struct _FreeSmartphoneNetworkSync FreeSmartphoneNetworkSync;
typedef struct _FreeSmartphoneNetworkSyncIface FreeSmartphoneNetworkSyncIface;

#define FREE_SMARTPHONE_TYPE_NETWORK_SYNC_PROXY (free_smartphone_network_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_INFO (free_smartphone_info_get_type ())
#define FREE_SMARTPHONE_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_INFO, FreeSmartphoneInfo))
#define FREE_SMARTPHONE_IS_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_INFO))
#define FREE_SMARTPHONE_INFO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_INFO, FreeSmartphoneInfoIface))

typedef struct _FreeSmartphoneInfo FreeSmartphoneInfo;
typedef struct _FreeSmartphoneInfoIface FreeSmartphoneInfoIface;

#define FREE_SMARTPHONE_TYPE_INFO_PROXY (free_smartphone_info_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_INFO_SYNC (free_smartphone_info_sync_get_type ())
#define FREE_SMARTPHONE_INFO_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_INFO_SYNC, FreeSmartphoneInfoSync))
#define FREE_SMARTPHONE_IS_INFO_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_INFO_SYNC))
#define FREE_SMARTPHONE_INFO_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_INFO_SYNC, FreeSmartphoneInfoSyncIface))

typedef struct _FreeSmartphoneInfoSync FreeSmartphoneInfoSync;
typedef struct _FreeSmartphoneInfoSyncIface FreeSmartphoneInfoSyncIface;

#define FREE_SMARTPHONE_TYPE_INFO_SYNC_PROXY (free_smartphone_info_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_RESOURCE (free_smartphone_resource_get_type ())
#define FREE_SMARTPHONE_RESOURCE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_RESOURCE, FreeSmartphoneResource))
#define FREE_SMARTPHONE_IS_RESOURCE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_RESOURCE))
#define FREE_SMARTPHONE_RESOURCE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_RESOURCE, FreeSmartphoneResourceIface))

typedef struct _FreeSmartphoneResource FreeSmartphoneResource;
typedef struct _FreeSmartphoneResourceIface FreeSmartphoneResourceIface;

#define FREE_SMARTPHONE_TYPE_RESOURCE_PROXY (free_smartphone_resource_proxy_get_type ())

#define FREE_SMARTPHONE_TYPE_RESOURCE_SYNC (free_smartphone_resource_sync_get_type ())
#define FREE_SMARTPHONE_RESOURCE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TYPE_RESOURCE_SYNC, FreeSmartphoneResourceSync))
#define FREE_SMARTPHONE_IS_RESOURCE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TYPE_RESOURCE_SYNC))
#define FREE_SMARTPHONE_RESOURCE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TYPE_RESOURCE_SYNC, FreeSmartphoneResourceSyncIface))

typedef struct _FreeSmartphoneResourceSync FreeSmartphoneResourceSync;
typedef struct _FreeSmartphoneResourceSyncIface FreeSmartphoneResourceSyncIface;

#define FREE_SMARTPHONE_TYPE_RESOURCE_SYNC_PROXY (free_smartphone_resource_sync_proxy_get_type ())

#define FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT (free_smartphone_context_client_get_type ())
#define FREE_SMARTPHONE_CONTEXT_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT, FreeSmartphoneContextClient))
#define FREE_SMARTPHONE_CONTEXT_IS_CLIENT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT))
#define FREE_SMARTPHONE_CONTEXT_CLIENT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT, FreeSmartphoneContextClientIface))

typedef struct _FreeSmartphoneContextClient FreeSmartphoneContextClient;
typedef struct _FreeSmartphoneContextClientIface FreeSmartphoneContextClientIface;

#define FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT_PROXY (free_smartphone_context_client_proxy_get_type ())

#define FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT_SYNC (free_smartphone_context_client_sync_get_type ())
#define FREE_SMARTPHONE_CONTEXT_CLIENT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT_SYNC, FreeSmartphoneContextClientSync))
#define FREE_SMARTPHONE_CONTEXT_IS_CLIENT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT_SYNC))
#define FREE_SMARTPHONE_CONTEXT_CLIENT_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT_SYNC, FreeSmartphoneContextClientSyncIface))

typedef struct _FreeSmartphoneContextClientSync FreeSmartphoneContextClientSync;
typedef struct _FreeSmartphoneContextClientSyncIface FreeSmartphoneContextClientSyncIface;

#define FREE_SMARTPHONE_CONTEXT_TYPE_CLIENT_SYNC_PROXY (free_smartphone_context_client_sync_proxy_get_type ())

#define FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER (free_smartphone_context_manager_get_type ())
#define FREE_SMARTPHONE_CONTEXT_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER, FreeSmartphoneContextManager))
#define FREE_SMARTPHONE_CONTEXT_IS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER))
#define FREE_SMARTPHONE_CONTEXT_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER, FreeSmartphoneContextManagerIface))

typedef struct _FreeSmartphoneContextManager FreeSmartphoneContextManager;
typedef struct _FreeSmartphoneContextManagerIface FreeSmartphoneContextManagerIface;

#define FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER_PROXY (free_smartphone_context_manager_proxy_get_type ())

#define FREE_SMARTPHONE_CONTEXT_TYPE_LOCATION_UPDATE_ACCURACY (free_smartphone_context_location_update_accuracy_get_type ())

#define FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER_SYNC (free_smartphone_context_manager_sync_get_type ())
#define FREE_SMARTPHONE_CONTEXT_MANAGER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER_SYNC, FreeSmartphoneContextManagerSync))
#define FREE_SMARTPHONE_CONTEXT_IS_MANAGER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER_SYNC))
#define FREE_SMARTPHONE_CONTEXT_MANAGER_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER_SYNC, FreeSmartphoneContextManagerSyncIface))

typedef struct _FreeSmartphoneContextManagerSync FreeSmartphoneContextManagerSync;
typedef struct _FreeSmartphoneContextManagerSyncIface FreeSmartphoneContextManagerSyncIface;

#define FREE_SMARTPHONE_CONTEXT_TYPE_MANAGER_SYNC_PROXY (free_smartphone_context_manager_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DATA_TYPE_WORLD_COUNTRY (free_smartphone_data_world_country_get_type ())
typedef struct _FreeSmartphoneDataWorldCountry FreeSmartphoneDataWorldCountry;

#define FREE_SMARTPHONE_DATA_TYPE_WORLD (free_smartphone_data_world_get_type ())
#define FREE_SMARTPHONE_DATA_WORLD(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DATA_TYPE_WORLD, FreeSmartphoneDataWorld))
#define FREE_SMARTPHONE_DATA_IS_WORLD(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DATA_TYPE_WORLD))
#define FREE_SMARTPHONE_DATA_WORLD_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DATA_TYPE_WORLD, FreeSmartphoneDataWorldIface))

typedef struct _FreeSmartphoneDataWorld FreeSmartphoneDataWorld;
typedef struct _FreeSmartphoneDataWorldIface FreeSmartphoneDataWorldIface;

#define FREE_SMARTPHONE_DATA_TYPE_WORLD_PROXY (free_smartphone_data_world_proxy_get_type ())

#define FREE_SMARTPHONE_DATA_TYPE_WORLD_CONNECTIVITY_ACCESS_POINT (free_smartphone_data_world_connectivity_access_point_get_type ())
typedef struct _FreeSmartphoneDataWorldConnectivityAccessPoint FreeSmartphoneDataWorldConnectivityAccessPoint;

#define FREE_SMARTPHONE_DATA_TYPE_WORLD_SYNC (free_smartphone_data_world_sync_get_type ())
#define FREE_SMARTPHONE_DATA_WORLD_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DATA_TYPE_WORLD_SYNC, FreeSmartphoneDataWorldSync))
#define FREE_SMARTPHONE_DATA_IS_WORLD_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DATA_TYPE_WORLD_SYNC))
#define FREE_SMARTPHONE_DATA_WORLD_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DATA_TYPE_WORLD_SYNC, FreeSmartphoneDataWorldSyncIface))

typedef struct _FreeSmartphoneDataWorldSync FreeSmartphoneDataWorldSync;
typedef struct _FreeSmartphoneDataWorldSyncIface FreeSmartphoneDataWorldSyncIface;

#define FREE_SMARTPHONE_DATA_TYPE_WORLD_SYNC_PROXY (free_smartphone_data_world_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER (free_smartphone_device_idle_notifier_get_type ())
#define FREE_SMARTPHONE_DEVICE_IDLE_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER, FreeSmartphoneDeviceIdleNotifier))
#define FREE_SMARTPHONE_DEVICE_IS_IDLE_NOTIFIER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER))
#define FREE_SMARTPHONE_DEVICE_IDLE_NOTIFIER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER, FreeSmartphoneDeviceIdleNotifierIface))

typedef struct _FreeSmartphoneDeviceIdleNotifier FreeSmartphoneDeviceIdleNotifier;
typedef struct _FreeSmartphoneDeviceIdleNotifierIface FreeSmartphoneDeviceIdleNotifierIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER_PROXY (free_smartphone_device_idle_notifier_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_IDLE_STATE (free_smartphone_device_idle_state_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER_SYNC (free_smartphone_device_idle_notifier_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_IDLE_NOTIFIER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER_SYNC, FreeSmartphoneDeviceIdleNotifierSync))
#define FREE_SMARTPHONE_DEVICE_IS_IDLE_NOTIFIER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER_SYNC))
#define FREE_SMARTPHONE_DEVICE_IDLE_NOTIFIER_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER_SYNC, FreeSmartphoneDeviceIdleNotifierSyncIface))

typedef struct _FreeSmartphoneDeviceIdleNotifierSync FreeSmartphoneDeviceIdleNotifierSync;
typedef struct _FreeSmartphoneDeviceIdleNotifierSyncIface FreeSmartphoneDeviceIdleNotifierSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_IDLE_NOTIFIER_SYNC_PROXY (free_smartphone_device_idle_notifier_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY (free_smartphone_device_display_get_type ())
#define FREE_SMARTPHONE_DEVICE_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY, FreeSmartphoneDeviceDisplay))
#define FREE_SMARTPHONE_DEVICE_IS_DISPLAY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY))
#define FREE_SMARTPHONE_DEVICE_DISPLAY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY, FreeSmartphoneDeviceDisplayIface))

typedef struct _FreeSmartphoneDeviceDisplay FreeSmartphoneDeviceDisplay;
typedef struct _FreeSmartphoneDeviceDisplayIface FreeSmartphoneDeviceDisplayIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY_PROXY (free_smartphone_device_display_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY_SYNC (free_smartphone_device_display_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_DISPLAY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY_SYNC, FreeSmartphoneDeviceDisplaySync))
#define FREE_SMARTPHONE_DEVICE_IS_DISPLAY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY_SYNC))
#define FREE_SMARTPHONE_DEVICE_DISPLAY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY_SYNC, FreeSmartphoneDeviceDisplaySyncIface))

typedef struct _FreeSmartphoneDeviceDisplaySync FreeSmartphoneDeviceDisplaySync;
typedef struct _FreeSmartphoneDeviceDisplaySyncIface FreeSmartphoneDeviceDisplaySyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_DISPLAY_SYNC_PROXY (free_smartphone_device_display_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_LED (free_smartphone_device_led_get_type ())
#define FREE_SMARTPHONE_DEVICE_LED(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_LED, FreeSmartphoneDeviceLED))
#define FREE_SMARTPHONE_DEVICE_IS_LED(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_LED))
#define FREE_SMARTPHONE_DEVICE_LED_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_LED, FreeSmartphoneDeviceLEDIface))

typedef struct _FreeSmartphoneDeviceLED FreeSmartphoneDeviceLED;
typedef struct _FreeSmartphoneDeviceLEDIface FreeSmartphoneDeviceLEDIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_LED_PROXY (free_smartphone_device_led_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_LED_SYNC (free_smartphone_device_led_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_LED_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_LED_SYNC, FreeSmartphoneDeviceLEDSync))
#define FREE_SMARTPHONE_DEVICE_IS_LED_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_LED_SYNC))
#define FREE_SMARTPHONE_DEVICE_LED_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_LED_SYNC, FreeSmartphoneDeviceLEDSyncIface))

typedef struct _FreeSmartphoneDeviceLEDSync FreeSmartphoneDeviceLEDSync;
typedef struct _FreeSmartphoneDeviceLEDSyncIface FreeSmartphoneDeviceLEDSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_LED_SYNC_PROXY (free_smartphone_device_led_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR (free_smartphone_device_vibrator_get_type ())
#define FREE_SMARTPHONE_DEVICE_VIBRATOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR, FreeSmartphoneDeviceVibrator))
#define FREE_SMARTPHONE_DEVICE_IS_VIBRATOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR))
#define FREE_SMARTPHONE_DEVICE_VIBRATOR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR, FreeSmartphoneDeviceVibratorIface))

typedef struct _FreeSmartphoneDeviceVibrator FreeSmartphoneDeviceVibrator;
typedef struct _FreeSmartphoneDeviceVibratorIface FreeSmartphoneDeviceVibratorIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR_PROXY (free_smartphone_device_vibrator_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR_SYNC (free_smartphone_device_vibrator_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_VIBRATOR_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR_SYNC, FreeSmartphoneDeviceVibratorSync))
#define FREE_SMARTPHONE_DEVICE_IS_VIBRATOR_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR_SYNC))
#define FREE_SMARTPHONE_DEVICE_VIBRATOR_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR_SYNC, FreeSmartphoneDeviceVibratorSyncIface))

typedef struct _FreeSmartphoneDeviceVibratorSync FreeSmartphoneDeviceVibratorSync;
typedef struct _FreeSmartphoneDeviceVibratorSyncIface FreeSmartphoneDeviceVibratorSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_VIBRATOR_SYNC_PROXY (free_smartphone_device_vibrator_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_AUDIO (free_smartphone_device_audio_get_type ())
#define FREE_SMARTPHONE_DEVICE_AUDIO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AUDIO, FreeSmartphoneDeviceAudio))
#define FREE_SMARTPHONE_DEVICE_IS_AUDIO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AUDIO))
#define FREE_SMARTPHONE_DEVICE_AUDIO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AUDIO, FreeSmartphoneDeviceAudioIface))

typedef struct _FreeSmartphoneDeviceAudio FreeSmartphoneDeviceAudio;
typedef struct _FreeSmartphoneDeviceAudioIface FreeSmartphoneDeviceAudioIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_AUDIO_PROXY (free_smartphone_device_audio_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_AUDIO_SYNC (free_smartphone_device_audio_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_AUDIO_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AUDIO_SYNC, FreeSmartphoneDeviceAudioSync))
#define FREE_SMARTPHONE_DEVICE_IS_AUDIO_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AUDIO_SYNC))
#define FREE_SMARTPHONE_DEVICE_AUDIO_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AUDIO_SYNC, FreeSmartphoneDeviceAudioSyncIface))

typedef struct _FreeSmartphoneDeviceAudioSync FreeSmartphoneDeviceAudioSync;
typedef struct _FreeSmartphoneDeviceAudioSyncIface FreeSmartphoneDeviceAudioSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_AUDIO_SYNC_PROXY (free_smartphone_device_audio_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION (free_smartphone_device_orientation_get_type ())
#define FREE_SMARTPHONE_DEVICE_ORIENTATION(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION, FreeSmartphoneDeviceOrientation))
#define FREE_SMARTPHONE_DEVICE_IS_ORIENTATION(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION))
#define FREE_SMARTPHONE_DEVICE_ORIENTATION_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION, FreeSmartphoneDeviceOrientationIface))

typedef struct _FreeSmartphoneDeviceOrientation FreeSmartphoneDeviceOrientation;
typedef struct _FreeSmartphoneDeviceOrientationIface FreeSmartphoneDeviceOrientationIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION_PROXY (free_smartphone_device_orientation_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION_SYNC (free_smartphone_device_orientation_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_ORIENTATION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION_SYNC, FreeSmartphoneDeviceOrientationSync))
#define FREE_SMARTPHONE_DEVICE_IS_ORIENTATION_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION_SYNC))
#define FREE_SMARTPHONE_DEVICE_ORIENTATION_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION_SYNC, FreeSmartphoneDeviceOrientationSyncIface))

typedef struct _FreeSmartphoneDeviceOrientationSync FreeSmartphoneDeviceOrientationSync;
typedef struct _FreeSmartphoneDeviceOrientationSyncIface FreeSmartphoneDeviceOrientationSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_ORIENTATION_SYNC_PROXY (free_smartphone_device_orientation_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY (free_smartphone_device_proximity_get_type ())
#define FREE_SMARTPHONE_DEVICE_PROXIMITY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY, FreeSmartphoneDeviceProximity))
#define FREE_SMARTPHONE_DEVICE_IS_PROXIMITY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY))
#define FREE_SMARTPHONE_DEVICE_PROXIMITY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY, FreeSmartphoneDeviceProximityIface))

typedef struct _FreeSmartphoneDeviceProximity FreeSmartphoneDeviceProximity;
typedef struct _FreeSmartphoneDeviceProximityIface FreeSmartphoneDeviceProximityIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY_PROXY (free_smartphone_device_proximity_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY_SYNC (free_smartphone_device_proximity_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_PROXIMITY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY_SYNC, FreeSmartphoneDeviceProximitySync))
#define FREE_SMARTPHONE_DEVICE_IS_PROXIMITY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY_SYNC))
#define FREE_SMARTPHONE_DEVICE_PROXIMITY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY_SYNC, FreeSmartphoneDeviceProximitySyncIface))

typedef struct _FreeSmartphoneDeviceProximitySync FreeSmartphoneDeviceProximitySync;
typedef struct _FreeSmartphoneDeviceProximitySyncIface FreeSmartphoneDeviceProximitySyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_PROXIMITY_SYNC_PROXY (free_smartphone_device_proximity_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY (free_smartphone_device_power_supply_get_type ())
#define FREE_SMARTPHONE_DEVICE_POWER_SUPPLY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY, FreeSmartphoneDevicePowerSupply))
#define FREE_SMARTPHONE_DEVICE_IS_POWER_SUPPLY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY))
#define FREE_SMARTPHONE_DEVICE_POWER_SUPPLY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY, FreeSmartphoneDevicePowerSupplyIface))

typedef struct _FreeSmartphoneDevicePowerSupply FreeSmartphoneDevicePowerSupply;
typedef struct _FreeSmartphoneDevicePowerSupplyIface FreeSmartphoneDevicePowerSupplyIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY_PROXY (free_smartphone_device_power_supply_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_STATUS (free_smartphone_device_power_status_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY_SYNC (free_smartphone_device_power_supply_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_POWER_SUPPLY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY_SYNC, FreeSmartphoneDevicePowerSupplySync))
#define FREE_SMARTPHONE_DEVICE_IS_POWER_SUPPLY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY_SYNC))
#define FREE_SMARTPHONE_DEVICE_POWER_SUPPLY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY_SYNC, FreeSmartphoneDevicePowerSupplySyncIface))

typedef struct _FreeSmartphoneDevicePowerSupplySync FreeSmartphoneDevicePowerSupplySync;
typedef struct _FreeSmartphoneDevicePowerSupplySyncIface FreeSmartphoneDevicePowerSupplySyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_SUPPLY_SYNC_PROXY (free_smartphone_device_power_supply_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK (free_smartphone_device_realtime_clock_get_type ())
#define FREE_SMARTPHONE_DEVICE_REALTIME_CLOCK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK, FreeSmartphoneDeviceRealtimeClock))
#define FREE_SMARTPHONE_DEVICE_IS_REALTIME_CLOCK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK))
#define FREE_SMARTPHONE_DEVICE_REALTIME_CLOCK_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK, FreeSmartphoneDeviceRealtimeClockIface))

typedef struct _FreeSmartphoneDeviceRealtimeClock FreeSmartphoneDeviceRealtimeClock;
typedef struct _FreeSmartphoneDeviceRealtimeClockIface FreeSmartphoneDeviceRealtimeClockIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK_PROXY (free_smartphone_device_realtime_clock_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK_SYNC (free_smartphone_device_realtime_clock_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_REALTIME_CLOCK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK_SYNC, FreeSmartphoneDeviceRealtimeClockSync))
#define FREE_SMARTPHONE_DEVICE_IS_REALTIME_CLOCK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK_SYNC))
#define FREE_SMARTPHONE_DEVICE_REALTIME_CLOCK_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK_SYNC, FreeSmartphoneDeviceRealtimeClockSyncIface))

typedef struct _FreeSmartphoneDeviceRealtimeClockSync FreeSmartphoneDeviceRealtimeClockSync;
typedef struct _FreeSmartphoneDeviceRealtimeClockSyncIface FreeSmartphoneDeviceRealtimeClockSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_REALTIME_CLOCK_SYNC_PROXY (free_smartphone_device_realtime_clock_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL (free_smartphone_device_power_control_get_type ())
#define FREE_SMARTPHONE_DEVICE_POWER_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL, FreeSmartphoneDevicePowerControl))
#define FREE_SMARTPHONE_DEVICE_IS_POWER_CONTROL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL))
#define FREE_SMARTPHONE_DEVICE_POWER_CONTROL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL, FreeSmartphoneDevicePowerControlIface))

typedef struct _FreeSmartphoneDevicePowerControl FreeSmartphoneDevicePowerControl;
typedef struct _FreeSmartphoneDevicePowerControlIface FreeSmartphoneDevicePowerControlIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL_PROXY (free_smartphone_device_power_control_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL_SYNC (free_smartphone_device_power_control_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_POWER_CONTROL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL_SYNC, FreeSmartphoneDevicePowerControlSync))
#define FREE_SMARTPHONE_DEVICE_IS_POWER_CONTROL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL_SYNC))
#define FREE_SMARTPHONE_DEVICE_POWER_CONTROL_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL_SYNC, FreeSmartphoneDevicePowerControlSyncIface))

typedef struct _FreeSmartphoneDevicePowerControlSync FreeSmartphoneDevicePowerControlSync;
typedef struct _FreeSmartphoneDevicePowerControlSyncIface FreeSmartphoneDevicePowerControlSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_POWER_CONTROL_SYNC_PROXY (free_smartphone_device_power_control_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_INFO (free_smartphone_device_info_get_type ())
#define FREE_SMARTPHONE_DEVICE_INFO(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INFO, FreeSmartphoneDeviceInfo))
#define FREE_SMARTPHONE_DEVICE_IS_INFO(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INFO))
#define FREE_SMARTPHONE_DEVICE_INFO_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INFO, FreeSmartphoneDeviceInfoIface))

typedef struct _FreeSmartphoneDeviceInfo FreeSmartphoneDeviceInfo;
typedef struct _FreeSmartphoneDeviceInfoIface FreeSmartphoneDeviceInfoIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_INFO_PROXY (free_smartphone_device_info_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_INFO_SYNC (free_smartphone_device_info_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_INFO_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INFO_SYNC, FreeSmartphoneDeviceInfoSync))
#define FREE_SMARTPHONE_DEVICE_IS_INFO_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INFO_SYNC))
#define FREE_SMARTPHONE_DEVICE_INFO_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INFO_SYNC, FreeSmartphoneDeviceInfoSyncIface))

typedef struct _FreeSmartphoneDeviceInfoSync FreeSmartphoneDeviceInfoSync;
typedef struct _FreeSmartphoneDeviceInfoSyncIface FreeSmartphoneDeviceInfoSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_INFO_SYNC_PROXY (free_smartphone_device_info_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_INPUT (free_smartphone_device_input_get_type ())
#define FREE_SMARTPHONE_DEVICE_INPUT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INPUT, FreeSmartphoneDeviceInput))
#define FREE_SMARTPHONE_DEVICE_IS_INPUT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INPUT))
#define FREE_SMARTPHONE_DEVICE_INPUT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INPUT, FreeSmartphoneDeviceInputIface))

typedef struct _FreeSmartphoneDeviceInput FreeSmartphoneDeviceInput;
typedef struct _FreeSmartphoneDeviceInputIface FreeSmartphoneDeviceInputIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_INPUT_PROXY (free_smartphone_device_input_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_INPUT_SYNC (free_smartphone_device_input_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_INPUT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INPUT_SYNC, FreeSmartphoneDeviceInputSync))
#define FREE_SMARTPHONE_DEVICE_IS_INPUT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INPUT_SYNC))
#define FREE_SMARTPHONE_DEVICE_INPUT_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_INPUT_SYNC, FreeSmartphoneDeviceInputSyncIface))

typedef struct _FreeSmartphoneDeviceInputSync FreeSmartphoneDeviceInputSync;
typedef struct _FreeSmartphoneDeviceInputSyncIface FreeSmartphoneDeviceInputSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_INPUT_SYNC_PROXY (free_smartphone_device_input_sync_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_INPUT_STATE (free_smartphone_device_input_state_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_SOUND_STATE (free_smartphone_device_sound_state_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT (free_smartphone_device_ambient_light_get_type ())
#define FREE_SMARTPHONE_DEVICE_AMBIENT_LIGHT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT, FreeSmartphoneDeviceAmbientLight))
#define FREE_SMARTPHONE_DEVICE_IS_AMBIENT_LIGHT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT))
#define FREE_SMARTPHONE_DEVICE_AMBIENT_LIGHT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT, FreeSmartphoneDeviceAmbientLightIface))

typedef struct _FreeSmartphoneDeviceAmbientLight FreeSmartphoneDeviceAmbientLight;
typedef struct _FreeSmartphoneDeviceAmbientLightIface FreeSmartphoneDeviceAmbientLightIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT_PROXY (free_smartphone_device_ambient_light_proxy_get_type ())

#define FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT_SYNC (free_smartphone_device_ambient_light_sync_get_type ())
#define FREE_SMARTPHONE_DEVICE_AMBIENT_LIGHT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT_SYNC, FreeSmartphoneDeviceAmbientLightSync))
#define FREE_SMARTPHONE_DEVICE_IS_AMBIENT_LIGHT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT_SYNC))
#define FREE_SMARTPHONE_DEVICE_AMBIENT_LIGHT_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT_SYNC, FreeSmartphoneDeviceAmbientLightSyncIface))

typedef struct _FreeSmartphoneDeviceAmbientLightSync FreeSmartphoneDeviceAmbientLightSync;
typedef struct _FreeSmartphoneDeviceAmbientLightSyncIface FreeSmartphoneDeviceAmbientLightSyncIface;

#define FREE_SMARTPHONE_DEVICE_TYPE_AMBIENT_LIGHT_SYNC_PROXY (free_smartphone_device_ambient_light_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_ERROR0 (free_smartphone_gsm_error0_get_type ())
#define FREE_SMARTPHONE_GSM_ERROR0(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_ERROR0, FreeSmartphoneGSMError0))
#define FREE_SMARTPHONE_GSM_IS_ERROR0(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_ERROR0))
#define FREE_SMARTPHONE_GSM_ERROR0_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_ERROR0, FreeSmartphoneGSMError0Iface))

typedef struct _FreeSmartphoneGSMError0 FreeSmartphoneGSMError0;
typedef struct _FreeSmartphoneGSMError0Iface FreeSmartphoneGSMError0Iface;

#define FREE_SMARTPHONE_GSM_TYPE_ERROR0_PROXY (free_smartphone_gsm_error0_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_ERROR0_SYNC (free_smartphone_gsm_error0_sync_get_type ())
#define FREE_SMARTPHONE_GSM_ERROR0_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_ERROR0_SYNC, FreeSmartphoneGSMError0Sync))
#define FREE_SMARTPHONE_GSM_IS_ERROR0_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_ERROR0_SYNC))
#define FREE_SMARTPHONE_GSM_ERROR0_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_ERROR0_SYNC, FreeSmartphoneGSMError0SyncIface))

typedef struct _FreeSmartphoneGSMError0Sync FreeSmartphoneGSMError0Sync;
typedef struct _FreeSmartphoneGSMError0SyncIface FreeSmartphoneGSMError0SyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_ERROR0_SYNC_PROXY (free_smartphone_gsm_error0_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_SIM (free_smartphone_gsm_sim_get_type ())
#define FREE_SMARTPHONE_GSM_SIM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_SIM, FreeSmartphoneGSMSIM))
#define FREE_SMARTPHONE_GSM_IS_SIM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_SIM))
#define FREE_SMARTPHONE_GSM_SIM_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_SIM, FreeSmartphoneGSMSIMIface))

typedef struct _FreeSmartphoneGSMSIM FreeSmartphoneGSMSIM;
typedef struct _FreeSmartphoneGSMSIMIface FreeSmartphoneGSMSIMIface;

#define FREE_SMARTPHONE_GSM_TYPE_SIM_PROXY (free_smartphone_gsm_sim_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_SIM_AUTH_STATUS (free_smartphone_gsm_sim_auth_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_SIM_HOME_ZONE (free_smartphone_gsm_sim_home_zone_get_type ())
typedef struct _FreeSmartphoneGSMSIMHomeZone FreeSmartphoneGSMSIMHomeZone;

#define FREE_SMARTPHONE_GSM_TYPE_SIM_ENTRY (free_smartphone_gsm_sim_entry_get_type ())
typedef struct _FreeSmartphoneGSMSIMEntry FreeSmartphoneGSMSIMEntry;

#define FREE_SMARTPHONE_GSM_TYPE_SIM_SYNC (free_smartphone_gsm_sim_sync_get_type ())
#define FREE_SMARTPHONE_GSM_SIM_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_SIM_SYNC, FreeSmartphoneGSMSIMSync))
#define FREE_SMARTPHONE_GSM_IS_SIM_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_SIM_SYNC))
#define FREE_SMARTPHONE_GSM_SIM_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_SIM_SYNC, FreeSmartphoneGSMSIMSyncIface))

typedef struct _FreeSmartphoneGSMSIMSync FreeSmartphoneGSMSIMSync;
typedef struct _FreeSmartphoneGSMSIMSyncIface FreeSmartphoneGSMSIMSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_SIM_SYNC_PROXY (free_smartphone_gsm_sim_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_MUX (free_smartphone_gsm_mux_get_type ())
#define FREE_SMARTPHONE_GSM_MUX(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_MUX, FreeSmartphoneGSMMUX))
#define FREE_SMARTPHONE_GSM_IS_MUX(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_MUX))
#define FREE_SMARTPHONE_GSM_MUX_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_MUX, FreeSmartphoneGSMMUXIface))

typedef struct _FreeSmartphoneGSMMUX FreeSmartphoneGSMMUX;
typedef struct _FreeSmartphoneGSMMUXIface FreeSmartphoneGSMMUXIface;

#define FREE_SMARTPHONE_GSM_TYPE_MUX_PROXY (free_smartphone_gsm_mux_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_MUX_SYNC (free_smartphone_gsm_mux_sync_get_type ())
#define FREE_SMARTPHONE_GSM_MUX_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_MUX_SYNC, FreeSmartphoneGSMMUXSync))
#define FREE_SMARTPHONE_GSM_IS_MUX_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_MUX_SYNC))
#define FREE_SMARTPHONE_GSM_MUX_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_MUX_SYNC, FreeSmartphoneGSMMUXSyncIface))

typedef struct _FreeSmartphoneGSMMUXSync FreeSmartphoneGSMMUXSync;
typedef struct _FreeSmartphoneGSMMUXSyncIface FreeSmartphoneGSMMUXSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_MUX_SYNC_PROXY (free_smartphone_gsm_mux_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CB (free_smartphone_gsm_cb_get_type ())
#define FREE_SMARTPHONE_GSM_CB(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_CB, FreeSmartphoneGSMCB))
#define FREE_SMARTPHONE_GSM_IS_CB(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_CB))
#define FREE_SMARTPHONE_GSM_CB_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_CB, FreeSmartphoneGSMCBIface))

typedef struct _FreeSmartphoneGSMCB FreeSmartphoneGSMCB;
typedef struct _FreeSmartphoneGSMCBIface FreeSmartphoneGSMCBIface;

#define FREE_SMARTPHONE_GSM_TYPE_CB_PROXY (free_smartphone_gsm_cb_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CB_SYNC (free_smartphone_gsm_cb_sync_get_type ())
#define FREE_SMARTPHONE_GSM_CB_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_CB_SYNC, FreeSmartphoneGSMCBSync))
#define FREE_SMARTPHONE_GSM_IS_CB_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_CB_SYNC))
#define FREE_SMARTPHONE_GSM_CB_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_CB_SYNC, FreeSmartphoneGSMCBSyncIface))

typedef struct _FreeSmartphoneGSMCBSync FreeSmartphoneGSMCBSync;
typedef struct _FreeSmartphoneGSMCBSyncIface FreeSmartphoneGSMCBSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_CB_SYNC_PROXY (free_smartphone_gsm_cb_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_HZ (free_smartphone_gsm_hz_get_type ())
#define FREE_SMARTPHONE_GSM_HZ(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_HZ, FreeSmartphoneGSMHZ))
#define FREE_SMARTPHONE_GSM_IS_HZ(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_HZ))
#define FREE_SMARTPHONE_GSM_HZ_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_HZ, FreeSmartphoneGSMHZIface))

typedef struct _FreeSmartphoneGSMHZ FreeSmartphoneGSMHZ;
typedef struct _FreeSmartphoneGSMHZIface FreeSmartphoneGSMHZIface;

#define FREE_SMARTPHONE_GSM_TYPE_HZ_PROXY (free_smartphone_gsm_hz_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_HZ_SYNC (free_smartphone_gsm_hz_sync_get_type ())
#define FREE_SMARTPHONE_GSM_HZ_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_HZ_SYNC, FreeSmartphoneGSMHZSync))
#define FREE_SMARTPHONE_GSM_IS_HZ_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_HZ_SYNC))
#define FREE_SMARTPHONE_GSM_HZ_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_HZ_SYNC, FreeSmartphoneGSMHZSyncIface))

typedef struct _FreeSmartphoneGSMHZSync FreeSmartphoneGSMHZSync;
typedef struct _FreeSmartphoneGSMHZSyncIface FreeSmartphoneGSMHZSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_HZ_SYNC_PROXY (free_smartphone_gsm_hz_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL (free_smartphone_gsm_voice_mail_get_type ())
#define FREE_SMARTPHONE_GSM_VOICE_MAIL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL, FreeSmartphoneGSMVoiceMail))
#define FREE_SMARTPHONE_GSM_IS_VOICE_MAIL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL))
#define FREE_SMARTPHONE_GSM_VOICE_MAIL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL, FreeSmartphoneGSMVoiceMailIface))

typedef struct _FreeSmartphoneGSMVoiceMail FreeSmartphoneGSMVoiceMail;
typedef struct _FreeSmartphoneGSMVoiceMailIface FreeSmartphoneGSMVoiceMailIface;

#define FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL_PROXY (free_smartphone_gsm_voice_mail_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL_SYNC (free_smartphone_gsm_voice_mail_sync_get_type ())
#define FREE_SMARTPHONE_GSM_VOICE_MAIL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL_SYNC, FreeSmartphoneGSMVoiceMailSync))
#define FREE_SMARTPHONE_GSM_IS_VOICE_MAIL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL_SYNC))
#define FREE_SMARTPHONE_GSM_VOICE_MAIL_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL_SYNC, FreeSmartphoneGSMVoiceMailSyncIface))

typedef struct _FreeSmartphoneGSMVoiceMailSync FreeSmartphoneGSMVoiceMailSync;
typedef struct _FreeSmartphoneGSMVoiceMailSyncIface FreeSmartphoneGSMVoiceMailSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_VOICE_MAIL_SYNC_PROXY (free_smartphone_gsm_voice_mail_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CIPHER_STATUS (free_smartphone_gsm_cipher_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_PDP (free_smartphone_gsm_pdp_get_type ())
#define FREE_SMARTPHONE_GSM_PDP(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_PDP, FreeSmartphoneGSMPDP))
#define FREE_SMARTPHONE_GSM_IS_PDP(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_PDP))
#define FREE_SMARTPHONE_GSM_PDP_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_PDP, FreeSmartphoneGSMPDPIface))

typedef struct _FreeSmartphoneGSMPDP FreeSmartphoneGSMPDP;
typedef struct _FreeSmartphoneGSMPDPIface FreeSmartphoneGSMPDPIface;

#define FREE_SMARTPHONE_GSM_TYPE_PDP_PROXY (free_smartphone_gsm_pdp_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CONTEXT_STATUS (free_smartphone_gsm_context_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_PDP_SYNC (free_smartphone_gsm_pdp_sync_get_type ())
#define FREE_SMARTPHONE_GSM_PDP_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_PDP_SYNC, FreeSmartphoneGSMPDPSync))
#define FREE_SMARTPHONE_GSM_IS_PDP_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_PDP_SYNC))
#define FREE_SMARTPHONE_GSM_PDP_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_PDP_SYNC, FreeSmartphoneGSMPDPSyncIface))

typedef struct _FreeSmartphoneGSMPDPSync FreeSmartphoneGSMPDPSync;
typedef struct _FreeSmartphoneGSMPDPSyncIface FreeSmartphoneGSMPDPSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_PDP_SYNC_PROXY (free_smartphone_gsm_pdp_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_MONITOR (free_smartphone_gsm_monitor_get_type ())
#define FREE_SMARTPHONE_GSM_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_MONITOR, FreeSmartphoneGSMMonitor))
#define FREE_SMARTPHONE_GSM_IS_MONITOR(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_MONITOR))
#define FREE_SMARTPHONE_GSM_MONITOR_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_MONITOR, FreeSmartphoneGSMMonitorIface))

typedef struct _FreeSmartphoneGSMMonitor FreeSmartphoneGSMMonitor;
typedef struct _FreeSmartphoneGSMMonitorIface FreeSmartphoneGSMMonitorIface;

#define FREE_SMARTPHONE_GSM_TYPE_MONITOR_PROXY (free_smartphone_gsm_monitor_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_MONITOR_SYNC (free_smartphone_gsm_monitor_sync_get_type ())
#define FREE_SMARTPHONE_GSM_MONITOR_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_MONITOR_SYNC, FreeSmartphoneGSMMonitorSync))
#define FREE_SMARTPHONE_GSM_IS_MONITOR_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_MONITOR_SYNC))
#define FREE_SMARTPHONE_GSM_MONITOR_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_MONITOR_SYNC, FreeSmartphoneGSMMonitorSyncIface))

typedef struct _FreeSmartphoneGSMMonitorSync FreeSmartphoneGSMMonitorSync;
typedef struct _FreeSmartphoneGSMMonitorSyncIface FreeSmartphoneGSMMonitorSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_MONITOR_SYNC_PROXY (free_smartphone_gsm_monitor_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CALL_STATUS (free_smartphone_gsm_call_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CALL (free_smartphone_gsm_call_get_type ())
#define FREE_SMARTPHONE_GSM_CALL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL, FreeSmartphoneGSMCall))
#define FREE_SMARTPHONE_GSM_IS_CALL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL))
#define FREE_SMARTPHONE_GSM_CALL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL, FreeSmartphoneGSMCallIface))

typedef struct _FreeSmartphoneGSMCall FreeSmartphoneGSMCall;
typedef struct _FreeSmartphoneGSMCallIface FreeSmartphoneGSMCallIface;

#define FREE_SMARTPHONE_GSM_TYPE_CALL_PROXY (free_smartphone_gsm_call_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CALL_DETAIL (free_smartphone_gsm_call_detail_get_type ())
typedef struct _FreeSmartphoneGSMCallDetail FreeSmartphoneGSMCallDetail;

#define FREE_SMARTPHONE_GSM_TYPE_CALL_SYNC (free_smartphone_gsm_call_sync_get_type ())
#define FREE_SMARTPHONE_GSM_CALL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_SYNC, FreeSmartphoneGSMCallSync))
#define FREE_SMARTPHONE_GSM_IS_CALL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_SYNC))
#define FREE_SMARTPHONE_GSM_CALL_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_SYNC, FreeSmartphoneGSMCallSyncIface))

typedef struct _FreeSmartphoneGSMCallSync FreeSmartphoneGSMCallSync;
typedef struct _FreeSmartphoneGSMCallSyncIface FreeSmartphoneGSMCallSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_CALL_SYNC_PROXY (free_smartphone_gsm_call_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_USSD_STATUS (free_smartphone_gsm_ussd_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_DEBUG (free_smartphone_gsm_debug_get_type ())
#define FREE_SMARTPHONE_GSM_DEBUG(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_DEBUG, FreeSmartphoneGSMDebug))
#define FREE_SMARTPHONE_GSM_IS_DEBUG(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEBUG))
#define FREE_SMARTPHONE_GSM_DEBUG_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEBUG, FreeSmartphoneGSMDebugIface))

typedef struct _FreeSmartphoneGSMDebug FreeSmartphoneGSMDebug;
typedef struct _FreeSmartphoneGSMDebugIface FreeSmartphoneGSMDebugIface;

#define FREE_SMARTPHONE_GSM_TYPE_DEBUG_PROXY (free_smartphone_gsm_debug_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_DEBUG_SYNC (free_smartphone_gsm_debug_sync_get_type ())
#define FREE_SMARTPHONE_GSM_DEBUG_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_DEBUG_SYNC, FreeSmartphoneGSMDebugSync))
#define FREE_SMARTPHONE_GSM_IS_DEBUG_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEBUG_SYNC))
#define FREE_SMARTPHONE_GSM_DEBUG_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEBUG_SYNC, FreeSmartphoneGSMDebugSyncIface))

typedef struct _FreeSmartphoneGSMDebugSync FreeSmartphoneGSMDebugSync;
typedef struct _FreeSmartphoneGSMDebugSyncIface FreeSmartphoneGSMDebugSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_DEBUG_SYNC_PROXY (free_smartphone_gsm_debug_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_DEVICE_STATUS (free_smartphone_gsm_device_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_SMS (free_smartphone_gsm_sms_get_type ())
#define FREE_SMARTPHONE_GSM_SMS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_SMS, FreeSmartphoneGSMSMS))
#define FREE_SMARTPHONE_GSM_IS_SMS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_SMS))
#define FREE_SMARTPHONE_GSM_SMS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_SMS, FreeSmartphoneGSMSMSIface))

typedef struct _FreeSmartphoneGSMSMS FreeSmartphoneGSMSMS;
typedef struct _FreeSmartphoneGSMSMSIface FreeSmartphoneGSMSMSIface;

#define FREE_SMARTPHONE_GSM_TYPE_SMS_PROXY (free_smartphone_gsm_sms_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_SIM_MESSAGE (free_smartphone_gsm_sim_message_get_type ())
typedef struct _FreeSmartphoneGSMSIMMessage FreeSmartphoneGSMSIMMessage;

#define FREE_SMARTPHONE_GSM_TYPE_SMS_SYNC (free_smartphone_gsm_sms_sync_get_type ())
#define FREE_SMARTPHONE_GSM_SMS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_SMS_SYNC, FreeSmartphoneGSMSMSSync))
#define FREE_SMARTPHONE_GSM_IS_SMS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_SMS_SYNC))
#define FREE_SMARTPHONE_GSM_SMS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_SMS_SYNC, FreeSmartphoneGSMSMSSyncIface))

typedef struct _FreeSmartphoneGSMSMSSync FreeSmartphoneGSMSMSSync;
typedef struct _FreeSmartphoneGSMSMSSyncIface FreeSmartphoneGSMSMSSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_SMS_SYNC_PROXY (free_smartphone_gsm_sms_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_NETWORK (free_smartphone_gsm_network_get_type ())
#define FREE_SMARTPHONE_GSM_NETWORK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_NETWORK, FreeSmartphoneGSMNetwork))
#define FREE_SMARTPHONE_GSM_IS_NETWORK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_NETWORK))
#define FREE_SMARTPHONE_GSM_NETWORK_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_NETWORK, FreeSmartphoneGSMNetworkIface))

typedef struct _FreeSmartphoneGSMNetwork FreeSmartphoneGSMNetwork;
typedef struct _FreeSmartphoneGSMNetworkIface FreeSmartphoneGSMNetworkIface;

#define FREE_SMARTPHONE_GSM_TYPE_NETWORK_PROXY (free_smartphone_gsm_network_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_NETWORK_PROVIDER (free_smartphone_gsm_network_provider_get_type ())
typedef struct _FreeSmartphoneGSMNetworkProvider FreeSmartphoneGSMNetworkProvider;

#define FREE_SMARTPHONE_GSM_TYPE_CALLING_IDENTIFICATION_STATUS (free_smartphone_gsm_calling_identification_status_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_NETWORK_SYNC (free_smartphone_gsm_network_sync_get_type ())
#define FREE_SMARTPHONE_GSM_NETWORK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_NETWORK_SYNC, FreeSmartphoneGSMNetworkSync))
#define FREE_SMARTPHONE_GSM_IS_NETWORK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_NETWORK_SYNC))
#define FREE_SMARTPHONE_GSM_NETWORK_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_NETWORK_SYNC, FreeSmartphoneGSMNetworkSyncIface))

typedef struct _FreeSmartphoneGSMNetworkSync FreeSmartphoneGSMNetworkSync;
typedef struct _FreeSmartphoneGSMNetworkSyncIface FreeSmartphoneGSMNetworkSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_NETWORK_SYNC_PROXY (free_smartphone_gsm_network_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING (free_smartphone_gsm_call_forwarding_get_type ())
#define FREE_SMARTPHONE_GSM_CALL_FORWARDING(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING, FreeSmartphoneGSMCallForwarding))
#define FREE_SMARTPHONE_GSM_IS_CALL_FORWARDING(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING))
#define FREE_SMARTPHONE_GSM_CALL_FORWARDING_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING, FreeSmartphoneGSMCallForwardingIface))

typedef struct _FreeSmartphoneGSMCallForwarding FreeSmartphoneGSMCallForwarding;
typedef struct _FreeSmartphoneGSMCallForwardingIface FreeSmartphoneGSMCallForwardingIface;

#define FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING_PROXY (free_smartphone_gsm_call_forwarding_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING_SYNC (free_smartphone_gsm_call_forwarding_sync_get_type ())
#define FREE_SMARTPHONE_GSM_CALL_FORWARDING_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING_SYNC, FreeSmartphoneGSMCallForwardingSync))
#define FREE_SMARTPHONE_GSM_IS_CALL_FORWARDING_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING_SYNC))
#define FREE_SMARTPHONE_GSM_CALL_FORWARDING_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING_SYNC, FreeSmartphoneGSMCallForwardingSyncIface))

typedef struct _FreeSmartphoneGSMCallForwardingSync FreeSmartphoneGSMCallForwardingSync;
typedef struct _FreeSmartphoneGSMCallForwardingSyncIface FreeSmartphoneGSMCallForwardingSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_CALL_FORWARDING_SYNC_PROXY (free_smartphone_gsm_call_forwarding_sync_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_DEVICE (free_smartphone_gsm_device_get_type ())
#define FREE_SMARTPHONE_GSM_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_DEVICE, FreeSmartphoneGSMDevice))
#define FREE_SMARTPHONE_GSM_IS_DEVICE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEVICE))
#define FREE_SMARTPHONE_GSM_DEVICE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEVICE, FreeSmartphoneGSMDeviceIface))

typedef struct _FreeSmartphoneGSMDevice FreeSmartphoneGSMDevice;
typedef struct _FreeSmartphoneGSMDeviceIface FreeSmartphoneGSMDeviceIface;

#define FREE_SMARTPHONE_GSM_TYPE_DEVICE_PROXY (free_smartphone_gsm_device_proxy_get_type ())

#define FREE_SMARTPHONE_GSM_TYPE_DEVICE_SYNC (free_smartphone_gsm_device_sync_get_type ())
#define FREE_SMARTPHONE_GSM_DEVICE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_GSM_TYPE_DEVICE_SYNC, FreeSmartphoneGSMDeviceSync))
#define FREE_SMARTPHONE_GSM_IS_DEVICE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEVICE_SYNC))
#define FREE_SMARTPHONE_GSM_DEVICE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_GSM_TYPE_DEVICE_SYNC, FreeSmartphoneGSMDeviceSyncIface))

typedef struct _FreeSmartphoneGSMDeviceSync FreeSmartphoneGSMDeviceSync;
typedef struct _FreeSmartphoneGSMDeviceSyncIface FreeSmartphoneGSMDeviceSyncIface;

#define FREE_SMARTPHONE_GSM_TYPE_DEVICE_SYNC_PROXY (free_smartphone_gsm_device_sync_proxy_get_type ())

#define FREE_SMARTPHONE_TIME_TYPE_WAKEUP_ALARM (free_smartphone_time_wakeup_alarm_get_type ())
typedef struct _FreeSmartphoneTimeWakeupAlarm FreeSmartphoneTimeWakeupAlarm;

#define FREE_SMARTPHONE_TIME_TYPE_ALARM (free_smartphone_time_alarm_get_type ())
#define FREE_SMARTPHONE_TIME_ALARM(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TIME_TYPE_ALARM, FreeSmartphoneTimeAlarm))
#define FREE_SMARTPHONE_TIME_IS_ALARM(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TIME_TYPE_ALARM))
#define FREE_SMARTPHONE_TIME_ALARM_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TIME_TYPE_ALARM, FreeSmartphoneTimeAlarmIface))

typedef struct _FreeSmartphoneTimeAlarm FreeSmartphoneTimeAlarm;
typedef struct _FreeSmartphoneTimeAlarmIface FreeSmartphoneTimeAlarmIface;

#define FREE_SMARTPHONE_TIME_TYPE_ALARM_PROXY (free_smartphone_time_alarm_proxy_get_type ())

#define FREE_SMARTPHONE_TIME_TYPE_ALARM_SYNC (free_smartphone_time_alarm_sync_get_type ())
#define FREE_SMARTPHONE_TIME_ALARM_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_TIME_TYPE_ALARM_SYNC, FreeSmartphoneTimeAlarmSync))
#define FREE_SMARTPHONE_TIME_IS_ALARM_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_TIME_TYPE_ALARM_SYNC))
#define FREE_SMARTPHONE_TIME_ALARM_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_TIME_TYPE_ALARM_SYNC, FreeSmartphoneTimeAlarmSyncIface))

typedef struct _FreeSmartphoneTimeAlarmSync FreeSmartphoneTimeAlarmSync;
typedef struct _FreeSmartphoneTimeAlarmSyncIface FreeSmartphoneTimeAlarmSyncIface;

#define FREE_SMARTPHONE_TIME_TYPE_ALARM_SYNC_PROXY (free_smartphone_time_alarm_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_FIELDS (free_smartphone_pim_fields_get_type ())
#define FREE_SMARTPHONE_PIM_FIELDS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_FIELDS, FreeSmartphonePIMFields))
#define FREE_SMARTPHONE_PIM_IS_FIELDS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_FIELDS))
#define FREE_SMARTPHONE_PIM_FIELDS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_FIELDS, FreeSmartphonePIMFieldsIface))

typedef struct _FreeSmartphonePIMFields FreeSmartphonePIMFields;
typedef struct _FreeSmartphonePIMFieldsIface FreeSmartphonePIMFieldsIface;

#define FREE_SMARTPHONE_PIM_TYPE_FIELDS_PROXY (free_smartphone_pim_fields_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_FIELDS_SYNC (free_smartphone_pim_fields_sync_get_type ())
#define FREE_SMARTPHONE_PIM_FIELDS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_FIELDS_SYNC, FreeSmartphonePIMFieldsSync))
#define FREE_SMARTPHONE_PIM_IS_FIELDS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_FIELDS_SYNC))
#define FREE_SMARTPHONE_PIM_FIELDS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_FIELDS_SYNC, FreeSmartphonePIMFieldsSyncIface))

typedef struct _FreeSmartphonePIMFieldsSync FreeSmartphonePIMFieldsSync;
typedef struct _FreeSmartphonePIMFieldsSyncIface FreeSmartphonePIMFieldsSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_FIELDS_SYNC_PROXY (free_smartphone_pim_fields_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY (free_smartphone_pim_note_query_get_type ())
#define FREE_SMARTPHONE_PIM_NOTE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY, FreeSmartphonePIMNoteQuery))
#define FREE_SMARTPHONE_PIM_IS_NOTE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY))
#define FREE_SMARTPHONE_PIM_NOTE_QUERY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY, FreeSmartphonePIMNoteQueryIface))

typedef struct _FreeSmartphonePIMNoteQuery FreeSmartphonePIMNoteQuery;
typedef struct _FreeSmartphonePIMNoteQueryIface FreeSmartphonePIMNoteQueryIface;

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY_PROXY (free_smartphone_pim_note_query_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY_SYNC (free_smartphone_pim_note_query_sync_get_type ())
#define FREE_SMARTPHONE_PIM_NOTE_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY_SYNC, FreeSmartphonePIMNoteQuerySync))
#define FREE_SMARTPHONE_PIM_IS_NOTE_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY_SYNC))
#define FREE_SMARTPHONE_PIM_NOTE_QUERY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY_SYNC, FreeSmartphonePIMNoteQuerySyncIface))

typedef struct _FreeSmartphonePIMNoteQuerySync FreeSmartphonePIMNoteQuerySync;
typedef struct _FreeSmartphonePIMNoteQuerySyncIface FreeSmartphonePIMNoteQuerySyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_QUERY_SYNC_PROXY (free_smartphone_pim_note_query_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY (free_smartphone_pim_task_query_get_type ())
#define FREE_SMARTPHONE_PIM_TASK_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY, FreeSmartphonePIMTaskQuery))
#define FREE_SMARTPHONE_PIM_IS_TASK_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY))
#define FREE_SMARTPHONE_PIM_TASK_QUERY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY, FreeSmartphonePIMTaskQueryIface))

typedef struct _FreeSmartphonePIMTaskQuery FreeSmartphonePIMTaskQuery;
typedef struct _FreeSmartphonePIMTaskQueryIface FreeSmartphonePIMTaskQueryIface;

#define FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY_PROXY (free_smartphone_pim_task_query_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY_SYNC (free_smartphone_pim_task_query_sync_get_type ())
#define FREE_SMARTPHONE_PIM_TASK_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY_SYNC, FreeSmartphonePIMTaskQuerySync))
#define FREE_SMARTPHONE_PIM_IS_TASK_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY_SYNC))
#define FREE_SMARTPHONE_PIM_TASK_QUERY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY_SYNC, FreeSmartphonePIMTaskQuerySyncIface))

typedef struct _FreeSmartphonePIMTaskQuerySync FreeSmartphonePIMTaskQuerySync;
typedef struct _FreeSmartphonePIMTaskQuerySyncIface FreeSmartphonePIMTaskQuerySyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_TASK_QUERY_SYNC_PROXY (free_smartphone_pim_task_query_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE (free_smartphone_pim_message_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE, FreeSmartphonePIMMessage))
#define FREE_SMARTPHONE_PIM_IS_MESSAGE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE))
#define FREE_SMARTPHONE_PIM_MESSAGE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE, FreeSmartphonePIMMessageIface))

typedef struct _FreeSmartphonePIMMessage FreeSmartphonePIMMessage;
typedef struct _FreeSmartphonePIMMessageIface FreeSmartphonePIMMessageIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_PROXY (free_smartphone_pim_message_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_SYNC (free_smartphone_pim_message_sync_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_SYNC, FreeSmartphonePIMMessageSync))
#define FREE_SMARTPHONE_PIM_IS_MESSAGE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_SYNC))
#define FREE_SMARTPHONE_PIM_MESSAGE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_SYNC, FreeSmartphonePIMMessageSyncIface))

typedef struct _FreeSmartphonePIMMessageSync FreeSmartphonePIMMessageSync;
typedef struct _FreeSmartphonePIMMessageSyncIface FreeSmartphonePIMMessageSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_SYNC_PROXY (free_smartphone_pim_message_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY (free_smartphone_pim_date_query_get_type ())
#define FREE_SMARTPHONE_PIM_DATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY, FreeSmartphonePIMDateQuery))
#define FREE_SMARTPHONE_PIM_IS_DATE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY))
#define FREE_SMARTPHONE_PIM_DATE_QUERY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY, FreeSmartphonePIMDateQueryIface))

typedef struct _FreeSmartphonePIMDateQuery FreeSmartphonePIMDateQuery;
typedef struct _FreeSmartphonePIMDateQueryIface FreeSmartphonePIMDateQueryIface;

#define FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY_PROXY (free_smartphone_pim_date_query_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY_SYNC (free_smartphone_pim_date_query_sync_get_type ())
#define FREE_SMARTPHONE_PIM_DATE_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY_SYNC, FreeSmartphonePIMDateQuerySync))
#define FREE_SMARTPHONE_PIM_IS_DATE_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY_SYNC))
#define FREE_SMARTPHONE_PIM_DATE_QUERY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY_SYNC, FreeSmartphonePIMDateQuerySyncIface))

typedef struct _FreeSmartphonePIMDateQuerySync FreeSmartphonePIMDateQuerySync;
typedef struct _FreeSmartphonePIMDateQuerySyncIface FreeSmartphonePIMDateQuerySyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_DATE_QUERY_SYNC_PROXY (free_smartphone_pim_date_query_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY (free_smartphone_pim_call_query_get_type ())
#define FREE_SMARTPHONE_PIM_CALL_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY, FreeSmartphonePIMCallQuery))
#define FREE_SMARTPHONE_PIM_IS_CALL_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY))
#define FREE_SMARTPHONE_PIM_CALL_QUERY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY, FreeSmartphonePIMCallQueryIface))

typedef struct _FreeSmartphonePIMCallQuery FreeSmartphonePIMCallQuery;
typedef struct _FreeSmartphonePIMCallQueryIface FreeSmartphonePIMCallQueryIface;

#define FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY_PROXY (free_smartphone_pim_call_query_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY_SYNC (free_smartphone_pim_call_query_sync_get_type ())
#define FREE_SMARTPHONE_PIM_CALL_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY_SYNC, FreeSmartphonePIMCallQuerySync))
#define FREE_SMARTPHONE_PIM_IS_CALL_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY_SYNC))
#define FREE_SMARTPHONE_PIM_CALL_QUERY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY_SYNC, FreeSmartphonePIMCallQuerySyncIface))

typedef struct _FreeSmartphonePIMCallQuerySync FreeSmartphonePIMCallQuerySync;
typedef struct _FreeSmartphonePIMCallQuerySyncIface FreeSmartphonePIMCallQuerySyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_CALL_QUERY_SYNC_PROXY (free_smartphone_pim_call_query_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CONTACTS (free_smartphone_pim_contacts_get_type ())
#define FREE_SMARTPHONE_PIM_CONTACTS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACTS, FreeSmartphonePIMContacts))
#define FREE_SMARTPHONE_PIM_IS_CONTACTS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACTS))
#define FREE_SMARTPHONE_PIM_CONTACTS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACTS, FreeSmartphonePIMContactsIface))

typedef struct _FreeSmartphonePIMContacts FreeSmartphonePIMContacts;
typedef struct _FreeSmartphonePIMContactsIface FreeSmartphonePIMContactsIface;

#define FREE_SMARTPHONE_PIM_TYPE_CONTACTS_PROXY (free_smartphone_pim_contacts_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CONTACTS_SYNC (free_smartphone_pim_contacts_sync_get_type ())
#define FREE_SMARTPHONE_PIM_CONTACTS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACTS_SYNC, FreeSmartphonePIMContactsSync))
#define FREE_SMARTPHONE_PIM_IS_CONTACTS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACTS_SYNC))
#define FREE_SMARTPHONE_PIM_CONTACTS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACTS_SYNC, FreeSmartphonePIMContactsSyncIface))

typedef struct _FreeSmartphonePIMContactsSync FreeSmartphonePIMContactsSync;
typedef struct _FreeSmartphonePIMContactsSyncIface FreeSmartphonePIMContactsSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_CONTACTS_SYNC_PROXY (free_smartphone_pim_contacts_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGES (free_smartphone_pim_messages_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGES, FreeSmartphonePIMMessages))
#define FREE_SMARTPHONE_PIM_IS_MESSAGES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGES))
#define FREE_SMARTPHONE_PIM_MESSAGES_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGES, FreeSmartphonePIMMessagesIface))

typedef struct _FreeSmartphonePIMMessages FreeSmartphonePIMMessages;
typedef struct _FreeSmartphonePIMMessagesIface FreeSmartphonePIMMessagesIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGES_PROXY (free_smartphone_pim_messages_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGES_SYNC (free_smartphone_pim_messages_sync_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGES_SYNC, FreeSmartphonePIMMessagesSync))
#define FREE_SMARTPHONE_PIM_IS_MESSAGES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGES_SYNC))
#define FREE_SMARTPHONE_PIM_MESSAGES_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGES_SYNC, FreeSmartphonePIMMessagesSyncIface))

typedef struct _FreeSmartphonePIMMessagesSync FreeSmartphonePIMMessagesSync;
typedef struct _FreeSmartphonePIMMessagesSyncIface FreeSmartphonePIMMessagesSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGES_SYNC_PROXY (free_smartphone_pim_messages_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TASK (free_smartphone_pim_task_get_type ())
#define FREE_SMARTPHONE_PIM_TASK(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK, FreeSmartphonePIMTask))
#define FREE_SMARTPHONE_PIM_IS_TASK(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK))
#define FREE_SMARTPHONE_PIM_TASK_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK, FreeSmartphonePIMTaskIface))

typedef struct _FreeSmartphonePIMTask FreeSmartphonePIMTask;
typedef struct _FreeSmartphonePIMTaskIface FreeSmartphonePIMTaskIface;

#define FREE_SMARTPHONE_PIM_TYPE_TASK_PROXY (free_smartphone_pim_task_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TASK_SYNC (free_smartphone_pim_task_sync_get_type ())
#define FREE_SMARTPHONE_PIM_TASK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_SYNC, FreeSmartphonePIMTaskSync))
#define FREE_SMARTPHONE_PIM_IS_TASK_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_SYNC))
#define FREE_SMARTPHONE_PIM_TASK_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASK_SYNC, FreeSmartphonePIMTaskSyncIface))

typedef struct _FreeSmartphonePIMTaskSync FreeSmartphonePIMTaskSync;
typedef struct _FreeSmartphonePIMTaskSyncIface FreeSmartphonePIMTaskSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_TASK_SYNC_PROXY (free_smartphone_pim_task_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER (free_smartphone_pim_message_folder_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGE_FOLDER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER, FreeSmartphonePIMMessageFolder))
#define FREE_SMARTPHONE_PIM_IS_MESSAGE_FOLDER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER))
#define FREE_SMARTPHONE_PIM_MESSAGE_FOLDER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER, FreeSmartphonePIMMessageFolderIface))

typedef struct _FreeSmartphonePIMMessageFolder FreeSmartphonePIMMessageFolder;
typedef struct _FreeSmartphonePIMMessageFolderIface FreeSmartphonePIMMessageFolderIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER_PROXY (free_smartphone_pim_message_folder_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER_SYNC (free_smartphone_pim_message_folder_sync_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGE_FOLDER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER_SYNC, FreeSmartphonePIMMessageFolderSync))
#define FREE_SMARTPHONE_PIM_IS_MESSAGE_FOLDER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER_SYNC))
#define FREE_SMARTPHONE_PIM_MESSAGE_FOLDER_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER_SYNC, FreeSmartphonePIMMessageFolderSyncIface))

typedef struct _FreeSmartphonePIMMessageFolderSync FreeSmartphonePIMMessageFolderSync;
typedef struct _FreeSmartphonePIMMessageFolderSyncIface FreeSmartphonePIMMessageFolderSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_FOLDER_SYNC_PROXY (free_smartphone_pim_message_folder_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CALL (free_smartphone_pim_call_get_type ())
#define FREE_SMARTPHONE_PIM_CALL(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL, FreeSmartphonePIMCall))
#define FREE_SMARTPHONE_PIM_IS_CALL(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL))
#define FREE_SMARTPHONE_PIM_CALL_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL, FreeSmartphonePIMCallIface))

typedef struct _FreeSmartphonePIMCall FreeSmartphonePIMCall;
typedef struct _FreeSmartphonePIMCallIface FreeSmartphonePIMCallIface;

#define FREE_SMARTPHONE_PIM_TYPE_CALL_PROXY (free_smartphone_pim_call_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CALL_SYNC (free_smartphone_pim_call_sync_get_type ())
#define FREE_SMARTPHONE_PIM_CALL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_SYNC, FreeSmartphonePIMCallSync))
#define FREE_SMARTPHONE_PIM_IS_CALL_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_SYNC))
#define FREE_SMARTPHONE_PIM_CALL_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALL_SYNC, FreeSmartphonePIMCallSyncIface))

typedef struct _FreeSmartphonePIMCallSync FreeSmartphonePIMCallSync;
typedef struct _FreeSmartphonePIMCallSyncIface FreeSmartphonePIMCallSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_CALL_SYNC_PROXY (free_smartphone_pim_call_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY (free_smartphone_pim_message_query_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY, FreeSmartphonePIMMessageQuery))
#define FREE_SMARTPHONE_PIM_IS_MESSAGE_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY))
#define FREE_SMARTPHONE_PIM_MESSAGE_QUERY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY, FreeSmartphonePIMMessageQueryIface))

typedef struct _FreeSmartphonePIMMessageQuery FreeSmartphonePIMMessageQuery;
typedef struct _FreeSmartphonePIMMessageQueryIface FreeSmartphonePIMMessageQueryIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY_PROXY (free_smartphone_pim_message_query_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY_SYNC (free_smartphone_pim_message_query_sync_get_type ())
#define FREE_SMARTPHONE_PIM_MESSAGE_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY_SYNC, FreeSmartphonePIMMessageQuerySync))
#define FREE_SMARTPHONE_PIM_IS_MESSAGE_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY_SYNC))
#define FREE_SMARTPHONE_PIM_MESSAGE_QUERY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY_SYNC, FreeSmartphonePIMMessageQuerySyncIface))

typedef struct _FreeSmartphonePIMMessageQuerySync FreeSmartphonePIMMessageQuerySync;
typedef struct _FreeSmartphonePIMMessageQuerySyncIface FreeSmartphonePIMMessageQuerySyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_MESSAGE_QUERY_SYNC_PROXY (free_smartphone_pim_message_query_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT (free_smartphone_pim_contact_get_type ())
#define FREE_SMARTPHONE_PIM_CONTACT(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT, FreeSmartphonePIMContact))
#define FREE_SMARTPHONE_PIM_IS_CONTACT(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT))
#define FREE_SMARTPHONE_PIM_CONTACT_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT, FreeSmartphonePIMContactIface))

typedef struct _FreeSmartphonePIMContact FreeSmartphonePIMContact;
typedef struct _FreeSmartphonePIMContactIface FreeSmartphonePIMContactIface;

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_PROXY (free_smartphone_pim_contact_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_SYNC (free_smartphone_pim_contact_sync_get_type ())
#define FREE_SMARTPHONE_PIM_CONTACT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_SYNC, FreeSmartphonePIMContactSync))
#define FREE_SMARTPHONE_PIM_IS_CONTACT_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_SYNC))
#define FREE_SMARTPHONE_PIM_CONTACT_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_SYNC, FreeSmartphonePIMContactSyncIface))

typedef struct _FreeSmartphonePIMContactSync FreeSmartphonePIMContactSync;
typedef struct _FreeSmartphonePIMContactSyncIface FreeSmartphonePIMContactSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_SYNC_PROXY (free_smartphone_pim_contact_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CALLS (free_smartphone_pim_calls_get_type ())
#define FREE_SMARTPHONE_PIM_CALLS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CALLS, FreeSmartphonePIMCalls))
#define FREE_SMARTPHONE_PIM_IS_CALLS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALLS))
#define FREE_SMARTPHONE_PIM_CALLS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALLS, FreeSmartphonePIMCallsIface))

typedef struct _FreeSmartphonePIMCalls FreeSmartphonePIMCalls;
typedef struct _FreeSmartphonePIMCallsIface FreeSmartphonePIMCallsIface;

#define FREE_SMARTPHONE_PIM_TYPE_CALLS_PROXY (free_smartphone_pim_calls_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CALLS_SYNC (free_smartphone_pim_calls_sync_get_type ())
#define FREE_SMARTPHONE_PIM_CALLS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CALLS_SYNC, FreeSmartphonePIMCallsSync))
#define FREE_SMARTPHONE_PIM_IS_CALLS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALLS_SYNC))
#define FREE_SMARTPHONE_PIM_CALLS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CALLS_SYNC, FreeSmartphonePIMCallsSyncIface))

typedef struct _FreeSmartphonePIMCallsSync FreeSmartphonePIMCallsSync;
typedef struct _FreeSmartphonePIMCallsSyncIface FreeSmartphonePIMCallsSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_CALLS_SYNC_PROXY (free_smartphone_pim_calls_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_DATES (free_smartphone_pim_dates_get_type ())
#define FREE_SMARTPHONE_PIM_DATES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_DATES, FreeSmartphonePIMDates))
#define FREE_SMARTPHONE_PIM_IS_DATES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATES))
#define FREE_SMARTPHONE_PIM_DATES_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATES, FreeSmartphonePIMDatesIface))

typedef struct _FreeSmartphonePIMDates FreeSmartphonePIMDates;
typedef struct _FreeSmartphonePIMDatesIface FreeSmartphonePIMDatesIface;

#define FREE_SMARTPHONE_PIM_TYPE_DATES_PROXY (free_smartphone_pim_dates_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_DATES_SYNC (free_smartphone_pim_dates_sync_get_type ())
#define FREE_SMARTPHONE_PIM_DATES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_DATES_SYNC, FreeSmartphonePIMDatesSync))
#define FREE_SMARTPHONE_PIM_IS_DATES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATES_SYNC))
#define FREE_SMARTPHONE_PIM_DATES_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATES_SYNC, FreeSmartphonePIMDatesSyncIface))

typedef struct _FreeSmartphonePIMDatesSync FreeSmartphonePIMDatesSync;
typedef struct _FreeSmartphonePIMDatesSyncIface FreeSmartphonePIMDatesSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_DATES_SYNC_PROXY (free_smartphone_pim_dates_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_NOTES (free_smartphone_pim_notes_get_type ())
#define FREE_SMARTPHONE_PIM_NOTES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTES, FreeSmartphonePIMNotes))
#define FREE_SMARTPHONE_PIM_IS_NOTES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTES))
#define FREE_SMARTPHONE_PIM_NOTES_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTES, FreeSmartphonePIMNotesIface))

typedef struct _FreeSmartphonePIMNotes FreeSmartphonePIMNotes;
typedef struct _FreeSmartphonePIMNotesIface FreeSmartphonePIMNotesIface;

#define FREE_SMARTPHONE_PIM_TYPE_NOTES_PROXY (free_smartphone_pim_notes_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_NOTES_SYNC (free_smartphone_pim_notes_sync_get_type ())
#define FREE_SMARTPHONE_PIM_NOTES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTES_SYNC, FreeSmartphonePIMNotesSync))
#define FREE_SMARTPHONE_PIM_IS_NOTES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTES_SYNC))
#define FREE_SMARTPHONE_PIM_NOTES_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTES_SYNC, FreeSmartphonePIMNotesSyncIface))

typedef struct _FreeSmartphonePIMNotesSync FreeSmartphonePIMNotesSync;
typedef struct _FreeSmartphonePIMNotesSyncIface FreeSmartphonePIMNotesSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_NOTES_SYNC_PROXY (free_smartphone_pim_notes_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TYPES (free_smartphone_pim_types_get_type ())
#define FREE_SMARTPHONE_PIM_TYPES(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TYPES, FreeSmartphonePIMTypes))
#define FREE_SMARTPHONE_PIM_IS_TYPES(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TYPES))
#define FREE_SMARTPHONE_PIM_TYPES_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TYPES, FreeSmartphonePIMTypesIface))

typedef struct _FreeSmartphonePIMTypes FreeSmartphonePIMTypes;
typedef struct _FreeSmartphonePIMTypesIface FreeSmartphonePIMTypesIface;

#define FREE_SMARTPHONE_PIM_TYPE_TYPES_PROXY (free_smartphone_pim_types_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TYPES_SYNC (free_smartphone_pim_types_sync_get_type ())
#define FREE_SMARTPHONE_PIM_TYPES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TYPES_SYNC, FreeSmartphonePIMTypesSync))
#define FREE_SMARTPHONE_PIM_IS_TYPES_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TYPES_SYNC))
#define FREE_SMARTPHONE_PIM_TYPES_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TYPES_SYNC, FreeSmartphonePIMTypesSyncIface))

typedef struct _FreeSmartphonePIMTypesSync FreeSmartphonePIMTypesSync;
typedef struct _FreeSmartphonePIMTypesSyncIface FreeSmartphonePIMTypesSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_TYPES_SYNC_PROXY (free_smartphone_pim_types_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TASKS (free_smartphone_pim_tasks_get_type ())
#define FREE_SMARTPHONE_PIM_TASKS(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TASKS, FreeSmartphonePIMTasks))
#define FREE_SMARTPHONE_PIM_IS_TASKS(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASKS))
#define FREE_SMARTPHONE_PIM_TASKS_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASKS, FreeSmartphonePIMTasksIface))

typedef struct _FreeSmartphonePIMTasks FreeSmartphonePIMTasks;
typedef struct _FreeSmartphonePIMTasksIface FreeSmartphonePIMTasksIface;

#define FREE_SMARTPHONE_PIM_TYPE_TASKS_PROXY (free_smartphone_pim_tasks_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_TASKS_SYNC (free_smartphone_pim_tasks_sync_get_type ())
#define FREE_SMARTPHONE_PIM_TASKS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_TASKS_SYNC, FreeSmartphonePIMTasksSync))
#define FREE_SMARTPHONE_PIM_IS_TASKS_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASKS_SYNC))
#define FREE_SMARTPHONE_PIM_TASKS_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_TASKS_SYNC, FreeSmartphonePIMTasksSyncIface))

typedef struct _FreeSmartphonePIMTasksSync FreeSmartphonePIMTasksSync;
typedef struct _FreeSmartphonePIMTasksSyncIface FreeSmartphonePIMTasksSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_TASKS_SYNC_PROXY (free_smartphone_pim_tasks_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_NOTE (free_smartphone_pim_note_get_type ())
#define FREE_SMARTPHONE_PIM_NOTE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE, FreeSmartphonePIMNote))
#define FREE_SMARTPHONE_PIM_IS_NOTE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE))
#define FREE_SMARTPHONE_PIM_NOTE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE, FreeSmartphonePIMNoteIface))

typedef struct _FreeSmartphonePIMNote FreeSmartphonePIMNote;
typedef struct _FreeSmartphonePIMNoteIface FreeSmartphonePIMNoteIface;

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_PROXY (free_smartphone_pim_note_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_SYNC (free_smartphone_pim_note_sync_get_type ())
#define FREE_SMARTPHONE_PIM_NOTE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_SYNC, FreeSmartphonePIMNoteSync))
#define FREE_SMARTPHONE_PIM_IS_NOTE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_SYNC))
#define FREE_SMARTPHONE_PIM_NOTE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_NOTE_SYNC, FreeSmartphonePIMNoteSyncIface))

typedef struct _FreeSmartphonePIMNoteSync FreeSmartphonePIMNoteSync;
typedef struct _FreeSmartphonePIMNoteSyncIface FreeSmartphonePIMNoteSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_NOTE_SYNC_PROXY (free_smartphone_pim_note_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_DATE (free_smartphone_pim_date_get_type ())
#define FREE_SMARTPHONE_PIM_DATE(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE, FreeSmartphonePIMDate))
#define FREE_SMARTPHONE_PIM_IS_DATE(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE))
#define FREE_SMARTPHONE_PIM_DATE_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE, FreeSmartphonePIMDateIface))

typedef struct _FreeSmartphonePIMDate FreeSmartphonePIMDate;
typedef struct _FreeSmartphonePIMDateIface FreeSmartphonePIMDateIface;

#define FREE_SMARTPHONE_PIM_TYPE_DATE_PROXY (free_smartphone_pim_date_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_DATE_SYNC (free_smartphone_pim_date_sync_get_type ())
#define FREE_SMARTPHONE_PIM_DATE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_SYNC, FreeSmartphonePIMDateSync))
#define FREE_SMARTPHONE_PIM_IS_DATE_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_SYNC))
#define FREE_SMARTPHONE_PIM_DATE_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_DATE_SYNC, FreeSmartphonePIMDateSyncIface))

typedef struct _FreeSmartphonePIMDateSync FreeSmartphonePIMDateSync;
typedef struct _FreeSmartphonePIMDateSyncIface FreeSmartphonePIMDateSyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_DATE_SYNC_PROXY (free_smartphone_pim_date_sync_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY (free_smartphone_pim_contact_query_get_type ())
#define FREE_SMARTPHONE_PIM_CONTACT_QUERY(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY, FreeSmartphonePIMContactQuery))
#define FREE_SMARTPHONE_PIM_IS_CONTACT_QUERY(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY))
#define FREE_SMARTPHONE_PIM_CONTACT_QUERY_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY, FreeSmartphonePIMContactQueryIface))

typedef struct _FreeSmartphonePIMContactQuery FreeSmartphonePIMContactQuery;
typedef struct _FreeSmartphonePIMContactQueryIface FreeSmartphonePIMContactQueryIface;

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY_PROXY (free_smartphone_pim_contact_query_proxy_get_type ())

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY_SYNC (free_smartphone_pim_contact_query_sync_get_type ())
#define FREE_SMARTPHONE_PIM_CONTACT_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY_SYNC, FreeSmartphonePIMContactQuerySync))
#define FREE_SMARTPHONE_PIM_IS_CONTACT_QUERY_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY_SYNC))
#define FREE_SMARTPHONE_PIM_CONTACT_QUERY_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY_SYNC, FreeSmartphonePIMContactQuerySyncIface))

typedef struct _FreeSmartphonePIMContactQuerySync FreeSmartphonePIMContactQuerySync;
typedef struct _FreeSmartphonePIMContactQuerySyncIface FreeSmartphonePIMContactQuerySyncIface;

#define FREE_SMARTPHONE_PIM_TYPE_CONTACT_QUERY_SYNC_PROXY (free_smartphone_pim_contact_query_sync_proxy_get_type ())

#define FREE_SMARTPHONE_AUDIO_TYPE_MANAGER (free_smartphone_audio_manager_get_type ())
#define FREE_SMARTPHONE_AUDIO_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_AUDIO_TYPE_MANAGER, FreeSmartphoneAudioManager))
#define FREE_SMARTPHONE_AUDIO_IS_MANAGER(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_AUDIO_TYPE_MANAGER))
#define FREE_SMARTPHONE_AUDIO_MANAGER_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_AUDIO_TYPE_MANAGER, FreeSmartphoneAudioManagerIface))

typedef struct _FreeSmartphoneAudioManager FreeSmartphoneAudioManager;
typedef struct _FreeSmartphoneAudioManagerIface FreeSmartphoneAudioManagerIface;

#define FREE_SMARTPHONE_AUDIO_TYPE_MANAGER_PROXY (free_smartphone_audio_manager_proxy_get_type ())

#define FREE_SMARTPHONE_AUDIO_TYPE_MODE (free_smartphone_audio_mode_get_type ())

#define FREE_SMARTPHONE_AUDIO_TYPE_DEVICE (free_smartphone_audio_device_get_type ())

#define FREE_SMARTPHONE_AUDIO_TYPE_CONTROL (free_smartphone_audio_control_get_type ())

#define FREE_SMARTPHONE_AUDIO_TYPE_STREAM (free_smartphone_audio_stream_get_type ())

#define FREE_SMARTPHONE_AUDIO_TYPE_MANAGER_SYNC (free_smartphone_audio_manager_sync_get_type ())
#define FREE_SMARTPHONE_AUDIO_MANAGER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_CAST ((obj), FREE_SMARTPHONE_AUDIO_TYPE_MANAGER_SYNC, FreeSmartphoneAudioManagerSync))
#define FREE_SMARTPHONE_AUDIO_IS_MANAGER_SYNC(obj) (G_TYPE_CHECK_INSTANCE_TYPE ((obj), FREE_SMARTPHONE_AUDIO_TYPE_MANAGER_SYNC))
#define FREE_SMARTPHONE_AUDIO_MANAGER_SYNC_GET_INTERFACE(obj) (G_TYPE_INSTANCE_GET_INTERFACE ((obj), FREE_SMARTPHONE_AUDIO_TYPE_MANAGER_SYNC, FreeSmartphoneAudioManagerSyncIface))

typedef struct _FreeSmartphoneAudioManagerSync FreeSmartphoneAudioManagerSync;
typedef struct _FreeSmartphoneAudioManagerSyncIface FreeSmartphoneAudioManagerSyncIface;

#define FREE_SMARTPHONE_AUDIO_TYPE_MANAGER_SYNC_PROXY (free_smartphone_audio_manager_sync_proxy_get_type ())

struct _FreeSmartphoneError0Iface {
	GTypeInterface parent_iface;
};

struct _FreeSmartphoneError0SyncIface {
	GTypeInterface parent_iface;
};

struct _FreeSmartphoneEventsIface {
	GTypeInterface parent_iface;
	void (*add_rule) (FreeSmartphoneEvents* self, const gchar* rule, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*add_rule_finish) (FreeSmartphoneEvents* self, GAsyncResult* _res_, GError** error);
	void (*remove_rule) (FreeSmartphoneEvents* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*remove_rule_finish) (FreeSmartphoneEvents* self, GAsyncResult* _res_, GError** error);
	void (*trigger_test) (FreeSmartphoneEvents* self, const gchar* name, gboolean value, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*trigger_test_finish) (FreeSmartphoneEvents* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneEventsSyncIface {
	GTypeInterface parent_iface;
	void (*add_rule) (FreeSmartphoneEventsSync* self, const gchar* rule, GError** error);
	void (*remove_rule) (FreeSmartphoneEventsSync* self, const gchar* name, GError** error);
	void (*trigger_test) (FreeSmartphoneEventsSync* self, const gchar* name, gboolean value, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_USAGE_SYSTEM_ACTION_ALIVE,
	FREE_SMARTPHONE_USAGE_SYSTEM_ACTION_SUSPEND,
	FREE_SMARTPHONE_USAGE_SYSTEM_ACTION_RESUME,
	FREE_SMARTPHONE_USAGE_SYSTEM_ACTION_SHUTDOWN,
	FREE_SMARTPHONE_USAGE_SYSTEM_ACTION_REBOOT
} FreeSmartphoneUsageSystemAction;

struct _FreeSmartphonePhoneIface {
	GTypeInterface parent_iface;
	void (*init_protocols) (FreeSmartphonePhone* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*init_protocols_finish) (FreeSmartphonePhone* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*create_call) (FreeSmartphonePhone* self, const gchar* number, const gchar* protocol, gboolean force, GAsyncReadyCallback _callback_, gpointer _user_data_);
	char* (*create_call_finish) (FreeSmartphonePhone* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePhoneSyncIface {
	GTypeInterface parent_iface;
	gchar** (*init_protocols) (FreeSmartphonePhoneSync* self, int* result_length1, GError** error);
	char* (*create_call) (FreeSmartphonePhoneSync* self, const gchar* number, const gchar* protocol, gboolean force, GError** error);
};

struct _FreeSmartphoneNotificationIface {
	GTypeInterface parent_iface;
	void (*alarm) (FreeSmartphoneNotification* self, GError** error);
};

struct _FreeSmartphoneNotificationSyncIface {
	GTypeInterface parent_iface;
	void (*alarm) (FreeSmartphoneNotificationSync* self, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_USAGE_ERROR_POLICY_UNKNOWN,
	FREE_SMARTPHONE_USAGE_ERROR_POLICY_DISABLED,
	FREE_SMARTPHONE_USAGE_ERROR_RESOURCE_UNKNOWN,
	FREE_SMARTPHONE_USAGE_ERROR_RESOURCE_EXISTS,
	FREE_SMARTPHONE_USAGE_ERROR_RESOURCE_IN_USE,
	FREE_SMARTPHONE_USAGE_ERROR_USER_EXISTS,
	FREE_SMARTPHONE_USAGE_ERROR_USER_UNKNOWN
} FreeSmartphoneUsageError;
#define FREE_SMARTPHONE_USAGE_ERROR free_smartphone_usage_error_quark ()
typedef enum  {
	FREE_SMARTPHONE_ERROR_INVALID_PARAMETER,
	FREE_SMARTPHONE_ERROR_INTERNAL_ERROR,
	FREE_SMARTPHONE_ERROR_SYSTEM_ERROR,
	FREE_SMARTPHONE_ERROR_UNSUPPORTED,
	FREE_SMARTPHONE_ERROR_UNAVAILABLE
} FreeSmartphoneError;
#define FREE_SMARTPHONE_ERROR free_smartphone_error_quark ()
typedef enum  {
	FREE_SMARTPHONE_USAGE_RESOURCE_POLICY_AUTO,
	FREE_SMARTPHONE_USAGE_RESOURCE_POLICY_DISABLED,
	FREE_SMARTPHONE_USAGE_RESOURCE_POLICY_ENABLED
} FreeSmartphoneUsageResourcePolicy;

struct _FreeSmartphoneUsageIface {
	GTypeInterface parent_iface;
	void (*register_resource) (FreeSmartphoneUsage* self, const gchar* name, const char* path, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*register_resource_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*unregister_resource) (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*unregister_resource_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*list_resources) (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*list_resources_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_resource_policy) (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneUsageResourcePolicy (*get_resource_policy_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*set_resource_policy) (FreeSmartphoneUsage* self, const gchar* name, FreeSmartphoneUsageResourcePolicy policy, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_resource_policy_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*get_resource_state) (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*get_resource_state_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*get_resource_users) (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_resource_users_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*request_resource) (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*request_resource_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*release_resource) (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*release_resource_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*suspend) (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*suspend_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*resume) (FreeSmartphoneUsage* self, const gchar* source, const gchar* reason, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*resume_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*shutdown) (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*shutdown_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
	void (*reboot) (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*reboot_finish) (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneUsageSyncIface {
	GTypeInterface parent_iface;
	void (*register_resource) (FreeSmartphoneUsageSync* self, const gchar* name, const char* path, GError** error);
	void (*unregister_resource) (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
	gchar** (*list_resources) (FreeSmartphoneUsageSync* self, int* result_length1, GError** error);
	FreeSmartphoneUsageResourcePolicy (*get_resource_policy) (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
	void (*set_resource_policy) (FreeSmartphoneUsageSync* self, const gchar* name, FreeSmartphoneUsageResourcePolicy policy, GError** error);
	gboolean (*get_resource_state) (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
	gchar** (*get_resource_users) (FreeSmartphoneUsageSync* self, const gchar* name, int* result_length1, GError** error);
	void (*request_resource) (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
	void (*release_resource) (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
	void (*suspend) (FreeSmartphoneUsageSync* self, GError** error);
	void (*resume) (FreeSmartphoneUsageSync* self, const gchar* source, const gchar* reason, GError** error);
	void (*shutdown) (FreeSmartphoneUsageSync* self, GError** error);
	void (*reboot) (FreeSmartphoneUsageSync* self, GError** error);
};

struct _FreeSmartphoneLocationIface {
	GTypeInterface parent_iface;
	void (*get_location) (FreeSmartphoneLocation* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_location_finish) (FreeSmartphoneLocation* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneLocationSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_location) (FreeSmartphoneLocationSync* self, GError** error);
};

struct _FreeSmartphonePhoneCallIface {
	GTypeInterface parent_iface;
	void (*get_peer) (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_peer_finish) (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
	void (*initiate) (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*initiate_finish) (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
	void (*activate) (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*activate_finish) (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
	void (*release) (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*release_finish) (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
	void (*get_status) (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_status_finish) (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
	void (*remove) (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*remove_finish) (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePhoneCallSyncIface {
	GTypeInterface parent_iface;
	gchar* (*get_peer) (FreeSmartphonePhoneCallSync* self, GError** error);
	gchar* (*initiate) (FreeSmartphonePhoneCallSync* self, GError** error);
	gchar* (*activate) (FreeSmartphonePhoneCallSync* self, GError** error);
	gchar* (*release) (FreeSmartphonePhoneCallSync* self, GError** error);
	gchar* (*get_status) (FreeSmartphonePhoneCallSync* self, GError** error);
	void (*remove) (FreeSmartphonePhoneCallSync* self, GError** error);
};

struct _FreeSmartphonePreferencesIface {
	GTypeInterface parent_iface;
	void (*get_services) (FreeSmartphonePreferences* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_services_finish) (FreeSmartphonePreferences* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_service) (FreeSmartphonePreferences* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	char* (*get_service_finish) (FreeSmartphonePreferences* self, GAsyncResult* _res_, GError** error);
	void (*get_profiles) (FreeSmartphonePreferences* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_profiles_finish) (FreeSmartphonePreferences* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_profile) (FreeSmartphonePreferences* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_profile_finish) (FreeSmartphonePreferences* self, GAsyncResult* _res_, GError** error);
	void (*set_profile) (FreeSmartphonePreferences* self, const gchar* profile, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_profile_finish) (FreeSmartphonePreferences* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePreferencesSyncIface {
	GTypeInterface parent_iface;
	gchar** (*get_services) (FreeSmartphonePreferencesSync* self, int* result_length1, GError** error);
	char* (*get_service) (FreeSmartphonePreferencesSync* self, const gchar* name, GError** error);
	gchar** (*get_profiles) (FreeSmartphonePreferencesSync* self, int* result_length1, GError** error);
	gchar* (*get_profile) (FreeSmartphonePreferencesSync* self, GError** error);
	void (*set_profile) (FreeSmartphonePreferencesSync* self, const gchar* profile, GError** error);
};

struct _FreeSmartphonePreferencesServiceIface {
	GTypeInterface parent_iface;
	void (*get_keys) (FreeSmartphonePreferencesService* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_keys_finish) (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_value) (FreeSmartphonePreferencesService* self, const gchar* key, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GVariant* (*get_value_finish) (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
	void (*set_value) (FreeSmartphonePreferencesService* self, const gchar* key, GVariant* value, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_value_finish) (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
	void (*is_profilable) (FreeSmartphonePreferencesService* self, const gchar* key, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*is_profilable_finish) (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
	void (*get_type_) (FreeSmartphonePreferencesService* self, const gchar* key, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_type__finish) (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePreferencesServiceSyncIface {
	GTypeInterface parent_iface;
	gchar** (*get_keys) (FreeSmartphonePreferencesServiceSync* self, int* result_length1, GError** error);
	GVariant* (*get_value) (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GError** error);
	void (*set_value) (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GVariant* value, GError** error);
	gboolean (*is_profilable) (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GError** error);
	gchar* (*get_type_) (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GError** error);
};

struct _FreeSmartphoneNetworkIface {
	GTypeInterface parent_iface;
	void (*start_connection_sharing_with_interface) (FreeSmartphoneNetwork* self, const gchar* interface, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*start_connection_sharing_with_interface_finish) (FreeSmartphoneNetwork* self, GAsyncResult* _res_, GError** error);
	void (*stop_connection_sharing_with_interface) (FreeSmartphoneNetwork* self, const gchar* interface, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*stop_connection_sharing_with_interface_finish) (FreeSmartphoneNetwork* self, GAsyncResult* _res_, GError** error);
	void (*offer_default_route) (FreeSmartphoneNetwork* self, const gchar* technology, const gchar* interface, const gchar* ipv4address, const gchar* ipv4mask, const gchar* ipv4gateway, const gchar* dns1, const gchar* dns2, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*offer_default_route_finish) (FreeSmartphoneNetwork* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneNetworkSyncIface {
	GTypeInterface parent_iface;
	void (*start_connection_sharing_with_interface) (FreeSmartphoneNetworkSync* self, const gchar* interface, GError** error);
	void (*stop_connection_sharing_with_interface) (FreeSmartphoneNetworkSync* self, const gchar* interface, GError** error);
	void (*offer_default_route) (FreeSmartphoneNetworkSync* self, const gchar* technology, const gchar* interface, const gchar* ipv4address, const gchar* ipv4mask, const gchar* ipv4gateway, const gchar* dns1, const gchar* dns2, GError** error);
};

struct _FreeSmartphoneInfoIface {
	GTypeInterface parent_iface;
	void (*get_info) (FreeSmartphoneInfo* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_info_finish) (FreeSmartphoneInfo* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneInfoSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_info) (FreeSmartphoneInfoSync* self, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_RESOURCE_ERROR_NOT_ENABLED,
	FREE_SMARTPHONE_RESOURCE_ERROR_UNABLE_TO_ENABLE
} FreeSmartphoneResourceError;
#define FREE_SMARTPHONE_RESOURCE_ERROR free_smartphone_resource_error_quark ()
struct _FreeSmartphoneResourceIface {
	GTypeInterface parent_iface;
	void (*enable) (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*enable_finish) (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
	void (*disable) (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*disable_finish) (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
	void (*suspend) (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*suspend_finish) (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
	void (*resume) (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*resume_finish) (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
	void (*get_dependencies) (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_dependencies_finish) (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
	void (*get_default_policy) (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneUsageResourcePolicy (*get_default_policy_finish) (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneResourceSyncIface {
	GTypeInterface parent_iface;
	void (*enable) (FreeSmartphoneResourceSync* self, GError** error);
	void (*disable) (FreeSmartphoneResourceSync* self, GError** error);
	void (*suspend) (FreeSmartphoneResourceSync* self, GError** error);
	void (*resume) (FreeSmartphoneResourceSync* self, GError** error);
	GHashTable* (*get_dependencies) (FreeSmartphoneResourceSync* self, GError** error);
	FreeSmartphoneUsageResourcePolicy (*get_default_policy) (FreeSmartphoneResourceSync* self, GError** error);
};

struct _FreeSmartphoneContextClientIface {
	GTypeInterface parent_iface;
	void (*location_update) (FreeSmartphoneContextClient* self, GHashTable* from, GHashTable* to, GError** error);
};

struct _FreeSmartphoneContextClientSyncIface {
	GTypeInterface parent_iface;
	void (*location_update) (FreeSmartphoneContextClientSync* self, GHashTable* from, GHashTable* to, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_INVALID,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_NAVI,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_BEST,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_10M,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_100M,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_1KM,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_3KM,
	FREE_SMARTPHONE_CONTEXT_LOCATION_UPDATE_ACCURACY_100KM
} FreeSmartphoneContextLocationUpdateAccuracy;

struct _FreeSmartphoneContextManagerIface {
	GTypeInterface parent_iface;
	void (*subscribe_location_updates) (FreeSmartphoneContextManager* self, FreeSmartphoneContextLocationUpdateAccuracy desired_accuracy, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*subscribe_location_updates_finish) (FreeSmartphoneContextManager* self, GAsyncResult* _res_, GError** error);
	void (*unsubscribe_location_updates) (FreeSmartphoneContextManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*unsubscribe_location_updates_finish) (FreeSmartphoneContextManager* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneContextManagerSyncIface {
	GTypeInterface parent_iface;
	void (*subscribe_location_updates) (FreeSmartphoneContextManagerSync* self, FreeSmartphoneContextLocationUpdateAccuracy desired_accuracy, GError** error);
	void (*unsubscribe_location_updates) (FreeSmartphoneContextManagerSync* self, GError** error);
};

struct _FreeSmartphoneDataWorldCountry {
	gchar* code;
	gchar* name;
};

struct _FreeSmartphoneDataWorldConnectivityAccessPoint {
	gchar* description;
	gchar* apn;
	gchar* username;
	gchar* password;
	gchar* dns1;
	gchar* dns2;
};

struct _FreeSmartphoneDataWorldIface {
	GTypeInterface parent_iface;
	void (*get_all_countries) (FreeSmartphoneDataWorld* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneDataWorldCountry* (*get_all_countries_finish) (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_country_code_for_mcc_mnc) (FreeSmartphoneDataWorld* self, const gchar* mcc_mnc, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_country_code_for_mcc_mnc_finish) (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, GError** error);
	void (*get_timezones_for_country_code) (FreeSmartphoneDataWorld* self, const gchar* country_code, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_timezones_for_country_code_finish) (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, GError** error);
	void (*get_apns_for_mcc_mnc) (FreeSmartphoneDataWorld* self, const gchar* mcc_mnc, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneDataWorldConnectivityAccessPoint* (*get_apns_for_mcc_mnc_finish) (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_provider_name_for_mcc_mnc) (FreeSmartphoneDataWorld* self, const gchar* mcc_mnc, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_provider_name_for_mcc_mnc_finish) (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDataWorldSyncIface {
	GTypeInterface parent_iface;
	FreeSmartphoneDataWorldCountry* (*get_all_countries) (FreeSmartphoneDataWorldSync* self, int* result_length1, GError** error);
	gchar* (*get_country_code_for_mcc_mnc) (FreeSmartphoneDataWorldSync* self, const gchar* mcc_mnc, GError** error);
	GHashTable* (*get_timezones_for_country_code) (FreeSmartphoneDataWorldSync* self, const gchar* country_code, GError** error);
	FreeSmartphoneDataWorldConnectivityAccessPoint* (*get_apns_for_mcc_mnc) (FreeSmartphoneDataWorldSync* self, const gchar* mcc_mnc, int* result_length1, GError** error);
	gchar* (*get_provider_name_for_mcc_mnc) (FreeSmartphoneDataWorldSync* self, const gchar* mcc_mnc, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_BUSY,
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_IDLE,
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_IDLE_DIM,
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_IDLE_PRELOCK,
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_LOCK,
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_SUSPEND,
	FREE_SMARTPHONE_DEVICE_IDLE_STATE_AWAKE
} FreeSmartphoneDeviceIdleState;

struct _FreeSmartphoneDeviceIdleNotifierIface {
	GTypeInterface parent_iface;
	void (*get_state) (FreeSmartphoneDeviceIdleNotifier* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneDeviceIdleState (*get_state_finish) (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
	void (*get_timeouts) (FreeSmartphoneDeviceIdleNotifier* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_timeouts_finish) (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
	void (*set_timeout) (FreeSmartphoneDeviceIdleNotifier* self, FreeSmartphoneDeviceIdleState status, gint timeout, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_timeout_finish) (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
	void (*set_state) (FreeSmartphoneDeviceIdleNotifier* self, FreeSmartphoneDeviceIdleState status, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_state_finish) (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceIdleNotifierSyncIface {
	GTypeInterface parent_iface;
	FreeSmartphoneDeviceIdleState (*get_state) (FreeSmartphoneDeviceIdleNotifierSync* self, GError** error);
	GHashTable* (*get_timeouts) (FreeSmartphoneDeviceIdleNotifierSync* self, GError** error);
	void (*set_timeout) (FreeSmartphoneDeviceIdleNotifierSync* self, FreeSmartphoneDeviceIdleState status, gint timeout, GError** error);
	void (*set_state) (FreeSmartphoneDeviceIdleNotifierSync* self, FreeSmartphoneDeviceIdleState status, GError** error);
};

struct _FreeSmartphoneDeviceDisplayIface {
	GTypeInterface parent_iface;
	void (*get_brightness) (FreeSmartphoneDeviceDisplay* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_brightness_finish) (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
	void (*set_brightness) (FreeSmartphoneDeviceDisplay* self, gint brightness, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_brightness_finish) (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
	void (*get_backlight_power) (FreeSmartphoneDeviceDisplay* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*get_backlight_power_finish) (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
	void (*set_backlight_power) (FreeSmartphoneDeviceDisplay* self, gboolean power, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_backlight_power_finish) (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceDisplaySyncIface {
	GTypeInterface parent_iface;
	gint (*get_brightness) (FreeSmartphoneDeviceDisplaySync* self, GError** error);
	void (*set_brightness) (FreeSmartphoneDeviceDisplaySync* self, gint brightness, GError** error);
	gboolean (*get_backlight_power) (FreeSmartphoneDeviceDisplaySync* self, GError** error);
	void (*set_backlight_power) (FreeSmartphoneDeviceDisplaySync* self, gboolean power, GError** error);
};

struct _FreeSmartphoneDeviceLEDIface {
	GTypeInterface parent_iface;
	void (*set_brightness) (FreeSmartphoneDeviceLED* self, gint brightness, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_brightness_finish) (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
	void (*set_blinking) (FreeSmartphoneDeviceLED* self, gint on_duration, gint off_duration, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_blinking_finish) (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
	void (*blink_seconds) (FreeSmartphoneDeviceLED* self, gint seconds, gint on_duration, gint off_duration, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*blink_seconds_finish) (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
	void (*set_networking) (FreeSmartphoneDeviceLED* self, const gchar* interface, const gchar* mode, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_networking_finish) (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceLEDSyncIface {
	GTypeInterface parent_iface;
	void (*set_brightness) (FreeSmartphoneDeviceLEDSync* self, gint brightness, GError** error);
	void (*set_blinking) (FreeSmartphoneDeviceLEDSync* self, gint on_duration, gint off_duration, GError** error);
	void (*blink_seconds) (FreeSmartphoneDeviceLEDSync* self, gint seconds, gint on_duration, gint off_duration, GError** error);
	void (*set_networking) (FreeSmartphoneDeviceLEDSync* self, const gchar* interface, const gchar* mode, GError** error);
};

struct _FreeSmartphoneDeviceVibratorIface {
	GTypeInterface parent_iface;
	void (*vibrate_pattern) (FreeSmartphoneDeviceVibrator* self, gint pulses, gint on_duration_ms, gint off_duration_ms, gint strength_percentage, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*vibrate_pattern_finish) (FreeSmartphoneDeviceVibrator* self, GAsyncResult* _res_, GError** error);
	void (*vibrate) (FreeSmartphoneDeviceVibrator* self, gint duration_ms, gint strength_percentage, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*vibrate_finish) (FreeSmartphoneDeviceVibrator* self, GAsyncResult* _res_, GError** error);
	void (*stop) (FreeSmartphoneDeviceVibrator* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*stop_finish) (FreeSmartphoneDeviceVibrator* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceVibratorSyncIface {
	GTypeInterface parent_iface;
	void (*vibrate_pattern) (FreeSmartphoneDeviceVibratorSync* self, gint pulses, gint on_duration_ms, gint off_duration_ms, gint strength_percentage, GError** error);
	void (*vibrate) (FreeSmartphoneDeviceVibratorSync* self, gint duration_ms, gint strength_percentage, GError** error);
	void (*stop) (FreeSmartphoneDeviceVibratorSync* self, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_UNKNOWN_FORMAT,
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_PLAYER_ERROR,
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_NOT_PLAYING,
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_ALREADY_PLAYING,
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_SCENARIO_INVALID,
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_SCENARIO_STACK_UNDERFLOW,
	FREE_SMARTPHONE_DEVICE_AUDIO_ERROR_DEVICE_FAILED
} FreeSmartphoneDeviceAudioError;
#define FREE_SMARTPHONE_DEVICE_AUDIO_ERROR free_smartphone_device_audio_error_quark ()
struct _FreeSmartphoneDeviceAudioIface {
	GTypeInterface parent_iface;
	void (*play_sound) (FreeSmartphoneDeviceAudio* self, const gchar* name, gint loop, gint length, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*play_sound_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*stop_sound) (FreeSmartphoneDeviceAudio* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*stop_sound_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*stop_all_sounds) (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*stop_all_sounds_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*get_available_scenarios) (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_available_scenarios_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_scenario) (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_scenario_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*set_scenario) (FreeSmartphoneDeviceAudio* self, const gchar* scenario, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_scenario_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*push_scenario) (FreeSmartphoneDeviceAudio* self, const gchar* scenario, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*push_scenario_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*pull_scenario) (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*pull_scenario_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*save_scenario) (FreeSmartphoneDeviceAudio* self, const gchar* scenario, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*save_scenario_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*get_volume) (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint8 (*get_volume_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
	void (*set_volume) (FreeSmartphoneDeviceAudio* self, guint8 volume, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_volume_finish) (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceAudioSyncIface {
	GTypeInterface parent_iface;
	void (*play_sound) (FreeSmartphoneDeviceAudioSync* self, const gchar* name, gint loop, gint length, GError** error);
	void (*stop_sound) (FreeSmartphoneDeviceAudioSync* self, const gchar* name, GError** error);
	void (*stop_all_sounds) (FreeSmartphoneDeviceAudioSync* self, GError** error);
	gchar** (*get_available_scenarios) (FreeSmartphoneDeviceAudioSync* self, int* result_length1, GError** error);
	gchar* (*get_scenario) (FreeSmartphoneDeviceAudioSync* self, GError** error);
	void (*set_scenario) (FreeSmartphoneDeviceAudioSync* self, const gchar* scenario, GError** error);
	void (*push_scenario) (FreeSmartphoneDeviceAudioSync* self, const gchar* scenario, GError** error);
	gchar* (*pull_scenario) (FreeSmartphoneDeviceAudioSync* self, GError** error);
	void (*save_scenario) (FreeSmartphoneDeviceAudioSync* self, const gchar* scenario, GError** error);
	guint8 (*get_volume) (FreeSmartphoneDeviceAudioSync* self, GError** error);
	void (*set_volume) (FreeSmartphoneDeviceAudioSync* self, guint8 volume, GError** error);
};

struct _FreeSmartphoneDeviceOrientationIface {
	GTypeInterface parent_iface;
	void (*get_orientation) (FreeSmartphoneDeviceOrientation* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_orientation_finish) (FreeSmartphoneDeviceOrientation* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceOrientationSyncIface {
	GTypeInterface parent_iface;
	gchar* (*get_orientation) (FreeSmartphoneDeviceOrientationSync* self, GError** error);
};

struct _FreeSmartphoneDeviceProximityIface {
	GTypeInterface parent_iface;
	void (*get_proximity) (FreeSmartphoneDeviceProximity* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_proximity_finish) (FreeSmartphoneDeviceProximity* self, GAsyncResult* _res_, gint* proximity, gint* epoch, GError** error);
};

struct _FreeSmartphoneDeviceProximitySyncIface {
	GTypeInterface parent_iface;
	void (*get_proximity) (FreeSmartphoneDeviceProximitySync* self, gint* proximity, gint* epoch, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_CHARGING,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_DISCHARGING,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_FULL,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_EMPTY,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_CRITICAL,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_REMOVED,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_UNKNOWN,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_ONLINE,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_OFFLINE,
	FREE_SMARTPHONE_DEVICE_POWER_STATUS_AC
} FreeSmartphoneDevicePowerStatus;

struct _FreeSmartphoneDevicePowerSupplyIface {
	GTypeInterface parent_iface;
	void (*get_capacity) (FreeSmartphoneDevicePowerSupply* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_capacity_finish) (FreeSmartphoneDevicePowerSupply* self, GAsyncResult* _res_, GError** error);
	void (*get_power_status) (FreeSmartphoneDevicePowerSupply* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneDevicePowerStatus (*get_power_status_finish) (FreeSmartphoneDevicePowerSupply* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDevicePowerSupplySyncIface {
	GTypeInterface parent_iface;
	gint (*get_capacity) (FreeSmartphoneDevicePowerSupplySync* self, GError** error);
	FreeSmartphoneDevicePowerStatus (*get_power_status) (FreeSmartphoneDevicePowerSupplySync* self, GError** error);
};

struct _FreeSmartphoneDeviceRealtimeClockIface {
	GTypeInterface parent_iface;
	void (*get_current_time) (FreeSmartphoneDeviceRealtimeClock* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_current_time_finish) (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
	void (*set_current_time) (FreeSmartphoneDeviceRealtimeClock* self, gint time, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_current_time_finish) (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
	void (*get_wakeup_time) (FreeSmartphoneDeviceRealtimeClock* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_wakeup_time_finish) (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
	void (*set_wakeup_time) (FreeSmartphoneDeviceRealtimeClock* self, gint time, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_wakeup_time_finish) (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceRealtimeClockSyncIface {
	GTypeInterface parent_iface;
	gint (*get_current_time) (FreeSmartphoneDeviceRealtimeClockSync* self, GError** error);
	void (*set_current_time) (FreeSmartphoneDeviceRealtimeClockSync* self, gint time, GError** error);
	gint (*get_wakeup_time) (FreeSmartphoneDeviceRealtimeClockSync* self, GError** error);
	void (*set_wakeup_time) (FreeSmartphoneDeviceRealtimeClockSync* self, gint time, GError** error);
};

struct _FreeSmartphoneDevicePowerControlIface {
	GTypeInterface parent_iface;
	void (*get_power) (FreeSmartphoneDevicePowerControl* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*get_power_finish) (FreeSmartphoneDevicePowerControl* self, GAsyncResult* _res_, GError** error);
	void (*set_power) (FreeSmartphoneDevicePowerControl* self, gboolean on, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_power_finish) (FreeSmartphoneDevicePowerControl* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDevicePowerControlSyncIface {
	GTypeInterface parent_iface;
	gboolean (*get_power) (FreeSmartphoneDevicePowerControlSync* self, GError** error);
	void (*set_power) (FreeSmartphoneDevicePowerControlSync* self, gboolean on, GError** error);
};

struct _FreeSmartphoneDeviceInfoIface {
	GTypeInterface parent_iface;
	void (*get_cpu_info) (FreeSmartphoneDeviceInfo* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_cpu_info_finish) (FreeSmartphoneDeviceInfo* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceInfoSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_cpu_info) (FreeSmartphoneDeviceInfoSync* self, GError** error);
};

struct _FreeSmartphoneDeviceInputIface {
	GTypeInterface parent_iface;
	void (*get_id) (FreeSmartphoneDeviceInput* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_id_finish) (FreeSmartphoneDeviceInput* self, GAsyncResult* _res_, GError** error);
	void (*get_capabilities) (FreeSmartphoneDeviceInput* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_capabilities_finish) (FreeSmartphoneDeviceInput* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneDeviceInputSyncIface {
	GTypeInterface parent_iface;
	gchar* (*get_id) (FreeSmartphoneDeviceInputSync* self, GError** error);
	gchar* (*get_capabilities) (FreeSmartphoneDeviceInputSync* self, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_DEVICE_INPUT_STATE_PRESSED,
	FREE_SMARTPHONE_DEVICE_INPUT_STATE_HELD,
	FREE_SMARTPHONE_DEVICE_INPUT_STATE_RELEASED
} FreeSmartphoneDeviceInputState;

typedef enum  {
	FREE_SMARTPHONE_DEVICE_SOUND_STATE_PLAYING,
	FREE_SMARTPHONE_DEVICE_SOUND_STATE_STOPPED
} FreeSmartphoneDeviceSoundState;

struct _FreeSmartphoneDeviceAmbientLightIface {
	GTypeInterface parent_iface;
	void (*get_ambient_light_brightness) (FreeSmartphoneDeviceAmbientLight* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_ambient_light_brightness_finish) (FreeSmartphoneDeviceAmbientLight* self, GAsyncResult* _res_, gint* brightness, gint* epoch, GError** error);
};

struct _FreeSmartphoneDeviceAmbientLightSyncIface {
	GTypeInterface parent_iface;
	void (*get_ambient_light_brightness) (FreeSmartphoneDeviceAmbientLightSync* self, gint* brightness, gint* epoch, GError** error);
};

struct _FreeSmartphoneGSMError0Iface {
	GTypeInterface parent_iface;
};

struct _FreeSmartphoneGSMError0SyncIface {
	GTypeInterface parent_iface;
};

typedef enum  {
	FREE_SMARTPHONE_GSM_SIM_AUTH_STATUS_UNKNOWN,
	FREE_SMARTPHONE_GSM_SIM_AUTH_STATUS_READY,
	FREE_SMARTPHONE_GSM_SIM_AUTH_STATUS_PIN_REQUIRED,
	FREE_SMARTPHONE_GSM_SIM_AUTH_STATUS_PUK_REQUIRED,
	FREE_SMARTPHONE_GSM_SIM_AUTH_STATUS_PIN2_REQUIRED,
	FREE_SMARTPHONE_GSM_SIM_AUTH_STATUS_PUK2_REQUIRED
} FreeSmartphoneGSMSIMAuthStatus;

typedef enum  {
	FREE_SMARTPHONE_GSM_ERROR_DEVICE_NOT_PRESENT,
	FREE_SMARTPHONE_GSM_ERROR_DEVICE_TIMEOUT,
	FREE_SMARTPHONE_GSM_ERROR_DEVICE_FAILED,
	FREE_SMARTPHONE_GSM_ERROR_AUTHORIZATION_REQUIRED,
	FREE_SMARTPHONE_GSM_ERROR_SIM_NOT_PRESENT,
	FREE_SMARTPHONE_GSM_ERROR_SIM_AUTH_FAILED,
	FREE_SMARTPHONE_GSM_ERROR_SIM_BLOCKED,
	FREE_SMARTPHONE_GSM_ERROR_SIM_NOT_FOUND,
	FREE_SMARTPHONE_GSM_ERROR_SIM_MEMORY_FULL,
	FREE_SMARTPHONE_GSM_ERROR_SIM_INVALID_INDEX,
	FREE_SMARTPHONE_GSM_ERROR_CALL_NOT_FOUND,
	FREE_SMARTPHONE_GSM_ERROR_MUX_CHANNEL_TAKEN,
	FREE_SMARTPHONE_GSM_ERROR_MUX_NO_CHANNEL,
	FREE_SMARTPHONE_GSM_ERROR_MUX_NO_SESSION,
	FREE_SMARTPHONE_GSM_ERROR_MUX_SESSION_ALREADY_OPEN,
	FREE_SMARTPHONE_GSM_ERROR_MUX_SESSION_OPEN_ERROR,
	FREE_SMARTPHONE_GSM_ERROR_NETWORK_NOT_PRESENT,
	FREE_SMARTPHONE_GSM_ERROR_NETWORK_UNAUTHORIZED,
	FREE_SMARTPHONE_GSM_ERROR_NETWORK_NOT_SUPPORTED,
	FREE_SMARTPHONE_GSM_ERROR_NETWORK_NOT_FOUND,
	FREE_SMARTPHONE_GSM_ERROR_CONTEXT_NOT_FOUND
} FreeSmartphoneGSMError;
#define FREE_SMARTPHONE_GSM_ERROR free_smartphone_gsm_error_quark ()
struct _FreeSmartphoneGSMSIMHomeZone {
	gchar* name;
	gint x;
	gint y;
	gint radius;
};

struct _FreeSmartphoneGSMSIMEntry {
	gint index;
	gchar* name;
	gchar* number;
};

struct _FreeSmartphoneGSMSIMIface {
	GTypeInterface parent_iface;
	void (*get_auth_status) (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMSIMAuthStatus (*get_auth_status_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*send_auth_code) (FreeSmartphoneGSMSIM* self, const gchar* pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*send_auth_code_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*get_unlock_counters) (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_unlock_counters_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*unlock) (FreeSmartphoneGSMSIM* self, const gchar* puk, const gchar* new_pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*unlock_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*change_auth_code) (FreeSmartphoneGSMSIM* self, const gchar* old_pin, const gchar* new_pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*change_auth_code_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*set_auth_code_required) (FreeSmartphoneGSMSIM* self, gboolean check, const gchar* pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_auth_code_required_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*get_auth_code_required) (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*get_auth_code_required_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*get_sim_info) (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_sim_info_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*send_generic_sim_command) (FreeSmartphoneGSMSIM* self, const gchar* command, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*send_generic_sim_command_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*send_restricted_sim_command) (FreeSmartphoneGSMSIM* self, gint command, gint fileid, gint p1, gint p2, gint p3, const gchar* data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*send_restricted_sim_command_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*get_home_zone_parameters) (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMSIMHomeZone* (*get_home_zone_parameters_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_phonebook_info) (FreeSmartphoneGSMSIM* self, const gchar* category, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_phonebook_info_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, gint* slots, gint* numberlength, gint* namelength, GError** error);
	void (*delete_entry) (FreeSmartphoneGSMSIM* self, const gchar* category, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_entry_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*store_entry) (FreeSmartphoneGSMSIM* self, const gchar* category, gint index, const gchar* name, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*store_entry_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*retrieve_phonebook) (FreeSmartphoneGSMSIM* self, const gchar* category, gint mindex, gint maxdex, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMSIMEntry* (*retrieve_phonebook_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_service_center_number) (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_service_center_number_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*set_service_center_number) (FreeSmartphoneGSMSIM* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_service_center_number_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*delete_message) (FreeSmartphoneGSMSIM* self, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_message_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*store_message) (FreeSmartphoneGSMSIM* self, const gchar* recipient_number, const gchar* contents, GHashTable* properties, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*store_message_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
	void (*send_stored_message) (FreeSmartphoneGSMSIM* self, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*send_stored_message_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, gint* transaction_index, gchar** timestamp, GError** error);
	void (*retrieve_message) (FreeSmartphoneGSMSIM* self, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*retrieve_message_finish) (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, gchar** status, gchar** sender_number, gchar** contents, GHashTable** properties, GError** error);
};

struct _FreeSmartphoneGSMSIMSyncIface {
	GTypeInterface parent_iface;
	FreeSmartphoneGSMSIMAuthStatus (*get_auth_status) (FreeSmartphoneGSMSIMSync* self, GError** error);
	void (*send_auth_code) (FreeSmartphoneGSMSIMSync* self, const gchar* pin, GError** error);
	GHashTable* (*get_unlock_counters) (FreeSmartphoneGSMSIMSync* self, GError** error);
	void (*unlock) (FreeSmartphoneGSMSIMSync* self, const gchar* puk, const gchar* new_pin, GError** error);
	void (*change_auth_code) (FreeSmartphoneGSMSIMSync* self, const gchar* old_pin, const gchar* new_pin, GError** error);
	void (*set_auth_code_required) (FreeSmartphoneGSMSIMSync* self, gboolean check, const gchar* pin, GError** error);
	gboolean (*get_auth_code_required) (FreeSmartphoneGSMSIMSync* self, GError** error);
	GHashTable* (*get_sim_info) (FreeSmartphoneGSMSIMSync* self, GError** error);
	gchar* (*send_generic_sim_command) (FreeSmartphoneGSMSIMSync* self, const gchar* command, GError** error);
	gchar* (*send_restricted_sim_command) (FreeSmartphoneGSMSIMSync* self, gint command, gint fileid, gint p1, gint p2, gint p3, const gchar* data, GError** error);
	FreeSmartphoneGSMSIMHomeZone* (*get_home_zone_parameters) (FreeSmartphoneGSMSIMSync* self, int* result_length1, GError** error);
	void (*get_phonebook_info) (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint* slots, gint* numberlength, gint* namelength, GError** error);
	void (*delete_entry) (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint index, GError** error);
	void (*store_entry) (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint index, const gchar* name, const gchar* number, GError** error);
	FreeSmartphoneGSMSIMEntry* (*retrieve_phonebook) (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint mindex, gint maxdex, int* result_length1, GError** error);
	gchar* (*get_service_center_number) (FreeSmartphoneGSMSIMSync* self, GError** error);
	void (*set_service_center_number) (FreeSmartphoneGSMSIMSync* self, const gchar* number, GError** error);
	void (*delete_message) (FreeSmartphoneGSMSIMSync* self, gint index, GError** error);
	gint (*store_message) (FreeSmartphoneGSMSIMSync* self, const gchar* recipient_number, const gchar* contents, GHashTable* properties, GError** error);
	void (*send_stored_message) (FreeSmartphoneGSMSIMSync* self, gint index, gint* transaction_index, gchar** timestamp, GError** error);
	void (*retrieve_message) (FreeSmartphoneGSMSIMSync* self, gint index, gchar** status, gchar** sender_number, gchar** contents, GHashTable** properties, GError** error);
};

struct _FreeSmartphoneGSMMUXIface {
	GTypeInterface parent_iface;
	void (*open_session) (FreeSmartphoneGSMMUX* self, gboolean advanced, gint framesize, const gchar* portname, gint portspeed, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*open_session_finish) (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
	void (*close_session) (FreeSmartphoneGSMMUX* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*close_session_finish) (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
	void (*alloc_channel) (FreeSmartphoneGSMMUX* self, const gchar* origin, gint channel, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*alloc_channel_finish) (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, gchar** path, gint* allocated_channel, GError** error);
	void (*release_channel) (FreeSmartphoneGSMMUX* self, const gchar* origin, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*release_channel_finish) (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
	void (*set_status) (FreeSmartphoneGSMMUX* self, gint channel, const gchar* status, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_status_finish) (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMMUXSyncIface {
	GTypeInterface parent_iface;
	void (*open_session) (FreeSmartphoneGSMMUXSync* self, gboolean advanced, gint framesize, const gchar* portname, gint portspeed, GError** error);
	void (*close_session) (FreeSmartphoneGSMMUXSync* self, GError** error);
	void (*alloc_channel) (FreeSmartphoneGSMMUXSync* self, const gchar* origin, gint channel, gchar** path, gint* allocated_channel, GError** error);
	void (*release_channel) (FreeSmartphoneGSMMUXSync* self, const gchar* origin, GError** error);
	void (*set_status) (FreeSmartphoneGSMMUXSync* self, gint channel, const gchar* status, GError** error);
};

struct _FreeSmartphoneGSMCBIface {
	GTypeInterface parent_iface;
	void (*get_cell_broadcast_subscriptions) (FreeSmartphoneGSMCB* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_cell_broadcast_subscriptions_finish) (FreeSmartphoneGSMCB* self, GAsyncResult* _res_, GError** error);
	void (*set_cell_broadcast_subscriptions) (FreeSmartphoneGSMCB* self, const gchar* channels, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_cell_broadcast_subscriptions_finish) (FreeSmartphoneGSMCB* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMCBSyncIface {
	GTypeInterface parent_iface;
	gchar* (*get_cell_broadcast_subscriptions) (FreeSmartphoneGSMCBSync* self, GError** error);
	void (*set_cell_broadcast_subscriptions) (FreeSmartphoneGSMCBSync* self, const gchar* channels, GError** error);
};

struct _FreeSmartphoneGSMHZIface {
	GTypeInterface parent_iface;
	void (*get_known_home_zones) (FreeSmartphoneGSMHZ* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_known_home_zones_finish) (FreeSmartphoneGSMHZ* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_home_zone_status) (FreeSmartphoneGSMHZ* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_home_zone_status_finish) (FreeSmartphoneGSMHZ* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMHZSyncIface {
	GTypeInterface parent_iface;
	gchar** (*get_known_home_zones) (FreeSmartphoneGSMHZSync* self, int* result_length1, GError** error);
	gchar* (*get_home_zone_status) (FreeSmartphoneGSMHZSync* self, GError** error);
};

struct _FreeSmartphoneGSMVoiceMailIface {
	GTypeInterface parent_iface;
	void (*get_voice_mailbox_number) (FreeSmartphoneGSMVoiceMail* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_voice_mailbox_number_finish) (FreeSmartphoneGSMVoiceMail* self, GAsyncResult* _res_, GError** error);
	void (*set_voice_mailbox_number) (FreeSmartphoneGSMVoiceMail* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_voice_mailbox_number_finish) (FreeSmartphoneGSMVoiceMail* self, GAsyncResult* _res_, GError** error);
	void (*get_stored_voice_mails) (FreeSmartphoneGSMVoiceMail* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_stored_voice_mails_finish) (FreeSmartphoneGSMVoiceMail* self, GAsyncResult* _res_, int* result_length1, GError** error);
};

struct _FreeSmartphoneGSMVoiceMailSyncIface {
	GTypeInterface parent_iface;
	gchar* (*get_voice_mailbox_number) (FreeSmartphoneGSMVoiceMailSync* self, GError** error);
	void (*set_voice_mailbox_number) (FreeSmartphoneGSMVoiceMailSync* self, const gchar* number, GError** error);
	gchar** (*get_stored_voice_mails) (FreeSmartphoneGSMVoiceMailSync* self, int* result_length1, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_GSM_CIPHER_STATUS_DISABLED,
	FREE_SMARTPHONE_GSM_CIPHER_STATUS_ENABLED,
	FREE_SMARTPHONE_GSM_CIPHER_STATUS_UNKNOWN
} FreeSmartphoneGSMCipherStatus;

typedef enum  {
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_UNKNOWN,
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_INCOMING,
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_OUTGOING,
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_ACTIVE,
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_RELEASED,
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_SHUTDOWN,
	FREE_SMARTPHONE_GSM_CONTEXT_STATUS_SUSPENDED
} FreeSmartphoneGSMContextStatus;

struct _FreeSmartphoneGSMPDPIface {
	GTypeInterface parent_iface;
	void (*set_credentials) (FreeSmartphoneGSMPDP* self, const gchar* apn, const gchar* username, const gchar* password, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_credentials_finish) (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
	void (*get_credentials) (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_credentials_finish) (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, gchar** apn, gchar** username, gchar** password, GError** error);
	void (*activate_context) (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_context_finish) (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
	void (*deactivate_context) (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*deactivate_context_finish) (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
	void (*get_context_status) (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_context_status_finish) (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, FreeSmartphoneGSMContextStatus* status, GHashTable** properties, GError** error);
	void (*internal_status_update) (FreeSmartphoneGSMPDP* self, const gchar* status, GHashTable* properties, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*internal_status_update_finish) (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
	gboolean (*get_roaming_allowed) (FreeSmartphoneGSMPDP* self);
	void (*set_roaming_allowed) (FreeSmartphoneGSMPDP* self, gboolean value);
};

struct _FreeSmartphoneGSMPDPSyncIface {
	GTypeInterface parent_iface;
	void (*set_credentials) (FreeSmartphoneGSMPDPSync* self, const gchar* apn, const gchar* username, const gchar* password, GError** error);
	void (*get_credentials) (FreeSmartphoneGSMPDPSync* self, gchar** apn, gchar** username, gchar** password, GError** error);
	void (*activate_context) (FreeSmartphoneGSMPDPSync* self, GError** error);
	void (*deactivate_context) (FreeSmartphoneGSMPDPSync* self, GError** error);
	void (*get_context_status) (FreeSmartphoneGSMPDPSync* self, FreeSmartphoneGSMContextStatus* status, GHashTable** properties, GError** error);
	void (*internal_status_update) (FreeSmartphoneGSMPDPSync* self, const gchar* status, GHashTable* properties, GError** error);
	gboolean (*get_roaming_allowed) (FreeSmartphoneGSMPDPSync* self);
	void (*set_roaming_allowed) (FreeSmartphoneGSMPDPSync* self, gboolean value);
};

struct _FreeSmartphoneGSMMonitorIface {
	GTypeInterface parent_iface;
	void (*get_serving_cell_information) (FreeSmartphoneGSMMonitor* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_serving_cell_information_finish) (FreeSmartphoneGSMMonitor* self, GAsyncResult* _res_, GError** error);
	void (*get_neighbour_cell_information) (FreeSmartphoneGSMMonitor* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable** (*get_neighbour_cell_information_finish) (FreeSmartphoneGSMMonitor* self, GAsyncResult* _res_, int* result_length1, GError** error);
};

struct _FreeSmartphoneGSMMonitorSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_serving_cell_information) (FreeSmartphoneGSMMonitorSync* self, GError** error);
	GHashTable** (*get_neighbour_cell_information) (FreeSmartphoneGSMMonitorSync* self, int* result_length1, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_GSM_CALL_STATUS_INCOMING,
	FREE_SMARTPHONE_GSM_CALL_STATUS_OUTGOING,
	FREE_SMARTPHONE_GSM_CALL_STATUS_ACTIVE,
	FREE_SMARTPHONE_GSM_CALL_STATUS_HELD,
	FREE_SMARTPHONE_GSM_CALL_STATUS_RELEASE
} FreeSmartphoneGSMCallStatus;

struct _FreeSmartphoneGSMCallDetail {
	gint id;
	FreeSmartphoneGSMCallStatus status;
	GHashTable* properties;
};

struct _FreeSmartphoneGSMCallIface {
	GTypeInterface parent_iface;
	void (*emergency) (FreeSmartphoneGSMCall* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*emergency_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*activate) (FreeSmartphoneGSMCall* self, gint id, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*activate_conference) (FreeSmartphoneGSMCall* self, gint id, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*activate_conference_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*release) (FreeSmartphoneGSMCall* self, gint id, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*release_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*hold_active) (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*hold_active_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*join) (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*join_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*transfer) (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*transfer_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*deflect) (FreeSmartphoneGSMCall* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*deflect_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*release_held) (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*release_held_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*release_all) (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*release_all_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*initiate) (FreeSmartphoneGSMCall* self, const gchar* number, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*initiate_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
	void (*list_calls) (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMCallDetail* (*list_calls_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*send_dtmf) (FreeSmartphoneGSMCall* self, const gchar* tones, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*send_dtmf_finish) (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMCallSyncIface {
	GTypeInterface parent_iface;
	void (*emergency) (FreeSmartphoneGSMCallSync* self, const gchar* number, GError** error);
	void (*activate) (FreeSmartphoneGSMCallSync* self, gint id, GError** error);
	void (*activate_conference) (FreeSmartphoneGSMCallSync* self, gint id, GError** error);
	void (*release) (FreeSmartphoneGSMCallSync* self, gint id, GError** error);
	void (*hold_active) (FreeSmartphoneGSMCallSync* self, GError** error);
	void (*join) (FreeSmartphoneGSMCallSync* self, GError** error);
	void (*transfer) (FreeSmartphoneGSMCallSync* self, GError** error);
	void (*deflect) (FreeSmartphoneGSMCallSync* self, const gchar* number, GError** error);
	void (*release_held) (FreeSmartphoneGSMCallSync* self, GError** error);
	void (*release_all) (FreeSmartphoneGSMCallSync* self, GError** error);
	gint (*initiate) (FreeSmartphoneGSMCallSync* self, const gchar* number, const gchar* type, GError** error);
	FreeSmartphoneGSMCallDetail* (*list_calls) (FreeSmartphoneGSMCallSync* self, int* result_length1, GError** error);
	void (*send_dtmf) (FreeSmartphoneGSMCallSync* self, const gchar* tones, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_GSM_USSD_STATUS_COMPLETED,
	FREE_SMARTPHONE_GSM_USSD_STATUS_USERACTION,
	FREE_SMARTPHONE_GSM_USSD_STATUS_TERMINATED,
	FREE_SMARTPHONE_GSM_USSD_STATUS_LOCALCLIENT,
	FREE_SMARTPHONE_GSM_USSD_STATUS_UNSUPPORTED,
	FREE_SMARTPHONE_GSM_USSD_STATUS_TIMEOUT
} FreeSmartphoneGSMUssdStatus;

struct _FreeSmartphoneGSMDebugIface {
	GTypeInterface parent_iface;
	void (*debug_command) (FreeSmartphoneGSMDebug* self, const gchar* command, const gchar* channel, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*debug_command_finish) (FreeSmartphoneGSMDebug* self, GAsyncResult* _res_, GError** error);
	void (*debug_inject_response) (FreeSmartphoneGSMDebug* self, const gchar* response, const gchar* channel, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*debug_inject_response_finish) (FreeSmartphoneGSMDebug* self, GAsyncResult* _res_, GError** error);
	void (*debug_ping) (FreeSmartphoneGSMDebug* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*debug_ping_finish) (FreeSmartphoneGSMDebug* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMDebugSyncIface {
	GTypeInterface parent_iface;
	gchar* (*debug_command) (FreeSmartphoneGSMDebugSync* self, const gchar* command, const gchar* channel, GError** error);
	void (*debug_inject_response) (FreeSmartphoneGSMDebugSync* self, const gchar* response, const gchar* channel, GError** error);
	void (*debug_ping) (FreeSmartphoneGSMDebugSync* self, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_UNKNOWN,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_CLOSED,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_INITIALIZING,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_ALIVE_NO_SIM,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_ALIVE_SIM_LOCKED,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_ALIVE_SIM_UNLOCKED,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_ALIVE_SIM_READY,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_ALIVE_REGISTERED,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_SUSPENDING,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_SUSPENDED,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_RESUMING,
	FREE_SMARTPHONE_GSM_DEVICE_STATUS_CLOSING
} FreeSmartphoneGSMDeviceStatus;

struct _FreeSmartphoneGSMSIMMessage {
	gint index;
	gchar* status;
	gchar* number;
	gchar* timestamp;
	gchar* contents;
	GHashTable* properties;
};

struct _FreeSmartphoneGSMSMSIface {
	GTypeInterface parent_iface;
	void (*retrieve_text_messages) (FreeSmartphoneGSMSMS* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMSIMMessage* (*retrieve_text_messages_finish) (FreeSmartphoneGSMSMS* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_size_for_text_message) (FreeSmartphoneGSMSMS* self, const gchar* contents, GAsyncReadyCallback _callback_, gpointer _user_data_);
	guint (*get_size_for_text_message_finish) (FreeSmartphoneGSMSMS* self, GAsyncResult* _res_, GError** error);
	void (*send_text_message) (FreeSmartphoneGSMSMS* self, const gchar* recipient_number, const gchar* contents, gboolean report, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*send_text_message_finish) (FreeSmartphoneGSMSMS* self, GAsyncResult* _res_, gint* reference, gchar** timestamp, GError** error);
};

struct _FreeSmartphoneGSMSMSSyncIface {
	GTypeInterface parent_iface;
	FreeSmartphoneGSMSIMMessage* (*retrieve_text_messages) (FreeSmartphoneGSMSMSSync* self, int* result_length1, GError** error);
	guint (*get_size_for_text_message) (FreeSmartphoneGSMSMSSync* self, const gchar* contents, GError** error);
	void (*send_text_message) (FreeSmartphoneGSMSMSSync* self, const gchar* recipient_number, const gchar* contents, gboolean report, gint* reference, gchar** timestamp, GError** error);
};

struct _FreeSmartphoneGSMNetworkProvider {
	gchar* status;
	gchar* shortname;
	gchar* longname;
	gchar* mccmnc;
	gchar* act;
};

typedef enum  {
	FREE_SMARTPHONE_GSM_CALLING_IDENTIFICATION_STATUS_NETWORK,
	FREE_SMARTPHONE_GSM_CALLING_IDENTIFICATION_STATUS_OFF,
	FREE_SMARTPHONE_GSM_CALLING_IDENTIFICATION_STATUS_ON
} FreeSmartphoneGSMCallingIdentificationStatus;

struct _FreeSmartphoneGSMNetworkIface {
	GTypeInterface parent_iface;
	void (*register_) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*register__finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*unregister) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*unregister_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*get_status) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_status_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*get_signal_strength) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_signal_strength_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*get_time_report) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_time_report_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, gint* time, gint* timestamp, gint* zone, gint* zonestamp, GError** error);
	void (*list_providers) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMNetworkProvider* (*list_providers_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*register_with_provider) (FreeSmartphoneGSMNetwork* self, const gchar* operator_code, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*register_with_provider_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*set_calling_identification) (FreeSmartphoneGSMNetwork* self, FreeSmartphoneGSMCallingIdentificationStatus status, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_calling_identification_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*get_calling_identification) (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMCallingIdentificationStatus (*get_calling_identification_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
	void (*send_ussd_request) (FreeSmartphoneGSMNetwork* self, const gchar* request, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*send_ussd_request_finish) (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMNetworkSyncIface {
	GTypeInterface parent_iface;
	void (*register_) (FreeSmartphoneGSMNetworkSync* self, GError** error);
	void (*unregister) (FreeSmartphoneGSMNetworkSync* self, GError** error);
	GHashTable* (*get_status) (FreeSmartphoneGSMNetworkSync* self, GError** error);
	gint (*get_signal_strength) (FreeSmartphoneGSMNetworkSync* self, GError** error);
	void (*get_time_report) (FreeSmartphoneGSMNetworkSync* self, gint* time, gint* timestamp, gint* zone, gint* zonestamp, GError** error);
	FreeSmartphoneGSMNetworkProvider* (*list_providers) (FreeSmartphoneGSMNetworkSync* self, int* result_length1, GError** error);
	void (*register_with_provider) (FreeSmartphoneGSMNetworkSync* self, const gchar* operator_code, GError** error);
	void (*set_calling_identification) (FreeSmartphoneGSMNetworkSync* self, FreeSmartphoneGSMCallingIdentificationStatus status, GError** error);
	FreeSmartphoneGSMCallingIdentificationStatus (*get_calling_identification) (FreeSmartphoneGSMNetworkSync* self, GError** error);
	void (*send_ussd_request) (FreeSmartphoneGSMNetworkSync* self, const gchar* request, GError** error);
};

struct _FreeSmartphoneGSMCallForwardingIface {
	GTypeInterface parent_iface;
	void (*disable_all) (FreeSmartphoneGSMCallForwarding* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*disable_all_finish) (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
	void (*enable) (FreeSmartphoneGSMCallForwarding* self, const gchar* rule, const gchar* number, gint timeout, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*enable_finish) (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
	void (*disable) (FreeSmartphoneGSMCallForwarding* self, const gchar* rule, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*disable_finish) (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
	void (*get_status) (FreeSmartphoneGSMCallForwarding* self, const gchar* rule, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_status_finish) (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMCallForwardingSyncIface {
	GTypeInterface parent_iface;
	void (*disable_all) (FreeSmartphoneGSMCallForwardingSync* self, const gchar* type, GError** error);
	void (*enable) (FreeSmartphoneGSMCallForwardingSync* self, const gchar* rule, const gchar* number, gint timeout, GError** error);
	void (*disable) (FreeSmartphoneGSMCallForwardingSync* self, const gchar* rule, GError** error);
	GHashTable* (*get_status) (FreeSmartphoneGSMCallForwardingSync* self, const gchar* rule, GError** error);
};

struct _FreeSmartphoneGSMDeviceIface {
	GTypeInterface parent_iface;
	void (*get_functionality) (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*get_functionality_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, gchar** level, gboolean* autoregister, gchar** pin, GError** error);
	void (*set_functionality) (FreeSmartphoneGSMDevice* self, const gchar* level, gboolean autoregister, const gchar* pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_functionality_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
	void (*get_features) (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_features_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
	void (*get_device_status) (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneGSMDeviceStatus (*get_device_status_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
	void (*get_speaker_volume) (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_speaker_volume_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
	void (*set_speaker_volume) (FreeSmartphoneGSMDevice* self, gint volume, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_speaker_volume_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
	void (*get_microphone_muted) (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*get_microphone_muted_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
	void (*set_microphone_muted) (FreeSmartphoneGSMDevice* self, gboolean muted, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_microphone_muted_finish) (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneGSMDeviceSyncIface {
	GTypeInterface parent_iface;
	void (*get_functionality) (FreeSmartphoneGSMDeviceSync* self, gchar** level, gboolean* autoregister, gchar** pin, GError** error);
	void (*set_functionality) (FreeSmartphoneGSMDeviceSync* self, const gchar* level, gboolean autoregister, const gchar* pin, GError** error);
	GHashTable* (*get_features) (FreeSmartphoneGSMDeviceSync* self, GError** error);
	FreeSmartphoneGSMDeviceStatus (*get_device_status) (FreeSmartphoneGSMDeviceSync* self, GError** error);
	gint (*get_speaker_volume) (FreeSmartphoneGSMDeviceSync* self, GError** error);
	void (*set_speaker_volume) (FreeSmartphoneGSMDeviceSync* self, gint volume, GError** error);
	gboolean (*get_microphone_muted) (FreeSmartphoneGSMDeviceSync* self, GError** error);
	void (*set_microphone_muted) (FreeSmartphoneGSMDeviceSync* self, gboolean muted, GError** error);
};

struct _FreeSmartphoneTimeWakeupAlarm {
	gchar* busname;
	gint timestamp;
};

struct _FreeSmartphoneTimeAlarmIface {
	GTypeInterface parent_iface;
	void (*clear_alarms) (FreeSmartphoneTimeAlarm* self, const gchar* busname, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*clear_alarms_finish) (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, GError** error);
	void (*list_alarms) (FreeSmartphoneTimeAlarm* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneTimeWakeupAlarm* (*list_alarms_finish) (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*remove_alarm) (FreeSmartphoneTimeAlarm* self, const gchar* busname, gint timestamp, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*remove_alarm_finish) (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, GError** error);
	void (*add_alarm) (FreeSmartphoneTimeAlarm* self, const gchar* busname, gint timestamp, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*add_alarm_finish) (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneTimeAlarmSyncIface {
	GTypeInterface parent_iface;
	void (*clear_alarms) (FreeSmartphoneTimeAlarmSync* self, const gchar* busname, GError** error);
	FreeSmartphoneTimeWakeupAlarm* (*list_alarms) (FreeSmartphoneTimeAlarmSync* self, int* result_length1, GError** error);
	void (*remove_alarm) (FreeSmartphoneTimeAlarmSync* self, const gchar* busname, gint timestamp, GError** error);
	void (*add_alarm) (FreeSmartphoneTimeAlarmSync* self, const gchar* busname, gint timestamp, GError** error);
};

struct _FreeSmartphonePIMFieldsIface {
	GTypeInterface parent_iface;
	void (*add_field) (FreeSmartphonePIMFields* self, const gchar* name, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*add_field_finish) (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
	void (*delete_field) (FreeSmartphonePIMFields* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_field_finish) (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
	void (*get_type_) (FreeSmartphonePIMFields* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_type__finish) (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
	void (*list_fields) (FreeSmartphonePIMFields* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*list_fields_finish) (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
	void (*list_fields_with_type) (FreeSmartphonePIMFields* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*list_fields_with_type_finish) (FreeSmartphonePIMFields* self, GAsyncResult* _res_, int* result_length1, GError** error);
};

struct _FreeSmartphonePIMFieldsSyncIface {
	GTypeInterface parent_iface;
	void (*add_field) (FreeSmartphonePIMFieldsSync* self, const gchar* name, const gchar* type, GError** error);
	void (*delete_field) (FreeSmartphonePIMFieldsSync* self, const gchar* name, GError** error);
	gchar* (*get_type_) (FreeSmartphonePIMFieldsSync* self, const gchar* name, GError** error);
	GHashTable* (*list_fields) (FreeSmartphonePIMFieldsSync* self, GError** error);
	gchar** (*list_fields_with_type) (FreeSmartphonePIMFieldsSync* self, const gchar* type, int* result_length1, GError** error);
};

struct _FreeSmartphonePIMNoteQueryIface {
	GTypeInterface parent_iface;
	void (*get_result_count) (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_result_count_finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
	void (*rewind) (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*rewind_finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
	void (*skip) (FreeSmartphonePIMNoteQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*skip_finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_note_path) (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_note_path_finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_result) (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_result_finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_results) (FreeSmartphonePIMNoteQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable** (*get_multiple_results_finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*dispose__finish) (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMNoteQuerySyncIface {
	GTypeInterface parent_iface;
	gint (*get_result_count) (FreeSmartphonePIMNoteQuerySync* self, GError** error);
	void (*rewind) (FreeSmartphonePIMNoteQuerySync* self, GError** error);
	void (*skip) (FreeSmartphonePIMNoteQuerySync* self, gint count, GError** error);
	gchar* (*get_note_path) (FreeSmartphonePIMNoteQuerySync* self, GError** error);
	GHashTable* (*get_result) (FreeSmartphonePIMNoteQuerySync* self, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMNoteQuerySync* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMNoteQuerySync* self, GError** error);
};

struct _FreeSmartphonePIMTaskQueryIface {
	GTypeInterface parent_iface;
	void (*get_result_count) (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_result_count_finish) (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
	void (*rewind) (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*rewind_finish) (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
	void (*skip) (FreeSmartphonePIMTaskQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*skip_finish) (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_task_path) (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_task_path_finish) (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_result) (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_result_finish) (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMTaskQuery* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*dispose__finish) (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMTaskQuerySyncIface {
	GTypeInterface parent_iface;
	gint (*get_result_count) (FreeSmartphonePIMTaskQuerySync* self, GError** error);
	void (*rewind) (FreeSmartphonePIMTaskQuerySync* self, GError** error);
	void (*skip) (FreeSmartphonePIMTaskQuerySync* self, gint count, GError** error);
	gchar* (*get_task_path) (FreeSmartphonePIMTaskQuerySync* self, GError** error);
	GHashTable* (*get_result) (FreeSmartphonePIMTaskQuerySync* self, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMTaskQuerySync* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMTaskQuerySync* self, GError** error);
};

struct _FreeSmartphonePIMMessageIface {
	GTypeInterface parent_iface;
	void (*get_content) (FreeSmartphonePIMMessage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_content_finish) (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_fields) (FreeSmartphonePIMMessage* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_multiple_fields_finish) (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
	void (*move_to_folder) (FreeSmartphonePIMMessage* self, const gchar* folder_name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*move_to_folder_finish) (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
	void (*update) (FreeSmartphonePIMMessage* self, GHashTable* message_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*update_finish) (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
	void (*delete) (FreeSmartphonePIMMessage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_finish) (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMMessageSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_content) (FreeSmartphonePIMMessageSync* self, GError** error);
	GHashTable* (*get_multiple_fields) (FreeSmartphonePIMMessageSync* self, const gchar* field_list, GError** error);
	void (*move_to_folder) (FreeSmartphonePIMMessageSync* self, const gchar* folder_name, GError** error);
	void (*update) (FreeSmartphonePIMMessageSync* self, GHashTable* message_data, GError** error);
	void (*delete) (FreeSmartphonePIMMessageSync* self, GError** error);
};

struct _FreeSmartphonePIMDateQueryIface {
	GTypeInterface parent_iface;
	void (*get_result_count) (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_result_count_finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
	void (*rewind) (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*rewind_finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
	void (*skip) (FreeSmartphonePIMDateQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*skip_finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_date_path) (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_date_path_finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_result) (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_result_finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_results) (FreeSmartphonePIMDateQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable** (*get_multiple_results_finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*dispose__finish) (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMDateQuerySyncIface {
	GTypeInterface parent_iface;
	gint (*get_result_count) (FreeSmartphonePIMDateQuerySync* self, GError** error);
	void (*rewind) (FreeSmartphonePIMDateQuerySync* self, GError** error);
	void (*skip) (FreeSmartphonePIMDateQuerySync* self, gint count, GError** error);
	gchar* (*get_date_path) (FreeSmartphonePIMDateQuerySync* self, GError** error);
	GHashTable* (*get_result) (FreeSmartphonePIMDateQuerySync* self, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMDateQuerySync* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMDateQuerySync* self, GError** error);
};

struct _FreeSmartphonePIMCallQueryIface {
	GTypeInterface parent_iface;
	void (*get_result_count) (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_result_count_finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
	void (*rewind) (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*rewind_finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
	void (*skip) (FreeSmartphonePIMCallQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*skip_finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_call_path) (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_call_path_finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_result) (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_result_finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_results) (FreeSmartphonePIMCallQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable** (*get_multiple_results_finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*dispose__finish) (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMCallQuerySyncIface {
	GTypeInterface parent_iface;
	gint (*get_result_count) (FreeSmartphonePIMCallQuerySync* self, GError** error);
	void (*rewind) (FreeSmartphonePIMCallQuerySync* self, GError** error);
	void (*skip) (FreeSmartphonePIMCallQuerySync* self, gint count, GError** error);
	gchar* (*get_call_path) (FreeSmartphonePIMCallQuerySync* self, GError** error);
	GHashTable* (*get_result) (FreeSmartphonePIMCallQuerySync* self, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMCallQuerySync* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMCallQuerySync* self, GError** error);
};

struct _FreeSmartphonePIMContactsIface {
	GTypeInterface parent_iface;
	void (*add) (FreeSmartphonePIMContacts* self, GHashTable* contact_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_finish) (FreeSmartphonePIMContacts* self, GAsyncResult* _res_, GError** error);
	void (*get_single_entry_single_field) (FreeSmartphonePIMContacts* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_single_entry_single_field_finish) (FreeSmartphonePIMContacts* self, GAsyncResult* _res_, GError** error);
	void (*query) (FreeSmartphonePIMContacts* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_finish) (FreeSmartphonePIMContacts* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMContactsSyncIface {
	GTypeInterface parent_iface;
	gchar* (*add) (FreeSmartphonePIMContactsSync* self, GHashTable* contact_data, GError** error);
	gchar* (*get_single_entry_single_field) (FreeSmartphonePIMContactsSync* self, GHashTable* query, const gchar* field, GError** error);
	gchar* (*query) (FreeSmartphonePIMContactsSync* self, GHashTable* query, GError** error);
};

struct _FreeSmartphonePIMMessagesIface {
	GTypeInterface parent_iface;
	void (*add) (FreeSmartphonePIMMessages* self, GHashTable* message_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_finish) (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
	void (*add_incoming) (FreeSmartphonePIMMessages* self, GHashTable* message_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_incoming_finish) (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
	void (*get_single_entry_single_field) (FreeSmartphonePIMMessages* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_single_entry_single_field_finish) (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
	void (*query) (FreeSmartphonePIMMessages* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_finish) (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
	void (*query_threads) (FreeSmartphonePIMMessages* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_threads_finish) (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
	void (*get_unread_messages) (FreeSmartphonePIMMessages* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_unread_messages_finish) (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMMessagesSyncIface {
	GTypeInterface parent_iface;
	gchar* (*add) (FreeSmartphonePIMMessagesSync* self, GHashTable* message_data, GError** error);
	gchar* (*add_incoming) (FreeSmartphonePIMMessagesSync* self, GHashTable* message_data, GError** error);
	gchar* (*get_single_entry_single_field) (FreeSmartphonePIMMessagesSync* self, GHashTable* query, const gchar* field, GError** error);
	gchar* (*query) (FreeSmartphonePIMMessagesSync* self, GHashTable* query, GError** error);
	gchar* (*query_threads) (FreeSmartphonePIMMessagesSync* self, GHashTable* query, GError** error);
	gint (*get_unread_messages) (FreeSmartphonePIMMessagesSync* self, GError** error);
};

struct _FreeSmartphonePIMTaskIface {
	GTypeInterface parent_iface;
	void (*get_content) (FreeSmartphonePIMTask* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_content_finish) (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_fields) (FreeSmartphonePIMTask* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_multiple_fields_finish) (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
	gchar** (*get_used_backends) (FreeSmartphonePIMTask* self, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMTask* self, GHashTable* task_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*update_finish) (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
	void (*delete) (FreeSmartphonePIMTask* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_finish) (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMTaskSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_content) (FreeSmartphonePIMTaskSync* self, GError** error);
	GHashTable* (*get_multiple_fields) (FreeSmartphonePIMTaskSync* self, const gchar* field_list, GError** error);
	gchar** (*get_used_backends) (FreeSmartphonePIMTaskSync* self, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMTaskSync* self, GHashTable* task_data, GError** error);
	void (*delete) (FreeSmartphonePIMTaskSync* self, GError** error);
};

struct _FreeSmartphonePIMMessageFolderIface {
	GTypeInterface parent_iface;
	void (*get_message_count) (FreeSmartphonePIMMessageFolder* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_message_count_finish) (FreeSmartphonePIMMessageFolder* self, GAsyncResult* _res_, GError** error);
	void (*get_message_paths) (FreeSmartphonePIMMessageFolder* self, gint first, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_message_paths_finish) (FreeSmartphonePIMMessageFolder* self, GAsyncResult* _res_, int* result_length1, GError** error);
};

struct _FreeSmartphonePIMMessageFolderSyncIface {
	GTypeInterface parent_iface;
	gint (*get_message_count) (FreeSmartphonePIMMessageFolderSync* self, GError** error);
	gchar** (*get_message_paths) (FreeSmartphonePIMMessageFolderSync* self, gint first, gint count, int* result_length1, GError** error);
};

struct _FreeSmartphonePIMCallIface {
	GTypeInterface parent_iface;
	void (*get_content) (FreeSmartphonePIMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_content_finish) (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_fields) (FreeSmartphonePIMCall* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_multiple_fields_finish) (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
	void (*get_used_backends) (FreeSmartphonePIMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_used_backends_finish) (FreeSmartphonePIMCall* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMCall* self, GHashTable* call_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*update_finish) (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
	void (*delete) (FreeSmartphonePIMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_finish) (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMCallSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_content) (FreeSmartphonePIMCallSync* self, GError** error);
	GHashTable* (*get_multiple_fields) (FreeSmartphonePIMCallSync* self, const gchar* field_list, GError** error);
	gchar** (*get_used_backends) (FreeSmartphonePIMCallSync* self, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMCallSync* self, GHashTable* call_data, GError** error);
	void (*delete) (FreeSmartphonePIMCallSync* self, GError** error);
};

struct _FreeSmartphonePIMMessageQueryIface {
	GTypeInterface parent_iface;
	void (*get_result_count) (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_result_count_finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
	void (*rewind) (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*rewind_finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
	void (*skip) (FreeSmartphonePIMMessageQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*skip_finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_message_path) (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_message_path_finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_result) (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_result_finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_results) (FreeSmartphonePIMMessageQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable** (*get_multiple_results_finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*dispose__finish) (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMMessageQuerySyncIface {
	GTypeInterface parent_iface;
	gint (*get_result_count) (FreeSmartphonePIMMessageQuerySync* self, GError** error);
	void (*rewind) (FreeSmartphonePIMMessageQuerySync* self, GError** error);
	void (*skip) (FreeSmartphonePIMMessageQuerySync* self, gint count, GError** error);
	gchar* (*get_message_path) (FreeSmartphonePIMMessageQuerySync* self, GError** error);
	GHashTable* (*get_result) (FreeSmartphonePIMMessageQuerySync* self, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMMessageQuerySync* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMMessageQuerySync* self, GError** error);
};

struct _FreeSmartphonePIMContactIface {
	GTypeInterface parent_iface;
	void (*get_content) (FreeSmartphonePIMContact* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_content_finish) (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_fields) (FreeSmartphonePIMContact* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_multiple_fields_finish) (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
	void (*get_used_backends) (FreeSmartphonePIMContact* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_used_backends_finish) (FreeSmartphonePIMContact* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMContact* self, GHashTable* contact_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*update_finish) (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
	void (*delete) (FreeSmartphonePIMContact* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_finish) (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMContactSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_content) (FreeSmartphonePIMContactSync* self, GError** error);
	GHashTable* (*get_multiple_fields) (FreeSmartphonePIMContactSync* self, const gchar* field_list, GError** error);
	gchar** (*get_used_backends) (FreeSmartphonePIMContactSync* self, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMContactSync* self, GHashTable* contact_data, GError** error);
	void (*delete) (FreeSmartphonePIMContactSync* self, GError** error);
};

struct _FreeSmartphonePIMCallsIface {
	GTypeInterface parent_iface;
	void (*add) (FreeSmartphonePIMCalls* self, GHashTable* call_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_finish) (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
	void (*get_single_entry_single_field) (FreeSmartphonePIMCalls* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_single_entry_single_field_finish) (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
	void (*query) (FreeSmartphonePIMCalls* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_finish) (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
	void (*get_new_missed_calls) (FreeSmartphonePIMCalls* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_new_missed_calls_finish) (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMCallsSyncIface {
	GTypeInterface parent_iface;
	gchar* (*add) (FreeSmartphonePIMCallsSync* self, GHashTable* call_data, GError** error);
	gchar* (*get_single_entry_single_field) (FreeSmartphonePIMCallsSync* self, GHashTable* query, const gchar* field, GError** error);
	gchar* (*query) (FreeSmartphonePIMCallsSync* self, GHashTable* query, GError** error);
	gint (*get_new_missed_calls) (FreeSmartphonePIMCallsSync* self, GError** error);
};

struct _FreeSmartphonePIMDatesIface {
	GTypeInterface parent_iface;
	void (*add) (FreeSmartphonePIMDates* self, GHashTable* date_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_finish) (FreeSmartphonePIMDates* self, GAsyncResult* _res_, GError** error);
	void (*get_single_entry_single_field) (FreeSmartphonePIMDates* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_single_entry_single_field_finish) (FreeSmartphonePIMDates* self, GAsyncResult* _res_, GError** error);
	void (*query) (FreeSmartphonePIMDates* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_finish) (FreeSmartphonePIMDates* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMDatesSyncIface {
	GTypeInterface parent_iface;
	gchar* (*add) (FreeSmartphonePIMDatesSync* self, GHashTable* date_data, GError** error);
	gchar* (*get_single_entry_single_field) (FreeSmartphonePIMDatesSync* self, GHashTable* query, const gchar* field, GError** error);
	gchar* (*query) (FreeSmartphonePIMDatesSync* self, GHashTable* query, GError** error);
};

struct _FreeSmartphonePIMNotesIface {
	GTypeInterface parent_iface;
	void (*add) (FreeSmartphonePIMNotes* self, GHashTable* note_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_finish) (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, GError** error);
	void (*get_used_tags) (FreeSmartphonePIMNotes* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_used_tags_finish) (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_single_entry_single_field) (FreeSmartphonePIMNotes* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_single_entry_single_field_finish) (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, GError** error);
	void (*query) (FreeSmartphonePIMNotes* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_finish) (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMNotesSyncIface {
	GTypeInterface parent_iface;
	gchar* (*add) (FreeSmartphonePIMNotesSync* self, GHashTable* note_data, GError** error);
	gchar** (*get_used_tags) (FreeSmartphonePIMNotesSync* self, int* result_length1, GError** error);
	gchar* (*get_single_entry_single_field) (FreeSmartphonePIMNotesSync* self, GHashTable* query, const gchar* field, GError** error);
	gchar* (*query) (FreeSmartphonePIMNotesSync* self, GHashTable* query, GError** error);
};

struct _FreeSmartphonePIMTypesIface {
	GTypeInterface parent_iface;
	void (*list) (FreeSmartphonePIMTypes* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*list_finish) (FreeSmartphonePIMTypes* self, GAsyncResult* _res_, int* result_length1, GError** error);
};

struct _FreeSmartphonePIMTypesSyncIface {
	GTypeInterface parent_iface;
	gchar** (*list) (FreeSmartphonePIMTypesSync* self, int* result_length1, GError** error);
};

struct _FreeSmartphonePIMTasksIface {
	GTypeInterface parent_iface;
	void (*add) (FreeSmartphonePIMTasks* self, GHashTable* task_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*add_finish) (FreeSmartphonePIMTasks* self, GAsyncResult* _res_, GError** error);
	void (*get_single_task_single_field) (FreeSmartphonePIMTasks* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_single_task_single_field_finish) (FreeSmartphonePIMTasks* self, GAsyncResult* _res_, GError** error);
	void (*query) (FreeSmartphonePIMTasks* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*query_finish) (FreeSmartphonePIMTasks* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMTasksSyncIface {
	GTypeInterface parent_iface;
	gchar* (*add) (FreeSmartphonePIMTasksSync* self, GHashTable* task_data, GError** error);
	gchar* (*get_single_task_single_field) (FreeSmartphonePIMTasksSync* self, GHashTable* query, const gchar* field, GError** error);
	gchar* (*query) (FreeSmartphonePIMTasksSync* self, GHashTable* query, GError** error);
};

struct _FreeSmartphonePIMNoteIface {
	GTypeInterface parent_iface;
	void (*get_content) (FreeSmartphonePIMNote* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_content_finish) (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_fields) (FreeSmartphonePIMNote* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_multiple_fields_finish) (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
	void (*get_used_backends) (FreeSmartphonePIMNote* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_used_backends_finish) (FreeSmartphonePIMNote* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMNote* self, GHashTable* note_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*update_finish) (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
	void (*delete) (FreeSmartphonePIMNote* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_finish) (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMNoteSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_content) (FreeSmartphonePIMNoteSync* self, GError** error);
	GHashTable* (*get_multiple_fields) (FreeSmartphonePIMNoteSync* self, const gchar* field_list, GError** error);
	gchar** (*get_used_backends) (FreeSmartphonePIMNoteSync* self, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMNoteSync* self, GHashTable* note_data, GError** error);
	void (*delete) (FreeSmartphonePIMNoteSync* self, GError** error);
};

struct _FreeSmartphonePIMDateIface {
	GTypeInterface parent_iface;
	void (*get_content) (FreeSmartphonePIMDate* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_content_finish) (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_fields) (FreeSmartphonePIMDate* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_multiple_fields_finish) (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
	void (*get_used_backends) (FreeSmartphonePIMDate* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar** (*get_used_backends_finish) (FreeSmartphonePIMDate* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMDate* self, GHashTable* date_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*update_finish) (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
	void (*delete) (FreeSmartphonePIMDate* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*delete_finish) (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMDateSyncIface {
	GTypeInterface parent_iface;
	GHashTable* (*get_content) (FreeSmartphonePIMDateSync* self, GError** error);
	GHashTable* (*get_multiple_fields) (FreeSmartphonePIMDateSync* self, const gchar* field_list, GError** error);
	gchar** (*get_used_backends) (FreeSmartphonePIMDateSync* self, int* result_length1, GError** error);
	void (*update) (FreeSmartphonePIMDateSync* self, GHashTable* date_data, GError** error);
	void (*delete) (FreeSmartphonePIMDateSync* self, GError** error);
};

struct _FreeSmartphonePIMContactQueryIface {
	GTypeInterface parent_iface;
	void (*get_result_count) (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_result_count_finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
	void (*rewind) (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*rewind_finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
	void (*skip) (FreeSmartphonePIMContactQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*skip_finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_contact_path) (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*get_contact_path_finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_result) (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable* (*get_result_finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
	void (*get_multiple_results) (FreeSmartphonePIMContactQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
	GHashTable** (*get_multiple_results_finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*dispose__finish) (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphonePIMContactQuerySyncIface {
	GTypeInterface parent_iface;
	gint (*get_result_count) (FreeSmartphonePIMContactQuerySync* self, GError** error);
	void (*rewind) (FreeSmartphonePIMContactQuerySync* self, GError** error);
	void (*skip) (FreeSmartphonePIMContactQuerySync* self, gint count, GError** error);
	gchar* (*get_contact_path) (FreeSmartphonePIMContactQuerySync* self, GError** error);
	GHashTable* (*get_result) (FreeSmartphonePIMContactQuerySync* self, GError** error);
	GHashTable** (*get_multiple_results) (FreeSmartphonePIMContactQuerySync* self, gint count, int* result_length1, GError** error);
	void (*dispose_) (FreeSmartphonePIMContactQuerySync* self, GError** error);
};

typedef enum  {
	FREE_SMARTPHONE_AUDIO_MODE_NORMAL,
	FREE_SMARTPHONE_AUDIO_MODE_CALL
} FreeSmartphoneAudioMode;

typedef enum  {
	FREE_SMARTPHONE_AUDIO_ERROR_NOT_SUPPORTED_DEVICE,
	FREE_SMARTPHONE_AUDIO_ERROR_DEVICE_STACK_UNDERFLOW
} FreeSmartphoneAudioError;
#define FREE_SMARTPHONE_AUDIO_ERROR free_smartphone_audio_error_quark ()
typedef enum  {
	FREE_SMARTPHONE_AUDIO_DEVICE_BACKSPEAKER,
	FREE_SMARTPHONE_AUDIO_DEVICE_FRONTSPEAKER,
	FREE_SMARTPHONE_AUDIO_DEVICE_HEADSET,
	FREE_SMARTPHONE_AUDIO_DEVICE_BLUETOOTH_SCO,
	FREE_SMARTPHONE_AUDIO_DEVICE_BLUETOOTH_A2DP
} FreeSmartphoneAudioDevice;

typedef enum  {
	FREE_SMARTPHONE_AUDIO_CONTROL_SPEAKER,
	FREE_SMARTPHONE_AUDIO_CONTROL_MICROPHONE
} FreeSmartphoneAudioControl;

typedef enum  {
	FREE_SMARTPHONE_AUDIO_STREAM_INVALID,
	FREE_SMARTPHONE_AUDIO_STREAM_MEDIA,
	FREE_SMARTPHONE_AUDIO_STREAM_ALERT,
	FREE_SMARTPHONE_AUDIO_STREAM_RINGTONE,
	FREE_SMARTPHONE_AUDIO_STREAM_ALARM,
	FREE_SMARTPHONE_AUDIO_STREAM_NAVIGATION
} FreeSmartphoneAudioStream;

struct _FreeSmartphoneAudioManagerIface {
	GTypeInterface parent_iface;
	void (*set_mode) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioMode mode, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_mode_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*get_mode) (FreeSmartphoneAudioManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneAudioMode (*get_mode_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*set_device) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioDevice name, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_device_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*get_device) (FreeSmartphoneAudioManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneAudioDevice (*get_device_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*push_device) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioDevice device, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*push_device_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*pull_device) (FreeSmartphoneAudioManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneAudioDevice (*pull_device_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*get_available_devices) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioMode mode, GAsyncReadyCallback _callback_, gpointer _user_data_);
	FreeSmartphoneAudioDevice* (*get_available_devices_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, int* result_length1, GError** error);
	void (*get_volume) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gint (*get_volume_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*set_volume) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, gint volume, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_volume_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*set_mute) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, gboolean mute, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*set_mute_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*get_mute) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gboolean (*get_mute_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*register_session) (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioStream stream, GAsyncReadyCallback _callback_, gpointer _user_data_);
	gchar* (*register_session_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
	void (*release_session) (FreeSmartphoneAudioManager* self, const gchar* token, GAsyncReadyCallback _callback_, gpointer _user_data_);
	void (*release_session_finish) (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
};

struct _FreeSmartphoneAudioManagerSyncIface {
	GTypeInterface parent_iface;
	void (*set_mode) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioMode mode, GError** error);
	FreeSmartphoneAudioMode (*get_mode) (FreeSmartphoneAudioManagerSync* self, GError** error);
	void (*set_device) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioDevice name, GError** error);
	FreeSmartphoneAudioDevice (*get_device) (FreeSmartphoneAudioManagerSync* self, GError** error);
	void (*push_device) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioDevice device, GError** error);
	FreeSmartphoneAudioDevice (*pull_device) (FreeSmartphoneAudioManagerSync* self, GError** error);
	FreeSmartphoneAudioDevice* (*get_available_devices) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioMode mode, int* result_length1, GError** error);
	gint (*get_volume) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, GError** error);
	void (*set_volume) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, gint volume, GError** error);
	void (*set_mute) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, gboolean mute, GError** error);
	gboolean (*get_mute) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, GError** error);
	gchar* (*register_session) (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioStream stream, GError** error);
	void (*release_session) (FreeSmartphoneAudioManagerSync* self, const gchar* token, GError** error);
};


GType free_smartphone_error0_get_type (void) G_GNUC_CONST;
GType free_smartphone_error0_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_error0_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_error0_sync_get_type (void) G_GNUC_CONST;
GType free_smartphone_error0_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_error0_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_events_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_events_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_events_get_type (void) G_GNUC_CONST;
void free_smartphone_events_add_rule (FreeSmartphoneEvents* self, const gchar* rule, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_events_add_rule_finish (FreeSmartphoneEvents* self, GAsyncResult* _res_, GError** error);
void free_smartphone_events_remove_rule (FreeSmartphoneEvents* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_events_remove_rule_finish (FreeSmartphoneEvents* self, GAsyncResult* _res_, GError** error);
void free_smartphone_events_trigger_test (FreeSmartphoneEvents* self, const gchar* name, gboolean value, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_events_trigger_test_finish (FreeSmartphoneEvents* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_events_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_events_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_events_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_events_sync_add_rule (FreeSmartphoneEventsSync* self, const gchar* rule, GError** error);
void free_smartphone_events_sync_remove_rule (FreeSmartphoneEventsSync* self, const gchar* name, GError** error);
void free_smartphone_events_sync_trigger_test (FreeSmartphoneEventsSync* self, const gchar* name, gboolean value, GError** error);
GType free_smartphone_usage_system_action_get_type (void) G_GNUC_CONST;
FreeSmartphoneUsageSystemAction free_smartphone_usage_system_action_from_string (const char* str, GError** error);
const char* free_smartphone_usage_system_action_to_string (FreeSmartphoneUsageSystemAction value);
GType free_smartphone_phone_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_phone_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_phone_get_type (void) G_GNUC_CONST;
void free_smartphone_phone_init_protocols (FreeSmartphonePhone* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_phone_init_protocols_finish (FreeSmartphonePhone* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_phone_create_call (FreeSmartphonePhone* self, const gchar* number, const gchar* protocol, gboolean force, GAsyncReadyCallback _callback_, gpointer _user_data_);
char* free_smartphone_phone_create_call_finish (FreeSmartphonePhone* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_phone_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_phone_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_phone_sync_get_type (void) G_GNUC_CONST;
gchar** free_smartphone_phone_sync_init_protocols (FreeSmartphonePhoneSync* self, int* result_length1, GError** error);
char* free_smartphone_phone_sync_create_call (FreeSmartphonePhoneSync* self, const gchar* number, const gchar* protocol, gboolean force, GError** error);
GType free_smartphone_notification_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_notification_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_notification_get_type (void) G_GNUC_CONST;
void free_smartphone_notification_alarm (FreeSmartphoneNotification* self, GError** error);
GType free_smartphone_notification_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_notification_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_notification_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_notification_sync_alarm (FreeSmartphoneNotificationSync* self, GError** error);
GType free_smartphone_usage_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_usage_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GQuark free_smartphone_usage_error_quark (void);
GQuark free_smartphone_error_quark (void);
GType free_smartphone_usage_resource_policy_get_type (void) G_GNUC_CONST;
FreeSmartphoneUsageResourcePolicy free_smartphone_usage_resource_policy_from_string (const char* str, GError** error);
const char* free_smartphone_usage_resource_policy_to_string (FreeSmartphoneUsageResourcePolicy value);
GType free_smartphone_usage_get_type (void) G_GNUC_CONST;
void free_smartphone_usage_register_resource (FreeSmartphoneUsage* self, const gchar* name, const char* path, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_register_resource_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_unregister_resource (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_unregister_resource_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_list_resources (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_usage_list_resources_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_usage_get_resource_policy (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneUsageResourcePolicy free_smartphone_usage_get_resource_policy_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_set_resource_policy (FreeSmartphoneUsage* self, const gchar* name, FreeSmartphoneUsageResourcePolicy policy, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_set_resource_policy_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_get_resource_state (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_usage_get_resource_state_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_get_resource_users (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_usage_get_resource_users_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_usage_request_resource (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_request_resource_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_release_resource (FreeSmartphoneUsage* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_release_resource_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_suspend (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_suspend_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_resume (FreeSmartphoneUsage* self, const gchar* source, const gchar* reason, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_resume_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_shutdown (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_shutdown_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_usage_reboot (FreeSmartphoneUsage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_usage_reboot_finish (FreeSmartphoneUsage* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_usage_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_usage_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_usage_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_usage_sync_register_resource (FreeSmartphoneUsageSync* self, const gchar* name, const char* path, GError** error);
void free_smartphone_usage_sync_unregister_resource (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
gchar** free_smartphone_usage_sync_list_resources (FreeSmartphoneUsageSync* self, int* result_length1, GError** error);
FreeSmartphoneUsageResourcePolicy free_smartphone_usage_sync_get_resource_policy (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
void free_smartphone_usage_sync_set_resource_policy (FreeSmartphoneUsageSync* self, const gchar* name, FreeSmartphoneUsageResourcePolicy policy, GError** error);
gboolean free_smartphone_usage_sync_get_resource_state (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
gchar** free_smartphone_usage_sync_get_resource_users (FreeSmartphoneUsageSync* self, const gchar* name, int* result_length1, GError** error);
void free_smartphone_usage_sync_request_resource (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
void free_smartphone_usage_sync_release_resource (FreeSmartphoneUsageSync* self, const gchar* name, GError** error);
void free_smartphone_usage_sync_suspend (FreeSmartphoneUsageSync* self, GError** error);
void free_smartphone_usage_sync_resume (FreeSmartphoneUsageSync* self, const gchar* source, const gchar* reason, GError** error);
void free_smartphone_usage_sync_shutdown (FreeSmartphoneUsageSync* self, GError** error);
void free_smartphone_usage_sync_reboot (FreeSmartphoneUsageSync* self, GError** error);
GType free_smartphone_location_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_location_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_location_get_type (void) G_GNUC_CONST;
void free_smartphone_location_get_location (FreeSmartphoneLocation* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_location_get_location_finish (FreeSmartphoneLocation* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_location_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_location_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_location_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_location_sync_get_location (FreeSmartphoneLocationSync* self, GError** error);
GType free_smartphone_phone_call_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_phone_call_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_phone_call_get_type (void) G_GNUC_CONST;
void free_smartphone_phone_call_get_peer (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_phone_call_get_peer_finish (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_phone_call_initiate (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_phone_call_initiate_finish (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_phone_call_activate (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_phone_call_activate_finish (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_phone_call_release (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_phone_call_release_finish (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_phone_call_get_status (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_phone_call_get_status_finish (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_phone_call_remove (FreeSmartphonePhoneCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_phone_call_remove_finish (FreeSmartphonePhoneCall* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_phone_call_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_phone_call_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_phone_call_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_phone_call_sync_get_peer (FreeSmartphonePhoneCallSync* self, GError** error);
gchar* free_smartphone_phone_call_sync_initiate (FreeSmartphonePhoneCallSync* self, GError** error);
gchar* free_smartphone_phone_call_sync_activate (FreeSmartphonePhoneCallSync* self, GError** error);
gchar* free_smartphone_phone_call_sync_release (FreeSmartphonePhoneCallSync* self, GError** error);
gchar* free_smartphone_phone_call_sync_get_status (FreeSmartphonePhoneCallSync* self, GError** error);
void free_smartphone_phone_call_sync_remove (FreeSmartphonePhoneCallSync* self, GError** error);
GType free_smartphone_preferences_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_preferences_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_preferences_get_type (void) G_GNUC_CONST;
void free_smartphone_preferences_get_services (FreeSmartphonePreferences* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_preferences_get_services_finish (FreeSmartphonePreferences* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_preferences_get_service (FreeSmartphonePreferences* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
char* free_smartphone_preferences_get_service_finish (FreeSmartphonePreferences* self, GAsyncResult* _res_, GError** error);
void free_smartphone_preferences_get_profiles (FreeSmartphonePreferences* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_preferences_get_profiles_finish (FreeSmartphonePreferences* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_preferences_get_profile (FreeSmartphonePreferences* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_preferences_get_profile_finish (FreeSmartphonePreferences* self, GAsyncResult* _res_, GError** error);
void free_smartphone_preferences_set_profile (FreeSmartphonePreferences* self, const gchar* profile, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_preferences_set_profile_finish (FreeSmartphonePreferences* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_preferences_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_preferences_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_preferences_sync_get_type (void) G_GNUC_CONST;
gchar** free_smartphone_preferences_sync_get_services (FreeSmartphonePreferencesSync* self, int* result_length1, GError** error);
char* free_smartphone_preferences_sync_get_service (FreeSmartphonePreferencesSync* self, const gchar* name, GError** error);
gchar** free_smartphone_preferences_sync_get_profiles (FreeSmartphonePreferencesSync* self, int* result_length1, GError** error);
gchar* free_smartphone_preferences_sync_get_profile (FreeSmartphonePreferencesSync* self, GError** error);
void free_smartphone_preferences_sync_set_profile (FreeSmartphonePreferencesSync* self, const gchar* profile, GError** error);
GType free_smartphone_preferences_service_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_preferences_service_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_preferences_service_get_type (void) G_GNUC_CONST;
void free_smartphone_preferences_service_get_keys (FreeSmartphonePreferencesService* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_preferences_service_get_keys_finish (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_preferences_service_get_value (FreeSmartphonePreferencesService* self, const gchar* key, GAsyncReadyCallback _callback_, gpointer _user_data_);
GVariant* free_smartphone_preferences_service_get_value_finish (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
void free_smartphone_preferences_service_set_value (FreeSmartphonePreferencesService* self, const gchar* key, GVariant* value, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_preferences_service_set_value_finish (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
void free_smartphone_preferences_service_is_profilable (FreeSmartphonePreferencesService* self, const gchar* key, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_preferences_service_is_profilable_finish (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
void free_smartphone_preferences_service_get_type_ (FreeSmartphonePreferencesService* self, const gchar* key, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_preferences_service_get_type__finish (FreeSmartphonePreferencesService* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_preferences_service_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_preferences_service_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_preferences_service_sync_get_type (void) G_GNUC_CONST;
gchar** free_smartphone_preferences_service_sync_get_keys (FreeSmartphonePreferencesServiceSync* self, int* result_length1, GError** error);
GVariant* free_smartphone_preferences_service_sync_get_value (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GError** error);
void free_smartphone_preferences_service_sync_set_value (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GVariant* value, GError** error);
gboolean free_smartphone_preferences_service_sync_is_profilable (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GError** error);
gchar* free_smartphone_preferences_service_sync_get_type_ (FreeSmartphonePreferencesServiceSync* self, const gchar* key, GError** error);
GType free_smartphone_network_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_network_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_network_get_type (void) G_GNUC_CONST;
void free_smartphone_network_start_connection_sharing_with_interface (FreeSmartphoneNetwork* self, const gchar* interface, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_network_start_connection_sharing_with_interface_finish (FreeSmartphoneNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_network_stop_connection_sharing_with_interface (FreeSmartphoneNetwork* self, const gchar* interface, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_network_stop_connection_sharing_with_interface_finish (FreeSmartphoneNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_network_offer_default_route (FreeSmartphoneNetwork* self, const gchar* technology, const gchar* interface, const gchar* ipv4address, const gchar* ipv4mask, const gchar* ipv4gateway, const gchar* dns1, const gchar* dns2, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_network_offer_default_route_finish (FreeSmartphoneNetwork* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_network_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_network_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_network_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_network_sync_start_connection_sharing_with_interface (FreeSmartphoneNetworkSync* self, const gchar* interface, GError** error);
void free_smartphone_network_sync_stop_connection_sharing_with_interface (FreeSmartphoneNetworkSync* self, const gchar* interface, GError** error);
void free_smartphone_network_sync_offer_default_route (FreeSmartphoneNetworkSync* self, const gchar* technology, const gchar* interface, const gchar* ipv4address, const gchar* ipv4mask, const gchar* ipv4gateway, const gchar* dns1, const gchar* dns2, GError** error);
GType free_smartphone_info_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_info_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_info_get_type (void) G_GNUC_CONST;
void free_smartphone_info_get_info (FreeSmartphoneInfo* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_info_get_info_finish (FreeSmartphoneInfo* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_info_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_info_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_info_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_info_sync_get_info (FreeSmartphoneInfoSync* self, GError** error);
GType free_smartphone_resource_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_resource_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GQuark free_smartphone_resource_error_quark (void);
GType free_smartphone_resource_get_type (void) G_GNUC_CONST;
void free_smartphone_resource_enable (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_resource_enable_finish (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
void free_smartphone_resource_disable (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_resource_disable_finish (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
void free_smartphone_resource_suspend (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_resource_suspend_finish (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
void free_smartphone_resource_resume (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_resource_resume_finish (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
void free_smartphone_resource_get_dependencies (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_resource_get_dependencies_finish (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
void free_smartphone_resource_get_default_policy (FreeSmartphoneResource* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneUsageResourcePolicy free_smartphone_resource_get_default_policy_finish (FreeSmartphoneResource* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_resource_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_resource_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_resource_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_resource_sync_enable (FreeSmartphoneResourceSync* self, GError** error);
void free_smartphone_resource_sync_disable (FreeSmartphoneResourceSync* self, GError** error);
void free_smartphone_resource_sync_suspend (FreeSmartphoneResourceSync* self, GError** error);
void free_smartphone_resource_sync_resume (FreeSmartphoneResourceSync* self, GError** error);
GHashTable* free_smartphone_resource_sync_get_dependencies (FreeSmartphoneResourceSync* self, GError** error);
FreeSmartphoneUsageResourcePolicy free_smartphone_resource_sync_get_default_policy (FreeSmartphoneResourceSync* self, GError** error);
GType free_smartphone_context_client_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_context_client_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_context_client_get_type (void) G_GNUC_CONST;
void free_smartphone_context_client_location_update (FreeSmartphoneContextClient* self, GHashTable* from, GHashTable* to, GError** error);
GType free_smartphone_context_client_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_context_client_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_context_client_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_context_client_sync_location_update (FreeSmartphoneContextClientSync* self, GHashTable* from, GHashTable* to, GError** error);
GType free_smartphone_context_manager_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_context_manager_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_context_location_update_accuracy_get_type (void) G_GNUC_CONST;
FreeSmartphoneContextLocationUpdateAccuracy free_smartphone_context_location_update_accuracy_from_string (const char* str, GError** error);
const char* free_smartphone_context_location_update_accuracy_to_string (FreeSmartphoneContextLocationUpdateAccuracy value);
GType free_smartphone_context_manager_get_type (void) G_GNUC_CONST;
void free_smartphone_context_manager_subscribe_location_updates (FreeSmartphoneContextManager* self, FreeSmartphoneContextLocationUpdateAccuracy desired_accuracy, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_context_manager_subscribe_location_updates_finish (FreeSmartphoneContextManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_context_manager_unsubscribe_location_updates (FreeSmartphoneContextManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_context_manager_unsubscribe_location_updates_finish (FreeSmartphoneContextManager* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_context_manager_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_context_manager_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_context_manager_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_context_manager_sync_subscribe_location_updates (FreeSmartphoneContextManagerSync* self, FreeSmartphoneContextLocationUpdateAccuracy desired_accuracy, GError** error);
void free_smartphone_context_manager_sync_unsubscribe_location_updates (FreeSmartphoneContextManagerSync* self, GError** error);
GType free_smartphone_data_world_country_get_type (void) G_GNUC_CONST;
FreeSmartphoneDataWorldCountry* free_smartphone_data_world_country_dup (const FreeSmartphoneDataWorldCountry* self);
void free_smartphone_data_world_country_free (FreeSmartphoneDataWorldCountry* self);
void free_smartphone_data_world_country_copy (const FreeSmartphoneDataWorldCountry* self, FreeSmartphoneDataWorldCountry* dest);
void free_smartphone_data_world_country_destroy (FreeSmartphoneDataWorldCountry* self);
void free_smartphone_data_world_country_init (FreeSmartphoneDataWorldCountry *self, const gchar* code, const gchar* name);
void free_smartphone_data_world_country_from_variant (GVariant* v, FreeSmartphoneDataWorldCountry* result);
GType free_smartphone_data_world_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_data_world_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_data_world_connectivity_access_point_get_type (void) G_GNUC_CONST;
FreeSmartphoneDataWorldConnectivityAccessPoint* free_smartphone_data_world_connectivity_access_point_dup (const FreeSmartphoneDataWorldConnectivityAccessPoint* self);
void free_smartphone_data_world_connectivity_access_point_free (FreeSmartphoneDataWorldConnectivityAccessPoint* self);
void free_smartphone_data_world_connectivity_access_point_copy (const FreeSmartphoneDataWorldConnectivityAccessPoint* self, FreeSmartphoneDataWorldConnectivityAccessPoint* dest);
void free_smartphone_data_world_connectivity_access_point_destroy (FreeSmartphoneDataWorldConnectivityAccessPoint* self);
GType free_smartphone_data_world_get_type (void) G_GNUC_CONST;
void free_smartphone_data_world_get_all_countries (FreeSmartphoneDataWorld* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneDataWorldCountry* free_smartphone_data_world_get_all_countries_finish (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_data_world_get_country_code_for_mcc_mnc (FreeSmartphoneDataWorld* self, const gchar* mcc_mnc, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_data_world_get_country_code_for_mcc_mnc_finish (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, GError** error);
void free_smartphone_data_world_get_timezones_for_country_code (FreeSmartphoneDataWorld* self, const gchar* country_code, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_data_world_get_timezones_for_country_code_finish (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, GError** error);
void free_smartphone_data_world_get_apns_for_mcc_mnc (FreeSmartphoneDataWorld* self, const gchar* mcc_mnc, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneDataWorldConnectivityAccessPoint* free_smartphone_data_world_get_apns_for_mcc_mnc_finish (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_data_world_get_provider_name_for_mcc_mnc (FreeSmartphoneDataWorld* self, const gchar* mcc_mnc, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_data_world_get_provider_name_for_mcc_mnc_finish (FreeSmartphoneDataWorld* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_data_world_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_data_world_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_data_world_sync_get_type (void) G_GNUC_CONST;
FreeSmartphoneDataWorldCountry* free_smartphone_data_world_sync_get_all_countries (FreeSmartphoneDataWorldSync* self, int* result_length1, GError** error);
gchar* free_smartphone_data_world_sync_get_country_code_for_mcc_mnc (FreeSmartphoneDataWorldSync* self, const gchar* mcc_mnc, GError** error);
GHashTable* free_smartphone_data_world_sync_get_timezones_for_country_code (FreeSmartphoneDataWorldSync* self, const gchar* country_code, GError** error);
FreeSmartphoneDataWorldConnectivityAccessPoint* free_smartphone_data_world_sync_get_apns_for_mcc_mnc (FreeSmartphoneDataWorldSync* self, const gchar* mcc_mnc, int* result_length1, GError** error);
gchar* free_smartphone_data_world_sync_get_provider_name_for_mcc_mnc (FreeSmartphoneDataWorldSync* self, const gchar* mcc_mnc, GError** error);
void free_smartphone_data_world_connectivity_access_point_init (FreeSmartphoneDataWorldConnectivityAccessPoint *self, const gchar* description, const gchar* apn, const gchar* username, const gchar* password, const gchar* dns1, const gchar* dns2);
void free_smartphone_data_world_connectivity_access_point_from_variant (GVariant* v, FreeSmartphoneDataWorldConnectivityAccessPoint* result);
GType free_smartphone_device_idle_notifier_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_idle_notifier_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_idle_state_get_type (void) G_GNUC_CONST;
FreeSmartphoneDeviceIdleState free_smartphone_device_idle_state_from_string (const char* str, GError** error);
const char* free_smartphone_device_idle_state_to_string (FreeSmartphoneDeviceIdleState value);
GType free_smartphone_device_idle_notifier_get_type (void) G_GNUC_CONST;
void free_smartphone_device_idle_notifier_get_state (FreeSmartphoneDeviceIdleNotifier* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneDeviceIdleState free_smartphone_device_idle_notifier_get_state_finish (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_idle_notifier_get_timeouts (FreeSmartphoneDeviceIdleNotifier* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_device_idle_notifier_get_timeouts_finish (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_idle_notifier_set_timeout (FreeSmartphoneDeviceIdleNotifier* self, FreeSmartphoneDeviceIdleState status, gint timeout, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_idle_notifier_set_timeout_finish (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_idle_notifier_set_state (FreeSmartphoneDeviceIdleNotifier* self, FreeSmartphoneDeviceIdleState status, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_idle_notifier_set_state_finish (FreeSmartphoneDeviceIdleNotifier* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_idle_notifier_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_idle_notifier_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_idle_notifier_sync_get_type (void) G_GNUC_CONST;
FreeSmartphoneDeviceIdleState free_smartphone_device_idle_notifier_sync_get_state (FreeSmartphoneDeviceIdleNotifierSync* self, GError** error);
GHashTable* free_smartphone_device_idle_notifier_sync_get_timeouts (FreeSmartphoneDeviceIdleNotifierSync* self, GError** error);
void free_smartphone_device_idle_notifier_sync_set_timeout (FreeSmartphoneDeviceIdleNotifierSync* self, FreeSmartphoneDeviceIdleState status, gint timeout, GError** error);
void free_smartphone_device_idle_notifier_sync_set_state (FreeSmartphoneDeviceIdleNotifierSync* self, FreeSmartphoneDeviceIdleState status, GError** error);
GType free_smartphone_device_display_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_display_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_display_get_type (void) G_GNUC_CONST;
void free_smartphone_device_display_get_brightness (FreeSmartphoneDeviceDisplay* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_device_display_get_brightness_finish (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_display_set_brightness (FreeSmartphoneDeviceDisplay* self, gint brightness, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_display_set_brightness_finish (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_display_get_backlight_power (FreeSmartphoneDeviceDisplay* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_device_display_get_backlight_power_finish (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_display_set_backlight_power (FreeSmartphoneDeviceDisplay* self, gboolean power, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_display_set_backlight_power_finish (FreeSmartphoneDeviceDisplay* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_display_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_display_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_display_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_device_display_sync_get_brightness (FreeSmartphoneDeviceDisplaySync* self, GError** error);
void free_smartphone_device_display_sync_set_brightness (FreeSmartphoneDeviceDisplaySync* self, gint brightness, GError** error);
gboolean free_smartphone_device_display_sync_get_backlight_power (FreeSmartphoneDeviceDisplaySync* self, GError** error);
void free_smartphone_device_display_sync_set_backlight_power (FreeSmartphoneDeviceDisplaySync* self, gboolean power, GError** error);
GType free_smartphone_device_led_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_led_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_led_get_type (void) G_GNUC_CONST;
void free_smartphone_device_led_set_brightness (FreeSmartphoneDeviceLED* self, gint brightness, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_led_set_brightness_finish (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_led_set_blinking (FreeSmartphoneDeviceLED* self, gint on_duration, gint off_duration, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_led_set_blinking_finish (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_led_blink_seconds (FreeSmartphoneDeviceLED* self, gint seconds, gint on_duration, gint off_duration, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_led_blink_seconds_finish (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_led_set_networking (FreeSmartphoneDeviceLED* self, const gchar* interface, const gchar* mode, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_led_set_networking_finish (FreeSmartphoneDeviceLED* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_led_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_led_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_led_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_device_led_sync_set_brightness (FreeSmartphoneDeviceLEDSync* self, gint brightness, GError** error);
void free_smartphone_device_led_sync_set_blinking (FreeSmartphoneDeviceLEDSync* self, gint on_duration, gint off_duration, GError** error);
void free_smartphone_device_led_sync_blink_seconds (FreeSmartphoneDeviceLEDSync* self, gint seconds, gint on_duration, gint off_duration, GError** error);
void free_smartphone_device_led_sync_set_networking (FreeSmartphoneDeviceLEDSync* self, const gchar* interface, const gchar* mode, GError** error);
GType free_smartphone_device_vibrator_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_vibrator_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_vibrator_get_type (void) G_GNUC_CONST;
void free_smartphone_device_vibrator_vibrate_pattern (FreeSmartphoneDeviceVibrator* self, gint pulses, gint on_duration_ms, gint off_duration_ms, gint strength_percentage, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_vibrator_vibrate_pattern_finish (FreeSmartphoneDeviceVibrator* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_vibrator_vibrate (FreeSmartphoneDeviceVibrator* self, gint duration_ms, gint strength_percentage, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_vibrator_vibrate_finish (FreeSmartphoneDeviceVibrator* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_vibrator_stop (FreeSmartphoneDeviceVibrator* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_vibrator_stop_finish (FreeSmartphoneDeviceVibrator* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_vibrator_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_vibrator_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_vibrator_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_device_vibrator_sync_vibrate_pattern (FreeSmartphoneDeviceVibratorSync* self, gint pulses, gint on_duration_ms, gint off_duration_ms, gint strength_percentage, GError** error);
void free_smartphone_device_vibrator_sync_vibrate (FreeSmartphoneDeviceVibratorSync* self, gint duration_ms, gint strength_percentage, GError** error);
void free_smartphone_device_vibrator_sync_stop (FreeSmartphoneDeviceVibratorSync* self, GError** error);
GType free_smartphone_device_audio_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_audio_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GQuark free_smartphone_device_audio_error_quark (void);
GType free_smartphone_device_audio_get_type (void) G_GNUC_CONST;
void free_smartphone_device_audio_play_sound (FreeSmartphoneDeviceAudio* self, const gchar* name, gint loop, gint length, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_play_sound_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_stop_sound (FreeSmartphoneDeviceAudio* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_stop_sound_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_stop_all_sounds (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_stop_all_sounds_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_get_available_scenarios (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_device_audio_get_available_scenarios_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_device_audio_get_scenario (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_device_audio_get_scenario_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_set_scenario (FreeSmartphoneDeviceAudio* self, const gchar* scenario, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_set_scenario_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_push_scenario (FreeSmartphoneDeviceAudio* self, const gchar* scenario, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_push_scenario_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_pull_scenario (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_device_audio_pull_scenario_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_save_scenario (FreeSmartphoneDeviceAudio* self, const gchar* scenario, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_save_scenario_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_get_volume (FreeSmartphoneDeviceAudio* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint8 free_smartphone_device_audio_get_volume_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_audio_set_volume (FreeSmartphoneDeviceAudio* self, guint8 volume, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_audio_set_volume_finish (FreeSmartphoneDeviceAudio* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_audio_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_audio_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_audio_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_device_audio_sync_play_sound (FreeSmartphoneDeviceAudioSync* self, const gchar* name, gint loop, gint length, GError** error);
void free_smartphone_device_audio_sync_stop_sound (FreeSmartphoneDeviceAudioSync* self, const gchar* name, GError** error);
void free_smartphone_device_audio_sync_stop_all_sounds (FreeSmartphoneDeviceAudioSync* self, GError** error);
gchar** free_smartphone_device_audio_sync_get_available_scenarios (FreeSmartphoneDeviceAudioSync* self, int* result_length1, GError** error);
gchar* free_smartphone_device_audio_sync_get_scenario (FreeSmartphoneDeviceAudioSync* self, GError** error);
void free_smartphone_device_audio_sync_set_scenario (FreeSmartphoneDeviceAudioSync* self, const gchar* scenario, GError** error);
void free_smartphone_device_audio_sync_push_scenario (FreeSmartphoneDeviceAudioSync* self, const gchar* scenario, GError** error);
gchar* free_smartphone_device_audio_sync_pull_scenario (FreeSmartphoneDeviceAudioSync* self, GError** error);
void free_smartphone_device_audio_sync_save_scenario (FreeSmartphoneDeviceAudioSync* self, const gchar* scenario, GError** error);
guint8 free_smartphone_device_audio_sync_get_volume (FreeSmartphoneDeviceAudioSync* self, GError** error);
void free_smartphone_device_audio_sync_set_volume (FreeSmartphoneDeviceAudioSync* self, guint8 volume, GError** error);
GType free_smartphone_device_orientation_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_orientation_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_orientation_get_type (void) G_GNUC_CONST;
void free_smartphone_device_orientation_get_orientation (FreeSmartphoneDeviceOrientation* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_device_orientation_get_orientation_finish (FreeSmartphoneDeviceOrientation* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_orientation_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_orientation_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_orientation_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_device_orientation_sync_get_orientation (FreeSmartphoneDeviceOrientationSync* self, GError** error);
GType free_smartphone_device_proximity_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_proximity_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_proximity_get_type (void) G_GNUC_CONST;
void free_smartphone_device_proximity_get_proximity (FreeSmartphoneDeviceProximity* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_proximity_get_proximity_finish (FreeSmartphoneDeviceProximity* self, GAsyncResult* _res_, gint* proximity, gint* epoch, GError** error);
GType free_smartphone_device_proximity_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_proximity_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_proximity_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_device_proximity_sync_get_proximity (FreeSmartphoneDeviceProximitySync* self, gint* proximity, gint* epoch, GError** error);
GType free_smartphone_device_power_supply_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_power_supply_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_power_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneDevicePowerStatus free_smartphone_device_power_status_from_string (const char* str, GError** error);
const char* free_smartphone_device_power_status_to_string (FreeSmartphoneDevicePowerStatus value);
GType free_smartphone_device_power_supply_get_type (void) G_GNUC_CONST;
void free_smartphone_device_power_supply_get_capacity (FreeSmartphoneDevicePowerSupply* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_device_power_supply_get_capacity_finish (FreeSmartphoneDevicePowerSupply* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_power_supply_get_power_status (FreeSmartphoneDevicePowerSupply* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneDevicePowerStatus free_smartphone_device_power_supply_get_power_status_finish (FreeSmartphoneDevicePowerSupply* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_power_supply_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_power_supply_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_power_supply_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_device_power_supply_sync_get_capacity (FreeSmartphoneDevicePowerSupplySync* self, GError** error);
FreeSmartphoneDevicePowerStatus free_smartphone_device_power_supply_sync_get_power_status (FreeSmartphoneDevicePowerSupplySync* self, GError** error);
GType free_smartphone_device_realtime_clock_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_realtime_clock_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_realtime_clock_get_type (void) G_GNUC_CONST;
void free_smartphone_device_realtime_clock_get_current_time (FreeSmartphoneDeviceRealtimeClock* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_device_realtime_clock_get_current_time_finish (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_realtime_clock_set_current_time (FreeSmartphoneDeviceRealtimeClock* self, gint time, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_realtime_clock_set_current_time_finish (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_realtime_clock_get_wakeup_time (FreeSmartphoneDeviceRealtimeClock* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_device_realtime_clock_get_wakeup_time_finish (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_realtime_clock_set_wakeup_time (FreeSmartphoneDeviceRealtimeClock* self, gint time, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_realtime_clock_set_wakeup_time_finish (FreeSmartphoneDeviceRealtimeClock* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_realtime_clock_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_realtime_clock_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_realtime_clock_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_device_realtime_clock_sync_get_current_time (FreeSmartphoneDeviceRealtimeClockSync* self, GError** error);
void free_smartphone_device_realtime_clock_sync_set_current_time (FreeSmartphoneDeviceRealtimeClockSync* self, gint time, GError** error);
gint free_smartphone_device_realtime_clock_sync_get_wakeup_time (FreeSmartphoneDeviceRealtimeClockSync* self, GError** error);
void free_smartphone_device_realtime_clock_sync_set_wakeup_time (FreeSmartphoneDeviceRealtimeClockSync* self, gint time, GError** error);
GType free_smartphone_device_power_control_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_power_control_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_power_control_get_type (void) G_GNUC_CONST;
void free_smartphone_device_power_control_get_power (FreeSmartphoneDevicePowerControl* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_device_power_control_get_power_finish (FreeSmartphoneDevicePowerControl* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_power_control_set_power (FreeSmartphoneDevicePowerControl* self, gboolean on, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_power_control_set_power_finish (FreeSmartphoneDevicePowerControl* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_power_control_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_power_control_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_power_control_sync_get_type (void) G_GNUC_CONST;
gboolean free_smartphone_device_power_control_sync_get_power (FreeSmartphoneDevicePowerControlSync* self, GError** error);
void free_smartphone_device_power_control_sync_set_power (FreeSmartphoneDevicePowerControlSync* self, gboolean on, GError** error);
GType free_smartphone_device_info_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_info_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_info_get_type (void) G_GNUC_CONST;
void free_smartphone_device_info_get_cpu_info (FreeSmartphoneDeviceInfo* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_device_info_get_cpu_info_finish (FreeSmartphoneDeviceInfo* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_info_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_info_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_info_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_device_info_sync_get_cpu_info (FreeSmartphoneDeviceInfoSync* self, GError** error);
GType free_smartphone_device_input_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_input_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_input_get_type (void) G_GNUC_CONST;
void free_smartphone_device_input_get_id (FreeSmartphoneDeviceInput* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_device_input_get_id_finish (FreeSmartphoneDeviceInput* self, GAsyncResult* _res_, GError** error);
void free_smartphone_device_input_get_capabilities (FreeSmartphoneDeviceInput* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_device_input_get_capabilities_finish (FreeSmartphoneDeviceInput* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_device_input_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_input_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_input_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_device_input_sync_get_id (FreeSmartphoneDeviceInputSync* self, GError** error);
gchar* free_smartphone_device_input_sync_get_capabilities (FreeSmartphoneDeviceInputSync* self, GError** error);
GType free_smartphone_device_input_state_get_type (void) G_GNUC_CONST;
FreeSmartphoneDeviceInputState free_smartphone_device_input_state_from_string (const char* str, GError** error);
const char* free_smartphone_device_input_state_to_string (FreeSmartphoneDeviceInputState value);
GType free_smartphone_device_sound_state_get_type (void) G_GNUC_CONST;
FreeSmartphoneDeviceSoundState free_smartphone_device_sound_state_from_string (const char* str, GError** error);
const char* free_smartphone_device_sound_state_to_string (FreeSmartphoneDeviceSoundState value);
GType free_smartphone_device_ambient_light_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_ambient_light_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_ambient_light_get_type (void) G_GNUC_CONST;
void free_smartphone_device_ambient_light_get_ambient_light_brightness (FreeSmartphoneDeviceAmbientLight* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_device_ambient_light_get_ambient_light_brightness_finish (FreeSmartphoneDeviceAmbientLight* self, GAsyncResult* _res_, gint* brightness, gint* epoch, GError** error);
GType free_smartphone_device_ambient_light_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_device_ambient_light_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_device_ambient_light_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_device_ambient_light_sync_get_ambient_light_brightness (FreeSmartphoneDeviceAmbientLightSync* self, gint* brightness, gint* epoch, GError** error);
GType free_smartphone_gsm_error0_get_type (void) G_GNUC_CONST;
GType free_smartphone_gsm_error0_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_error0_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_error0_sync_get_type (void) G_GNUC_CONST;
GType free_smartphone_gsm_error0_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_error0_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_sim_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_sim_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_sim_auth_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMSIMAuthStatus free_smartphone_gsm_sim_auth_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_sim_auth_status_to_string (FreeSmartphoneGSMSIMAuthStatus value);
GQuark free_smartphone_gsm_error_quark (void);
GType free_smartphone_gsm_sim_home_zone_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMSIMHomeZone* free_smartphone_gsm_sim_home_zone_dup (const FreeSmartphoneGSMSIMHomeZone* self);
void free_smartphone_gsm_sim_home_zone_free (FreeSmartphoneGSMSIMHomeZone* self);
void free_smartphone_gsm_sim_home_zone_copy (const FreeSmartphoneGSMSIMHomeZone* self, FreeSmartphoneGSMSIMHomeZone* dest);
void free_smartphone_gsm_sim_home_zone_destroy (FreeSmartphoneGSMSIMHomeZone* self);
GType free_smartphone_gsm_sim_entry_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMSIMEntry* free_smartphone_gsm_sim_entry_dup (const FreeSmartphoneGSMSIMEntry* self);
void free_smartphone_gsm_sim_entry_free (FreeSmartphoneGSMSIMEntry* self);
void free_smartphone_gsm_sim_entry_copy (const FreeSmartphoneGSMSIMEntry* self, FreeSmartphoneGSMSIMEntry* dest);
void free_smartphone_gsm_sim_entry_destroy (FreeSmartphoneGSMSIMEntry* self);
GType free_smartphone_gsm_sim_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_sim_get_auth_status (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMSIMAuthStatus free_smartphone_gsm_sim_get_auth_status_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_send_auth_code (FreeSmartphoneGSMSIM* self, const gchar* pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_send_auth_code_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_get_unlock_counters (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_gsm_sim_get_unlock_counters_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_unlock (FreeSmartphoneGSMSIM* self, const gchar* puk, const gchar* new_pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_unlock_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_change_auth_code (FreeSmartphoneGSMSIM* self, const gchar* old_pin, const gchar* new_pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_change_auth_code_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_set_auth_code_required (FreeSmartphoneGSMSIM* self, gboolean check, const gchar* pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_set_auth_code_required_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_get_auth_code_required (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_gsm_sim_get_auth_code_required_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_get_sim_info (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_gsm_sim_get_sim_info_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_send_generic_sim_command (FreeSmartphoneGSMSIM* self, const gchar* command, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_sim_send_generic_sim_command_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_send_restricted_sim_command (FreeSmartphoneGSMSIM* self, gint command, gint fileid, gint p1, gint p2, gint p3, const gchar* data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_sim_send_restricted_sim_command_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_get_home_zone_parameters (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMSIMHomeZone* free_smartphone_gsm_sim_get_home_zone_parameters_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_gsm_sim_get_phonebook_info (FreeSmartphoneGSMSIM* self, const gchar* category, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_get_phonebook_info_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, gint* slots, gint* numberlength, gint* namelength, GError** error);
void free_smartphone_gsm_sim_delete_entry (FreeSmartphoneGSMSIM* self, const gchar* category, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_delete_entry_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_store_entry (FreeSmartphoneGSMSIM* self, const gchar* category, gint index, const gchar* name, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_store_entry_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_retrieve_phonebook (FreeSmartphoneGSMSIM* self, const gchar* category, gint mindex, gint maxdex, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMSIMEntry* free_smartphone_gsm_sim_retrieve_phonebook_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_gsm_sim_get_service_center_number (FreeSmartphoneGSMSIM* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_sim_get_service_center_number_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_set_service_center_number (FreeSmartphoneGSMSIM* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_set_service_center_number_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_delete_message (FreeSmartphoneGSMSIM* self, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_delete_message_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_store_message (FreeSmartphoneGSMSIM* self, const gchar* recipient_number, const gchar* contents, GHashTable* properties, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_gsm_sim_store_message_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sim_send_stored_message (FreeSmartphoneGSMSIM* self, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_send_stored_message_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, gint* transaction_index, gchar** timestamp, GError** error);
void free_smartphone_gsm_sim_retrieve_message (FreeSmartphoneGSMSIM* self, gint index, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sim_retrieve_message_finish (FreeSmartphoneGSMSIM* self, GAsyncResult* _res_, gchar** status, gchar** sender_number, gchar** contents, GHashTable** properties, GError** error);
GType free_smartphone_gsm_sim_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_sim_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_sim_sync_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMSIMAuthStatus free_smartphone_gsm_sim_sync_get_auth_status (FreeSmartphoneGSMSIMSync* self, GError** error);
void free_smartphone_gsm_sim_sync_send_auth_code (FreeSmartphoneGSMSIMSync* self, const gchar* pin, GError** error);
GHashTable* free_smartphone_gsm_sim_sync_get_unlock_counters (FreeSmartphoneGSMSIMSync* self, GError** error);
void free_smartphone_gsm_sim_sync_unlock (FreeSmartphoneGSMSIMSync* self, const gchar* puk, const gchar* new_pin, GError** error);
void free_smartphone_gsm_sim_sync_change_auth_code (FreeSmartphoneGSMSIMSync* self, const gchar* old_pin, const gchar* new_pin, GError** error);
void free_smartphone_gsm_sim_sync_set_auth_code_required (FreeSmartphoneGSMSIMSync* self, gboolean check, const gchar* pin, GError** error);
gboolean free_smartphone_gsm_sim_sync_get_auth_code_required (FreeSmartphoneGSMSIMSync* self, GError** error);
GHashTable* free_smartphone_gsm_sim_sync_get_sim_info (FreeSmartphoneGSMSIMSync* self, GError** error);
gchar* free_smartphone_gsm_sim_sync_send_generic_sim_command (FreeSmartphoneGSMSIMSync* self, const gchar* command, GError** error);
gchar* free_smartphone_gsm_sim_sync_send_restricted_sim_command (FreeSmartphoneGSMSIMSync* self, gint command, gint fileid, gint p1, gint p2, gint p3, const gchar* data, GError** error);
FreeSmartphoneGSMSIMHomeZone* free_smartphone_gsm_sim_sync_get_home_zone_parameters (FreeSmartphoneGSMSIMSync* self, int* result_length1, GError** error);
void free_smartphone_gsm_sim_sync_get_phonebook_info (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint* slots, gint* numberlength, gint* namelength, GError** error);
void free_smartphone_gsm_sim_sync_delete_entry (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint index, GError** error);
void free_smartphone_gsm_sim_sync_store_entry (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint index, const gchar* name, const gchar* number, GError** error);
FreeSmartphoneGSMSIMEntry* free_smartphone_gsm_sim_sync_retrieve_phonebook (FreeSmartphoneGSMSIMSync* self, const gchar* category, gint mindex, gint maxdex, int* result_length1, GError** error);
gchar* free_smartphone_gsm_sim_sync_get_service_center_number (FreeSmartphoneGSMSIMSync* self, GError** error);
void free_smartphone_gsm_sim_sync_set_service_center_number (FreeSmartphoneGSMSIMSync* self, const gchar* number, GError** error);
void free_smartphone_gsm_sim_sync_delete_message (FreeSmartphoneGSMSIMSync* self, gint index, GError** error);
gint free_smartphone_gsm_sim_sync_store_message (FreeSmartphoneGSMSIMSync* self, const gchar* recipient_number, const gchar* contents, GHashTable* properties, GError** error);
void free_smartphone_gsm_sim_sync_send_stored_message (FreeSmartphoneGSMSIMSync* self, gint index, gint* transaction_index, gchar** timestamp, GError** error);
void free_smartphone_gsm_sim_sync_retrieve_message (FreeSmartphoneGSMSIMSync* self, gint index, gchar** status, gchar** sender_number, gchar** contents, GHashTable** properties, GError** error);
GType free_smartphone_gsm_mux_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_mux_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_mux_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_mux_open_session (FreeSmartphoneGSMMUX* self, gboolean advanced, gint framesize, const gchar* portname, gint portspeed, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_mux_open_session_finish (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_mux_close_session (FreeSmartphoneGSMMUX* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_mux_close_session_finish (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_mux_alloc_channel (FreeSmartphoneGSMMUX* self, const gchar* origin, gint channel, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_mux_alloc_channel_finish (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, gchar** path, gint* allocated_channel, GError** error);
void free_smartphone_gsm_mux_release_channel (FreeSmartphoneGSMMUX* self, const gchar* origin, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_mux_release_channel_finish (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_mux_set_status (FreeSmartphoneGSMMUX* self, gint channel, const gchar* status, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_mux_set_status_finish (FreeSmartphoneGSMMUX* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_mux_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_mux_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_mux_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_mux_sync_open_session (FreeSmartphoneGSMMUXSync* self, gboolean advanced, gint framesize, const gchar* portname, gint portspeed, GError** error);
void free_smartphone_gsm_mux_sync_close_session (FreeSmartphoneGSMMUXSync* self, GError** error);
void free_smartphone_gsm_mux_sync_alloc_channel (FreeSmartphoneGSMMUXSync* self, const gchar* origin, gint channel, gchar** path, gint* allocated_channel, GError** error);
void free_smartphone_gsm_mux_sync_release_channel (FreeSmartphoneGSMMUXSync* self, const gchar* origin, GError** error);
void free_smartphone_gsm_mux_sync_set_status (FreeSmartphoneGSMMUXSync* self, gint channel, const gchar* status, GError** error);
GType free_smartphone_gsm_cb_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_cb_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_cb_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_cb_get_cell_broadcast_subscriptions (FreeSmartphoneGSMCB* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_cb_get_cell_broadcast_subscriptions_finish (FreeSmartphoneGSMCB* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_cb_set_cell_broadcast_subscriptions (FreeSmartphoneGSMCB* self, const gchar* channels, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_cb_set_cell_broadcast_subscriptions_finish (FreeSmartphoneGSMCB* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_cb_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_cb_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_cb_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_gsm_cb_sync_get_cell_broadcast_subscriptions (FreeSmartphoneGSMCBSync* self, GError** error);
void free_smartphone_gsm_cb_sync_set_cell_broadcast_subscriptions (FreeSmartphoneGSMCBSync* self, const gchar* channels, GError** error);
GType free_smartphone_gsm_hz_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_hz_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_hz_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_hz_get_known_home_zones (FreeSmartphoneGSMHZ* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_gsm_hz_get_known_home_zones_finish (FreeSmartphoneGSMHZ* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_gsm_hz_get_home_zone_status (FreeSmartphoneGSMHZ* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_hz_get_home_zone_status_finish (FreeSmartphoneGSMHZ* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_hz_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_hz_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_hz_sync_get_type (void) G_GNUC_CONST;
gchar** free_smartphone_gsm_hz_sync_get_known_home_zones (FreeSmartphoneGSMHZSync* self, int* result_length1, GError** error);
gchar* free_smartphone_gsm_hz_sync_get_home_zone_status (FreeSmartphoneGSMHZSync* self, GError** error);
GType free_smartphone_gsm_voice_mail_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_voice_mail_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_voice_mail_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_voice_mail_get_voice_mailbox_number (FreeSmartphoneGSMVoiceMail* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_voice_mail_get_voice_mailbox_number_finish (FreeSmartphoneGSMVoiceMail* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_voice_mail_set_voice_mailbox_number (FreeSmartphoneGSMVoiceMail* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_voice_mail_set_voice_mailbox_number_finish (FreeSmartphoneGSMVoiceMail* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_voice_mail_get_stored_voice_mails (FreeSmartphoneGSMVoiceMail* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_gsm_voice_mail_get_stored_voice_mails_finish (FreeSmartphoneGSMVoiceMail* self, GAsyncResult* _res_, int* result_length1, GError** error);
GType free_smartphone_gsm_voice_mail_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_voice_mail_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_voice_mail_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_gsm_voice_mail_sync_get_voice_mailbox_number (FreeSmartphoneGSMVoiceMailSync* self, GError** error);
void free_smartphone_gsm_voice_mail_sync_set_voice_mailbox_number (FreeSmartphoneGSMVoiceMailSync* self, const gchar* number, GError** error);
gchar** free_smartphone_gsm_voice_mail_sync_get_stored_voice_mails (FreeSmartphoneGSMVoiceMailSync* self, int* result_length1, GError** error);
GType free_smartphone_gsm_cipher_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMCipherStatus free_smartphone_gsm_cipher_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_cipher_status_to_string (FreeSmartphoneGSMCipherStatus value);
GType free_smartphone_gsm_pdp_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_pdp_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_context_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMContextStatus free_smartphone_gsm_context_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_context_status_to_string (FreeSmartphoneGSMContextStatus value);
GType free_smartphone_gsm_pdp_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_pdp_set_credentials (FreeSmartphoneGSMPDP* self, const gchar* apn, const gchar* username, const gchar* password, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_pdp_set_credentials_finish (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_pdp_get_credentials (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_pdp_get_credentials_finish (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, gchar** apn, gchar** username, gchar** password, GError** error);
void free_smartphone_gsm_pdp_activate_context (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_pdp_activate_context_finish (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_pdp_deactivate_context (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_pdp_deactivate_context_finish (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_pdp_get_context_status (FreeSmartphoneGSMPDP* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_pdp_get_context_status_finish (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, FreeSmartphoneGSMContextStatus* status, GHashTable** properties, GError** error);
void free_smartphone_gsm_pdp_internal_status_update (FreeSmartphoneGSMPDP* self, const gchar* status, GHashTable* properties, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_pdp_internal_status_update_finish (FreeSmartphoneGSMPDP* self, GAsyncResult* _res_, GError** error);
gboolean free_smartphone_gsm_pdp_get_roaming_allowed (FreeSmartphoneGSMPDP* self);
void free_smartphone_gsm_pdp_set_roaming_allowed (FreeSmartphoneGSMPDP* self, gboolean value);
GType free_smartphone_gsm_pdp_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_pdp_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_pdp_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_pdp_sync_set_credentials (FreeSmartphoneGSMPDPSync* self, const gchar* apn, const gchar* username, const gchar* password, GError** error);
void free_smartphone_gsm_pdp_sync_get_credentials (FreeSmartphoneGSMPDPSync* self, gchar** apn, gchar** username, gchar** password, GError** error);
void free_smartphone_gsm_pdp_sync_activate_context (FreeSmartphoneGSMPDPSync* self, GError** error);
void free_smartphone_gsm_pdp_sync_deactivate_context (FreeSmartphoneGSMPDPSync* self, GError** error);
void free_smartphone_gsm_pdp_sync_get_context_status (FreeSmartphoneGSMPDPSync* self, FreeSmartphoneGSMContextStatus* status, GHashTable** properties, GError** error);
void free_smartphone_gsm_pdp_sync_internal_status_update (FreeSmartphoneGSMPDPSync* self, const gchar* status, GHashTable* properties, GError** error);
gboolean free_smartphone_gsm_pdp_sync_get_roaming_allowed (FreeSmartphoneGSMPDPSync* self);
void free_smartphone_gsm_pdp_sync_set_roaming_allowed (FreeSmartphoneGSMPDPSync* self, gboolean value);
GType free_smartphone_gsm_monitor_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_monitor_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_monitor_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_monitor_get_serving_cell_information (FreeSmartphoneGSMMonitor* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_gsm_monitor_get_serving_cell_information_finish (FreeSmartphoneGSMMonitor* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_monitor_get_neighbour_cell_information (FreeSmartphoneGSMMonitor* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable** free_smartphone_gsm_monitor_get_neighbour_cell_information_finish (FreeSmartphoneGSMMonitor* self, GAsyncResult* _res_, int* result_length1, GError** error);
GType free_smartphone_gsm_monitor_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_monitor_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_monitor_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_gsm_monitor_sync_get_serving_cell_information (FreeSmartphoneGSMMonitorSync* self, GError** error);
GHashTable** free_smartphone_gsm_monitor_sync_get_neighbour_cell_information (FreeSmartphoneGSMMonitorSync* self, int* result_length1, GError** error);
GType free_smartphone_gsm_call_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMCallStatus free_smartphone_gsm_call_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_call_status_to_string (FreeSmartphoneGSMCallStatus value);
void free_smartphone_gsm_sim_entry_init (FreeSmartphoneGSMSIMEntry *self, gint index, const gchar* name, const gchar* number);
void free_smartphone_gsm_sim_entry_from_variant (GVariant* v, FreeSmartphoneGSMSIMEntry* result);
void free_smartphone_gsm_sim_home_zone_init (FreeSmartphoneGSMSIMHomeZone *self, const gchar* name, gint x, gint y, gint radius);
void free_smartphone_gsm_sim_home_zone_from_variant (GVariant* v, FreeSmartphoneGSMSIMHomeZone* result);
GType free_smartphone_gsm_call_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_call_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_call_detail_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMCallDetail* free_smartphone_gsm_call_detail_dup (const FreeSmartphoneGSMCallDetail* self);
void free_smartphone_gsm_call_detail_free (FreeSmartphoneGSMCallDetail* self);
void free_smartphone_gsm_call_detail_copy (const FreeSmartphoneGSMCallDetail* self, FreeSmartphoneGSMCallDetail* dest);
void free_smartphone_gsm_call_detail_destroy (FreeSmartphoneGSMCallDetail* self);
GType free_smartphone_gsm_call_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_call_emergency (FreeSmartphoneGSMCall* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_emergency_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_activate (FreeSmartphoneGSMCall* self, gint id, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_activate_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_activate_conference (FreeSmartphoneGSMCall* self, gint id, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_activate_conference_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_release (FreeSmartphoneGSMCall* self, gint id, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_release_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_hold_active (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_hold_active_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_join (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_join_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_transfer (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_transfer_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_deflect (FreeSmartphoneGSMCall* self, const gchar* number, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_deflect_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_release_held (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_release_held_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_release_all (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_release_all_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_initiate (FreeSmartphoneGSMCall* self, const gchar* number, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_gsm_call_initiate_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_list_calls (FreeSmartphoneGSMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMCallDetail* free_smartphone_gsm_call_list_calls_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_gsm_call_send_dtmf (FreeSmartphoneGSMCall* self, const gchar* tones, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_send_dtmf_finish (FreeSmartphoneGSMCall* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_call_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_call_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_call_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_call_sync_emergency (FreeSmartphoneGSMCallSync* self, const gchar* number, GError** error);
void free_smartphone_gsm_call_sync_activate (FreeSmartphoneGSMCallSync* self, gint id, GError** error);
void free_smartphone_gsm_call_sync_activate_conference (FreeSmartphoneGSMCallSync* self, gint id, GError** error);
void free_smartphone_gsm_call_sync_release (FreeSmartphoneGSMCallSync* self, gint id, GError** error);
void free_smartphone_gsm_call_sync_hold_active (FreeSmartphoneGSMCallSync* self, GError** error);
void free_smartphone_gsm_call_sync_join (FreeSmartphoneGSMCallSync* self, GError** error);
void free_smartphone_gsm_call_sync_transfer (FreeSmartphoneGSMCallSync* self, GError** error);
void free_smartphone_gsm_call_sync_deflect (FreeSmartphoneGSMCallSync* self, const gchar* number, GError** error);
void free_smartphone_gsm_call_sync_release_held (FreeSmartphoneGSMCallSync* self, GError** error);
void free_smartphone_gsm_call_sync_release_all (FreeSmartphoneGSMCallSync* self, GError** error);
gint free_smartphone_gsm_call_sync_initiate (FreeSmartphoneGSMCallSync* self, const gchar* number, const gchar* type, GError** error);
FreeSmartphoneGSMCallDetail* free_smartphone_gsm_call_sync_list_calls (FreeSmartphoneGSMCallSync* self, int* result_length1, GError** error);
void free_smartphone_gsm_call_sync_send_dtmf (FreeSmartphoneGSMCallSync* self, const gchar* tones, GError** error);
GType free_smartphone_gsm_ussd_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMUssdStatus free_smartphone_gsm_ussd_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_ussd_status_to_string (FreeSmartphoneGSMUssdStatus value);
GType free_smartphone_gsm_debug_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_debug_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_debug_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_debug_debug_command (FreeSmartphoneGSMDebug* self, const gchar* command, const gchar* channel, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_gsm_debug_debug_command_finish (FreeSmartphoneGSMDebug* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_debug_debug_inject_response (FreeSmartphoneGSMDebug* self, const gchar* response, const gchar* channel, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_debug_debug_inject_response_finish (FreeSmartphoneGSMDebug* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_debug_debug_ping (FreeSmartphoneGSMDebug* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_debug_debug_ping_finish (FreeSmartphoneGSMDebug* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_debug_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_debug_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_debug_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_gsm_debug_sync_debug_command (FreeSmartphoneGSMDebugSync* self, const gchar* command, const gchar* channel, GError** error);
void free_smartphone_gsm_debug_sync_debug_inject_response (FreeSmartphoneGSMDebugSync* self, const gchar* response, const gchar* channel, GError** error);
void free_smartphone_gsm_debug_sync_debug_ping (FreeSmartphoneGSMDebugSync* self, GError** error);
GType free_smartphone_gsm_device_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMDeviceStatus free_smartphone_gsm_device_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_device_status_to_string (FreeSmartphoneGSMDeviceStatus value);
GType free_smartphone_gsm_sms_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_sms_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_sim_message_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMSIMMessage* free_smartphone_gsm_sim_message_dup (const FreeSmartphoneGSMSIMMessage* self);
void free_smartphone_gsm_sim_message_free (FreeSmartphoneGSMSIMMessage* self);
void free_smartphone_gsm_sim_message_copy (const FreeSmartphoneGSMSIMMessage* self, FreeSmartphoneGSMSIMMessage* dest);
void free_smartphone_gsm_sim_message_destroy (FreeSmartphoneGSMSIMMessage* self);
GType free_smartphone_gsm_sms_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_sms_retrieve_text_messages (FreeSmartphoneGSMSMS* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMSIMMessage* free_smartphone_gsm_sms_retrieve_text_messages_finish (FreeSmartphoneGSMSMS* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_gsm_sms_get_size_for_text_message (FreeSmartphoneGSMSMS* self, const gchar* contents, GAsyncReadyCallback _callback_, gpointer _user_data_);
guint free_smartphone_gsm_sms_get_size_for_text_message_finish (FreeSmartphoneGSMSMS* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_sms_send_text_message (FreeSmartphoneGSMSMS* self, const gchar* recipient_number, const gchar* contents, gboolean report, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_sms_send_text_message_finish (FreeSmartphoneGSMSMS* self, GAsyncResult* _res_, gint* reference, gchar** timestamp, GError** error);
GType free_smartphone_gsm_sms_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_sms_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_sms_sync_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMSIMMessage* free_smartphone_gsm_sms_sync_retrieve_text_messages (FreeSmartphoneGSMSMSSync* self, int* result_length1, GError** error);
guint free_smartphone_gsm_sms_sync_get_size_for_text_message (FreeSmartphoneGSMSMSSync* self, const gchar* contents, GError** error);
void free_smartphone_gsm_sms_sync_send_text_message (FreeSmartphoneGSMSMSSync* self, const gchar* recipient_number, const gchar* contents, gboolean report, gint* reference, gchar** timestamp, GError** error);
GType free_smartphone_gsm_network_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_network_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_network_provider_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMNetworkProvider* free_smartphone_gsm_network_provider_dup (const FreeSmartphoneGSMNetworkProvider* self);
void free_smartphone_gsm_network_provider_free (FreeSmartphoneGSMNetworkProvider* self);
void free_smartphone_gsm_network_provider_copy (const FreeSmartphoneGSMNetworkProvider* self, FreeSmartphoneGSMNetworkProvider* dest);
void free_smartphone_gsm_network_provider_destroy (FreeSmartphoneGSMNetworkProvider* self);
GType free_smartphone_gsm_calling_identification_status_get_type (void) G_GNUC_CONST;
FreeSmartphoneGSMCallingIdentificationStatus free_smartphone_gsm_calling_identification_status_from_string (const char* str, GError** error);
const char* free_smartphone_gsm_calling_identification_status_to_string (FreeSmartphoneGSMCallingIdentificationStatus value);
GType free_smartphone_gsm_network_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_network_register_ (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_network_register__finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_unregister (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_network_unregister_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_get_status (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_gsm_network_get_status_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_get_signal_strength (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_gsm_network_get_signal_strength_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_get_time_report (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_network_get_time_report_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, gint* time, gint* timestamp, gint* zone, gint* zonestamp, GError** error);
void free_smartphone_gsm_network_list_providers (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMNetworkProvider* free_smartphone_gsm_network_list_providers_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_gsm_network_register_with_provider (FreeSmartphoneGSMNetwork* self, const gchar* operator_code, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_network_register_with_provider_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_set_calling_identification (FreeSmartphoneGSMNetwork* self, FreeSmartphoneGSMCallingIdentificationStatus status, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_network_set_calling_identification_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_get_calling_identification (FreeSmartphoneGSMNetwork* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMCallingIdentificationStatus free_smartphone_gsm_network_get_calling_identification_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_network_send_ussd_request (FreeSmartphoneGSMNetwork* self, const gchar* request, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_network_send_ussd_request_finish (FreeSmartphoneGSMNetwork* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_network_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_network_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_network_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_network_sync_register_ (FreeSmartphoneGSMNetworkSync* self, GError** error);
void free_smartphone_gsm_network_sync_unregister (FreeSmartphoneGSMNetworkSync* self, GError** error);
GHashTable* free_smartphone_gsm_network_sync_get_status (FreeSmartphoneGSMNetworkSync* self, GError** error);
gint free_smartphone_gsm_network_sync_get_signal_strength (FreeSmartphoneGSMNetworkSync* self, GError** error);
void free_smartphone_gsm_network_sync_get_time_report (FreeSmartphoneGSMNetworkSync* self, gint* time, gint* timestamp, gint* zone, gint* zonestamp, GError** error);
FreeSmartphoneGSMNetworkProvider* free_smartphone_gsm_network_sync_list_providers (FreeSmartphoneGSMNetworkSync* self, int* result_length1, GError** error);
void free_smartphone_gsm_network_sync_register_with_provider (FreeSmartphoneGSMNetworkSync* self, const gchar* operator_code, GError** error);
void free_smartphone_gsm_network_sync_set_calling_identification (FreeSmartphoneGSMNetworkSync* self, FreeSmartphoneGSMCallingIdentificationStatus status, GError** error);
FreeSmartphoneGSMCallingIdentificationStatus free_smartphone_gsm_network_sync_get_calling_identification (FreeSmartphoneGSMNetworkSync* self, GError** error);
void free_smartphone_gsm_network_sync_send_ussd_request (FreeSmartphoneGSMNetworkSync* self, const gchar* request, GError** error);
void free_smartphone_gsm_network_provider_init (FreeSmartphoneGSMNetworkProvider *self, const gchar* status, const gchar* shortname, const gchar* longname, const gchar* mccmnc, const gchar* act);
void free_smartphone_gsm_network_provider_from_variant (GVariant* v, FreeSmartphoneGSMNetworkProvider* result);
GType free_smartphone_gsm_call_forwarding_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_call_forwarding_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_call_forwarding_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_call_forwarding_disable_all (FreeSmartphoneGSMCallForwarding* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_forwarding_disable_all_finish (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_forwarding_enable (FreeSmartphoneGSMCallForwarding* self, const gchar* rule, const gchar* number, gint timeout, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_forwarding_enable_finish (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_forwarding_disable (FreeSmartphoneGSMCallForwarding* self, const gchar* rule, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_call_forwarding_disable_finish (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_call_forwarding_get_status (FreeSmartphoneGSMCallForwarding* self, const gchar* rule, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_gsm_call_forwarding_get_status_finish (FreeSmartphoneGSMCallForwarding* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_call_forwarding_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_call_forwarding_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_call_forwarding_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_call_forwarding_sync_disable_all (FreeSmartphoneGSMCallForwardingSync* self, const gchar* type, GError** error);
void free_smartphone_gsm_call_forwarding_sync_enable (FreeSmartphoneGSMCallForwardingSync* self, const gchar* rule, const gchar* number, gint timeout, GError** error);
void free_smartphone_gsm_call_forwarding_sync_disable (FreeSmartphoneGSMCallForwardingSync* self, const gchar* rule, GError** error);
GHashTable* free_smartphone_gsm_call_forwarding_sync_get_status (FreeSmartphoneGSMCallForwardingSync* self, const gchar* rule, GError** error);
void free_smartphone_gsm_call_detail_init (FreeSmartphoneGSMCallDetail *self, gint id, FreeSmartphoneGSMCallStatus status, GHashTable* properties);
void free_smartphone_gsm_call_detail_from_variant (GVariant* v, FreeSmartphoneGSMCallDetail* result);
GType free_smartphone_gsm_device_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_device_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_device_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_device_get_functionality (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_device_get_functionality_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, gchar** level, gboolean* autoregister, gchar** pin, GError** error);
void free_smartphone_gsm_device_set_functionality (FreeSmartphoneGSMDevice* self, const gchar* level, gboolean autoregister, const gchar* pin, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_device_set_functionality_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_device_get_features (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_gsm_device_get_features_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_device_get_device_status (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneGSMDeviceStatus free_smartphone_gsm_device_get_device_status_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_device_get_speaker_volume (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_gsm_device_get_speaker_volume_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_device_set_speaker_volume (FreeSmartphoneGSMDevice* self, gint volume, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_device_set_speaker_volume_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_device_get_microphone_muted (FreeSmartphoneGSMDevice* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_gsm_device_get_microphone_muted_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
void free_smartphone_gsm_device_set_microphone_muted (FreeSmartphoneGSMDevice* self, gboolean muted, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_gsm_device_set_microphone_muted_finish (FreeSmartphoneGSMDevice* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_gsm_device_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_gsm_device_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_gsm_device_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_gsm_device_sync_get_functionality (FreeSmartphoneGSMDeviceSync* self, gchar** level, gboolean* autoregister, gchar** pin, GError** error);
void free_smartphone_gsm_device_sync_set_functionality (FreeSmartphoneGSMDeviceSync* self, const gchar* level, gboolean autoregister, const gchar* pin, GError** error);
GHashTable* free_smartphone_gsm_device_sync_get_features (FreeSmartphoneGSMDeviceSync* self, GError** error);
FreeSmartphoneGSMDeviceStatus free_smartphone_gsm_device_sync_get_device_status (FreeSmartphoneGSMDeviceSync* self, GError** error);
gint free_smartphone_gsm_device_sync_get_speaker_volume (FreeSmartphoneGSMDeviceSync* self, GError** error);
void free_smartphone_gsm_device_sync_set_speaker_volume (FreeSmartphoneGSMDeviceSync* self, gint volume, GError** error);
gboolean free_smartphone_gsm_device_sync_get_microphone_muted (FreeSmartphoneGSMDeviceSync* self, GError** error);
void free_smartphone_gsm_device_sync_set_microphone_muted (FreeSmartphoneGSMDeviceSync* self, gboolean muted, GError** error);
void free_smartphone_gsm_sim_message_init (FreeSmartphoneGSMSIMMessage *self, gint index, const gchar* status, const gchar* number, const gchar* timestamp, const gchar* contents, GHashTable* properties);
void free_smartphone_gsm_sim_message_from_variant (GVariant* v, FreeSmartphoneGSMSIMMessage* result);
GType free_smartphone_time_wakeup_alarm_get_type (void) G_GNUC_CONST;
FreeSmartphoneTimeWakeupAlarm* free_smartphone_time_wakeup_alarm_dup (const FreeSmartphoneTimeWakeupAlarm* self);
void free_smartphone_time_wakeup_alarm_free (FreeSmartphoneTimeWakeupAlarm* self);
void free_smartphone_time_wakeup_alarm_copy (const FreeSmartphoneTimeWakeupAlarm* self, FreeSmartphoneTimeWakeupAlarm* dest);
void free_smartphone_time_wakeup_alarm_destroy (FreeSmartphoneTimeWakeupAlarm* self);
void free_smartphone_time_wakeup_alarm_init (FreeSmartphoneTimeWakeupAlarm *self, const gchar* busname, gint timestamp);
void free_smartphone_time_wakeup_alarm_from_variant (GVariant* v, FreeSmartphoneTimeWakeupAlarm* result);
GType free_smartphone_time_alarm_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_time_alarm_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_time_alarm_get_type (void) G_GNUC_CONST;
void free_smartphone_time_alarm_clear_alarms (FreeSmartphoneTimeAlarm* self, const gchar* busname, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_time_alarm_clear_alarms_finish (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, GError** error);
void free_smartphone_time_alarm_list_alarms (FreeSmartphoneTimeAlarm* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneTimeWakeupAlarm* free_smartphone_time_alarm_list_alarms_finish (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_time_alarm_remove_alarm (FreeSmartphoneTimeAlarm* self, const gchar* busname, gint timestamp, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_time_alarm_remove_alarm_finish (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, GError** error);
void free_smartphone_time_alarm_add_alarm (FreeSmartphoneTimeAlarm* self, const gchar* busname, gint timestamp, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_time_alarm_add_alarm_finish (FreeSmartphoneTimeAlarm* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_time_alarm_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_time_alarm_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_time_alarm_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_time_alarm_sync_clear_alarms (FreeSmartphoneTimeAlarmSync* self, const gchar* busname, GError** error);
FreeSmartphoneTimeWakeupAlarm* free_smartphone_time_alarm_sync_list_alarms (FreeSmartphoneTimeAlarmSync* self, int* result_length1, GError** error);
void free_smartphone_time_alarm_sync_remove_alarm (FreeSmartphoneTimeAlarmSync* self, const gchar* busname, gint timestamp, GError** error);
void free_smartphone_time_alarm_sync_add_alarm (FreeSmartphoneTimeAlarmSync* self, const gchar* busname, gint timestamp, GError** error);
GType free_smartphone_pim_fields_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_fields_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_fields_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_fields_add_field (FreeSmartphonePIMFields* self, const gchar* name, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_fields_add_field_finish (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_fields_delete_field (FreeSmartphonePIMFields* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_fields_delete_field_finish (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_fields_get_type_ (FreeSmartphonePIMFields* self, const gchar* name, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_fields_get_type__finish (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_fields_list_fields (FreeSmartphonePIMFields* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_fields_list_fields_finish (FreeSmartphonePIMFields* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_fields_list_fields_with_type (FreeSmartphonePIMFields* self, const gchar* type, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_fields_list_fields_with_type_finish (FreeSmartphonePIMFields* self, GAsyncResult* _res_, int* result_length1, GError** error);
GType free_smartphone_pim_fields_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_fields_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_fields_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_fields_sync_add_field (FreeSmartphonePIMFieldsSync* self, const gchar* name, const gchar* type, GError** error);
void free_smartphone_pim_fields_sync_delete_field (FreeSmartphonePIMFieldsSync* self, const gchar* name, GError** error);
gchar* free_smartphone_pim_fields_sync_get_type_ (FreeSmartphonePIMFieldsSync* self, const gchar* name, GError** error);
GHashTable* free_smartphone_pim_fields_sync_list_fields (FreeSmartphonePIMFieldsSync* self, GError** error);
gchar** free_smartphone_pim_fields_sync_list_fields_with_type (FreeSmartphonePIMFieldsSync* self, const gchar* type, int* result_length1, GError** error);
GType free_smartphone_pim_note_query_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_note_query_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_note_query_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_note_query_get_result_count (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_note_query_get_result_count_finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_query_rewind (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_note_query_rewind_finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_query_skip (FreeSmartphonePIMNoteQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_note_query_skip_finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_query_get_note_path (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_note_query_get_note_path_finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_query_get_result (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_note_query_get_result_finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_query_get_multiple_results (FreeSmartphonePIMNoteQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable** free_smartphone_pim_note_query_get_multiple_results_finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_note_query_dispose_ (FreeSmartphonePIMNoteQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_note_query_dispose__finish (FreeSmartphonePIMNoteQuery* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_note_query_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_note_query_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_note_query_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_note_query_sync_get_result_count (FreeSmartphonePIMNoteQuerySync* self, GError** error);
void free_smartphone_pim_note_query_sync_rewind (FreeSmartphonePIMNoteQuerySync* self, GError** error);
void free_smartphone_pim_note_query_sync_skip (FreeSmartphonePIMNoteQuerySync* self, gint count, GError** error);
gchar* free_smartphone_pim_note_query_sync_get_note_path (FreeSmartphonePIMNoteQuerySync* self, GError** error);
GHashTable* free_smartphone_pim_note_query_sync_get_result (FreeSmartphonePIMNoteQuerySync* self, GError** error);
GHashTable** free_smartphone_pim_note_query_sync_get_multiple_results (FreeSmartphonePIMNoteQuerySync* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_note_query_sync_dispose_ (FreeSmartphonePIMNoteQuerySync* self, GError** error);
GType free_smartphone_pim_task_query_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_task_query_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_task_query_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_task_query_get_result_count (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_task_query_get_result_count_finish (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_task_query_rewind (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_task_query_rewind_finish (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_task_query_skip (FreeSmartphonePIMTaskQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_task_query_skip_finish (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_task_query_get_task_path (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_task_query_get_task_path_finish (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_task_query_get_result (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_task_query_get_result_finish (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
GHashTable** free_smartphone_pim_task_query_get_multiple_results (FreeSmartphonePIMTaskQuery* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_task_query_dispose_ (FreeSmartphonePIMTaskQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_task_query_dispose__finish (FreeSmartphonePIMTaskQuery* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_task_query_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_task_query_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_task_query_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_task_query_sync_get_result_count (FreeSmartphonePIMTaskQuerySync* self, GError** error);
void free_smartphone_pim_task_query_sync_rewind (FreeSmartphonePIMTaskQuerySync* self, GError** error);
void free_smartphone_pim_task_query_sync_skip (FreeSmartphonePIMTaskQuerySync* self, gint count, GError** error);
gchar* free_smartphone_pim_task_query_sync_get_task_path (FreeSmartphonePIMTaskQuerySync* self, GError** error);
GHashTable* free_smartphone_pim_task_query_sync_get_result (FreeSmartphonePIMTaskQuerySync* self, GError** error);
GHashTable** free_smartphone_pim_task_query_sync_get_multiple_results (FreeSmartphonePIMTaskQuerySync* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_task_query_sync_dispose_ (FreeSmartphonePIMTaskQuerySync* self, GError** error);
GType free_smartphone_pim_message_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_message_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_message_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_message_get_content (FreeSmartphonePIMMessage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_message_get_content_finish (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_get_multiple_fields (FreeSmartphonePIMMessage* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_message_get_multiple_fields_finish (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_move_to_folder (FreeSmartphonePIMMessage* self, const gchar* folder_name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_message_move_to_folder_finish (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_update (FreeSmartphonePIMMessage* self, GHashTable* message_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_message_update_finish (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_delete (FreeSmartphonePIMMessage* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_message_delete_finish (FreeSmartphonePIMMessage* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_message_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_message_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_message_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_pim_message_sync_get_content (FreeSmartphonePIMMessageSync* self, GError** error);
GHashTable* free_smartphone_pim_message_sync_get_multiple_fields (FreeSmartphonePIMMessageSync* self, const gchar* field_list, GError** error);
void free_smartphone_pim_message_sync_move_to_folder (FreeSmartphonePIMMessageSync* self, const gchar* folder_name, GError** error);
void free_smartphone_pim_message_sync_update (FreeSmartphonePIMMessageSync* self, GHashTable* message_data, GError** error);
void free_smartphone_pim_message_sync_delete (FreeSmartphonePIMMessageSync* self, GError** error);
GType free_smartphone_pim_date_query_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_date_query_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_date_query_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_date_query_get_result_count (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_date_query_get_result_count_finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_query_rewind (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_date_query_rewind_finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_query_skip (FreeSmartphonePIMDateQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_date_query_skip_finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_query_get_date_path (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_date_query_get_date_path_finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_query_get_result (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_date_query_get_result_finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_query_get_multiple_results (FreeSmartphonePIMDateQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable** free_smartphone_pim_date_query_get_multiple_results_finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_date_query_dispose_ (FreeSmartphonePIMDateQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_date_query_dispose__finish (FreeSmartphonePIMDateQuery* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_date_query_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_date_query_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_date_query_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_date_query_sync_get_result_count (FreeSmartphonePIMDateQuerySync* self, GError** error);
void free_smartphone_pim_date_query_sync_rewind (FreeSmartphonePIMDateQuerySync* self, GError** error);
void free_smartphone_pim_date_query_sync_skip (FreeSmartphonePIMDateQuerySync* self, gint count, GError** error);
gchar* free_smartphone_pim_date_query_sync_get_date_path (FreeSmartphonePIMDateQuerySync* self, GError** error);
GHashTable* free_smartphone_pim_date_query_sync_get_result (FreeSmartphonePIMDateQuerySync* self, GError** error);
GHashTable** free_smartphone_pim_date_query_sync_get_multiple_results (FreeSmartphonePIMDateQuerySync* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_date_query_sync_dispose_ (FreeSmartphonePIMDateQuerySync* self, GError** error);
GType free_smartphone_pim_call_query_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_call_query_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_call_query_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_call_query_get_result_count (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_call_query_get_result_count_finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_query_rewind (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_call_query_rewind_finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_query_skip (FreeSmartphonePIMCallQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_call_query_skip_finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_query_get_call_path (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_call_query_get_call_path_finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_query_get_result (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_call_query_get_result_finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_query_get_multiple_results (FreeSmartphonePIMCallQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable** free_smartphone_pim_call_query_get_multiple_results_finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_call_query_dispose_ (FreeSmartphonePIMCallQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_call_query_dispose__finish (FreeSmartphonePIMCallQuery* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_call_query_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_call_query_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_call_query_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_call_query_sync_get_result_count (FreeSmartphonePIMCallQuerySync* self, GError** error);
void free_smartphone_pim_call_query_sync_rewind (FreeSmartphonePIMCallQuerySync* self, GError** error);
void free_smartphone_pim_call_query_sync_skip (FreeSmartphonePIMCallQuerySync* self, gint count, GError** error);
gchar* free_smartphone_pim_call_query_sync_get_call_path (FreeSmartphonePIMCallQuerySync* self, GError** error);
GHashTable* free_smartphone_pim_call_query_sync_get_result (FreeSmartphonePIMCallQuerySync* self, GError** error);
GHashTable** free_smartphone_pim_call_query_sync_get_multiple_results (FreeSmartphonePIMCallQuerySync* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_call_query_sync_dispose_ (FreeSmartphonePIMCallQuerySync* self, GError** error);
GType free_smartphone_pim_contacts_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_contacts_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_contacts_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_contacts_add (FreeSmartphonePIMContacts* self, GHashTable* contact_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_contacts_add_finish (FreeSmartphonePIMContacts* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contacts_get_single_entry_single_field (FreeSmartphonePIMContacts* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_contacts_get_single_entry_single_field_finish (FreeSmartphonePIMContacts* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contacts_query (FreeSmartphonePIMContacts* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_contacts_query_finish (FreeSmartphonePIMContacts* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_contacts_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_contacts_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_contacts_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_pim_contacts_sync_add (FreeSmartphonePIMContactsSync* self, GHashTable* contact_data, GError** error);
gchar* free_smartphone_pim_contacts_sync_get_single_entry_single_field (FreeSmartphonePIMContactsSync* self, GHashTable* query, const gchar* field, GError** error);
gchar* free_smartphone_pim_contacts_sync_query (FreeSmartphonePIMContactsSync* self, GHashTable* query, GError** error);
GType free_smartphone_pim_messages_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_messages_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_messages_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_messages_add (FreeSmartphonePIMMessages* self, GHashTable* message_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_messages_add_finish (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_messages_add_incoming (FreeSmartphonePIMMessages* self, GHashTable* message_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_messages_add_incoming_finish (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_messages_get_single_entry_single_field (FreeSmartphonePIMMessages* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_messages_get_single_entry_single_field_finish (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_messages_query (FreeSmartphonePIMMessages* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_messages_query_finish (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_messages_query_threads (FreeSmartphonePIMMessages* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_messages_query_threads_finish (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_messages_get_unread_messages (FreeSmartphonePIMMessages* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_messages_get_unread_messages_finish (FreeSmartphonePIMMessages* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_messages_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_messages_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_messages_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_pim_messages_sync_add (FreeSmartphonePIMMessagesSync* self, GHashTable* message_data, GError** error);
gchar* free_smartphone_pim_messages_sync_add_incoming (FreeSmartphonePIMMessagesSync* self, GHashTable* message_data, GError** error);
gchar* free_smartphone_pim_messages_sync_get_single_entry_single_field (FreeSmartphonePIMMessagesSync* self, GHashTable* query, const gchar* field, GError** error);
gchar* free_smartphone_pim_messages_sync_query (FreeSmartphonePIMMessagesSync* self, GHashTable* query, GError** error);
gchar* free_smartphone_pim_messages_sync_query_threads (FreeSmartphonePIMMessagesSync* self, GHashTable* query, GError** error);
gint free_smartphone_pim_messages_sync_get_unread_messages (FreeSmartphonePIMMessagesSync* self, GError** error);
GType free_smartphone_pim_task_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_task_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_task_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_task_get_content (FreeSmartphonePIMTask* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_task_get_content_finish (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_task_get_multiple_fields (FreeSmartphonePIMTask* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_task_get_multiple_fields_finish (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
gchar** free_smartphone_pim_task_get_used_backends (FreeSmartphonePIMTask* self, int* result_length1, GError** error);
void free_smartphone_pim_task_update (FreeSmartphonePIMTask* self, GHashTable* task_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_task_update_finish (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_task_delete (FreeSmartphonePIMTask* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_task_delete_finish (FreeSmartphonePIMTask* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_task_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_task_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_task_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_pim_task_sync_get_content (FreeSmartphonePIMTaskSync* self, GError** error);
GHashTable* free_smartphone_pim_task_sync_get_multiple_fields (FreeSmartphonePIMTaskSync* self, const gchar* field_list, GError** error);
gchar** free_smartphone_pim_task_sync_get_used_backends (FreeSmartphonePIMTaskSync* self, int* result_length1, GError** error);
void free_smartphone_pim_task_sync_update (FreeSmartphonePIMTaskSync* self, GHashTable* task_data, GError** error);
void free_smartphone_pim_task_sync_delete (FreeSmartphonePIMTaskSync* self, GError** error);
GType free_smartphone_pim_message_folder_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_message_folder_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_message_folder_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_message_folder_get_message_count (FreeSmartphonePIMMessageFolder* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_message_folder_get_message_count_finish (FreeSmartphonePIMMessageFolder* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_folder_get_message_paths (FreeSmartphonePIMMessageFolder* self, gint first, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_message_folder_get_message_paths_finish (FreeSmartphonePIMMessageFolder* self, GAsyncResult* _res_, int* result_length1, GError** error);
GType free_smartphone_pim_message_folder_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_message_folder_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_message_folder_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_message_folder_sync_get_message_count (FreeSmartphonePIMMessageFolderSync* self, GError** error);
gchar** free_smartphone_pim_message_folder_sync_get_message_paths (FreeSmartphonePIMMessageFolderSync* self, gint first, gint count, int* result_length1, GError** error);
GType free_smartphone_pim_call_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_call_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_call_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_call_get_content (FreeSmartphonePIMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_call_get_content_finish (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_get_multiple_fields (FreeSmartphonePIMCall* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_call_get_multiple_fields_finish (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_get_used_backends (FreeSmartphonePIMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_call_get_used_backends_finish (FreeSmartphonePIMCall* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_call_update (FreeSmartphonePIMCall* self, GHashTable* call_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_call_update_finish (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_call_delete (FreeSmartphonePIMCall* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_call_delete_finish (FreeSmartphonePIMCall* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_call_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_call_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_call_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_pim_call_sync_get_content (FreeSmartphonePIMCallSync* self, GError** error);
GHashTable* free_smartphone_pim_call_sync_get_multiple_fields (FreeSmartphonePIMCallSync* self, const gchar* field_list, GError** error);
gchar** free_smartphone_pim_call_sync_get_used_backends (FreeSmartphonePIMCallSync* self, int* result_length1, GError** error);
void free_smartphone_pim_call_sync_update (FreeSmartphonePIMCallSync* self, GHashTable* call_data, GError** error);
void free_smartphone_pim_call_sync_delete (FreeSmartphonePIMCallSync* self, GError** error);
GType free_smartphone_pim_message_query_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_message_query_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_message_query_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_message_query_get_result_count (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_message_query_get_result_count_finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_query_rewind (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_message_query_rewind_finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_query_skip (FreeSmartphonePIMMessageQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_message_query_skip_finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_query_get_message_path (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_message_query_get_message_path_finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_query_get_result (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_message_query_get_result_finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_message_query_get_multiple_results (FreeSmartphonePIMMessageQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable** free_smartphone_pim_message_query_get_multiple_results_finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_message_query_dispose_ (FreeSmartphonePIMMessageQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_message_query_dispose__finish (FreeSmartphonePIMMessageQuery* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_message_query_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_message_query_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_message_query_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_message_query_sync_get_result_count (FreeSmartphonePIMMessageQuerySync* self, GError** error);
void free_smartphone_pim_message_query_sync_rewind (FreeSmartphonePIMMessageQuerySync* self, GError** error);
void free_smartphone_pim_message_query_sync_skip (FreeSmartphonePIMMessageQuerySync* self, gint count, GError** error);
gchar* free_smartphone_pim_message_query_sync_get_message_path (FreeSmartphonePIMMessageQuerySync* self, GError** error);
GHashTable* free_smartphone_pim_message_query_sync_get_result (FreeSmartphonePIMMessageQuerySync* self, GError** error);
GHashTable** free_smartphone_pim_message_query_sync_get_multiple_results (FreeSmartphonePIMMessageQuerySync* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_message_query_sync_dispose_ (FreeSmartphonePIMMessageQuerySync* self, GError** error);
GType free_smartphone_pim_contact_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_contact_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_contact_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_contact_get_content (FreeSmartphonePIMContact* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_contact_get_content_finish (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_get_multiple_fields (FreeSmartphonePIMContact* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_contact_get_multiple_fields_finish (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_get_used_backends (FreeSmartphonePIMContact* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_contact_get_used_backends_finish (FreeSmartphonePIMContact* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_contact_update (FreeSmartphonePIMContact* self, GHashTable* contact_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_contact_update_finish (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_delete (FreeSmartphonePIMContact* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_contact_delete_finish (FreeSmartphonePIMContact* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_contact_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_contact_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_contact_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_pim_contact_sync_get_content (FreeSmartphonePIMContactSync* self, GError** error);
GHashTable* free_smartphone_pim_contact_sync_get_multiple_fields (FreeSmartphonePIMContactSync* self, const gchar* field_list, GError** error);
gchar** free_smartphone_pim_contact_sync_get_used_backends (FreeSmartphonePIMContactSync* self, int* result_length1, GError** error);
void free_smartphone_pim_contact_sync_update (FreeSmartphonePIMContactSync* self, GHashTable* contact_data, GError** error);
void free_smartphone_pim_contact_sync_delete (FreeSmartphonePIMContactSync* self, GError** error);
GType free_smartphone_pim_calls_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_calls_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_calls_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_calls_add (FreeSmartphonePIMCalls* self, GHashTable* call_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_calls_add_finish (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_calls_get_single_entry_single_field (FreeSmartphonePIMCalls* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_calls_get_single_entry_single_field_finish (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_calls_query (FreeSmartphonePIMCalls* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_calls_query_finish (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_calls_get_new_missed_calls (FreeSmartphonePIMCalls* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_calls_get_new_missed_calls_finish (FreeSmartphonePIMCalls* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_calls_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_calls_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_calls_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_pim_calls_sync_add (FreeSmartphonePIMCallsSync* self, GHashTable* call_data, GError** error);
gchar* free_smartphone_pim_calls_sync_get_single_entry_single_field (FreeSmartphonePIMCallsSync* self, GHashTable* query, const gchar* field, GError** error);
gchar* free_smartphone_pim_calls_sync_query (FreeSmartphonePIMCallsSync* self, GHashTable* query, GError** error);
gint free_smartphone_pim_calls_sync_get_new_missed_calls (FreeSmartphonePIMCallsSync* self, GError** error);
GType free_smartphone_pim_dates_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_dates_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_dates_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_dates_add (FreeSmartphonePIMDates* self, GHashTable* date_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_dates_add_finish (FreeSmartphonePIMDates* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_dates_get_single_entry_single_field (FreeSmartphonePIMDates* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_dates_get_single_entry_single_field_finish (FreeSmartphonePIMDates* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_dates_query (FreeSmartphonePIMDates* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_dates_query_finish (FreeSmartphonePIMDates* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_dates_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_dates_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_dates_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_pim_dates_sync_add (FreeSmartphonePIMDatesSync* self, GHashTable* date_data, GError** error);
gchar* free_smartphone_pim_dates_sync_get_single_entry_single_field (FreeSmartphonePIMDatesSync* self, GHashTable* query, const gchar* field, GError** error);
gchar* free_smartphone_pim_dates_sync_query (FreeSmartphonePIMDatesSync* self, GHashTable* query, GError** error);
GType free_smartphone_pim_notes_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_notes_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_notes_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_notes_add (FreeSmartphonePIMNotes* self, GHashTable* note_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_notes_add_finish (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_notes_get_used_tags (FreeSmartphonePIMNotes* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_notes_get_used_tags_finish (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_notes_get_single_entry_single_field (FreeSmartphonePIMNotes* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_notes_get_single_entry_single_field_finish (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_notes_query (FreeSmartphonePIMNotes* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_notes_query_finish (FreeSmartphonePIMNotes* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_notes_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_notes_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_notes_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_pim_notes_sync_add (FreeSmartphonePIMNotesSync* self, GHashTable* note_data, GError** error);
gchar** free_smartphone_pim_notes_sync_get_used_tags (FreeSmartphonePIMNotesSync* self, int* result_length1, GError** error);
gchar* free_smartphone_pim_notes_sync_get_single_entry_single_field (FreeSmartphonePIMNotesSync* self, GHashTable* query, const gchar* field, GError** error);
gchar* free_smartphone_pim_notes_sync_query (FreeSmartphonePIMNotesSync* self, GHashTable* query, GError** error);
GType free_smartphone_pim_types_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_types_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_types_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_types_list (FreeSmartphonePIMTypes* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_types_list_finish (FreeSmartphonePIMTypes* self, GAsyncResult* _res_, int* result_length1, GError** error);
GType free_smartphone_pim_types_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_types_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_types_sync_get_type (void) G_GNUC_CONST;
gchar** free_smartphone_pim_types_sync_list (FreeSmartphonePIMTypesSync* self, int* result_length1, GError** error);
GType free_smartphone_pim_tasks_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_tasks_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_tasks_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_tasks_add (FreeSmartphonePIMTasks* self, GHashTable* task_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_tasks_add_finish (FreeSmartphonePIMTasks* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_tasks_get_single_task_single_field (FreeSmartphonePIMTasks* self, GHashTable* query, const gchar* field, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_tasks_get_single_task_single_field_finish (FreeSmartphonePIMTasks* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_tasks_query (FreeSmartphonePIMTasks* self, GHashTable* query, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_tasks_query_finish (FreeSmartphonePIMTasks* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_tasks_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_tasks_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_tasks_sync_get_type (void) G_GNUC_CONST;
gchar* free_smartphone_pim_tasks_sync_add (FreeSmartphonePIMTasksSync* self, GHashTable* task_data, GError** error);
gchar* free_smartphone_pim_tasks_sync_get_single_task_single_field (FreeSmartphonePIMTasksSync* self, GHashTable* query, const gchar* field, GError** error);
gchar* free_smartphone_pim_tasks_sync_query (FreeSmartphonePIMTasksSync* self, GHashTable* query, GError** error);
GType free_smartphone_pim_note_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_note_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_note_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_note_get_content (FreeSmartphonePIMNote* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_note_get_content_finish (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_get_multiple_fields (FreeSmartphonePIMNote* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_note_get_multiple_fields_finish (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_get_used_backends (FreeSmartphonePIMNote* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_note_get_used_backends_finish (FreeSmartphonePIMNote* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_note_update (FreeSmartphonePIMNote* self, GHashTable* note_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_note_update_finish (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_note_delete (FreeSmartphonePIMNote* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_note_delete_finish (FreeSmartphonePIMNote* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_note_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_note_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_note_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_pim_note_sync_get_content (FreeSmartphonePIMNoteSync* self, GError** error);
GHashTable* free_smartphone_pim_note_sync_get_multiple_fields (FreeSmartphonePIMNoteSync* self, const gchar* field_list, GError** error);
gchar** free_smartphone_pim_note_sync_get_used_backends (FreeSmartphonePIMNoteSync* self, int* result_length1, GError** error);
void free_smartphone_pim_note_sync_update (FreeSmartphonePIMNoteSync* self, GHashTable* note_data, GError** error);
void free_smartphone_pim_note_sync_delete (FreeSmartphonePIMNoteSync* self, GError** error);
GType free_smartphone_pim_date_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_date_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_date_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_date_get_content (FreeSmartphonePIMDate* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_date_get_content_finish (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_get_multiple_fields (FreeSmartphonePIMDate* self, const gchar* field_list, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_date_get_multiple_fields_finish (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_get_used_backends (FreeSmartphonePIMDate* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar** free_smartphone_pim_date_get_used_backends_finish (FreeSmartphonePIMDate* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_date_update (FreeSmartphonePIMDate* self, GHashTable* date_data, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_date_update_finish (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_date_delete (FreeSmartphonePIMDate* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_date_delete_finish (FreeSmartphonePIMDate* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_date_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_date_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_date_sync_get_type (void) G_GNUC_CONST;
GHashTable* free_smartphone_pim_date_sync_get_content (FreeSmartphonePIMDateSync* self, GError** error);
GHashTable* free_smartphone_pim_date_sync_get_multiple_fields (FreeSmartphonePIMDateSync* self, const gchar* field_list, GError** error);
gchar** free_smartphone_pim_date_sync_get_used_backends (FreeSmartphonePIMDateSync* self, int* result_length1, GError** error);
void free_smartphone_pim_date_sync_update (FreeSmartphonePIMDateSync* self, GHashTable* date_data, GError** error);
void free_smartphone_pim_date_sync_delete (FreeSmartphonePIMDateSync* self, GError** error);
GType free_smartphone_pim_contact_query_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_contact_query_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_contact_query_get_type (void) G_GNUC_CONST;
void free_smartphone_pim_contact_query_get_result_count (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_pim_contact_query_get_result_count_finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_query_rewind (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_contact_query_rewind_finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_query_skip (FreeSmartphonePIMContactQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_contact_query_skip_finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_query_get_contact_path (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_pim_contact_query_get_contact_path_finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_query_get_result (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable* free_smartphone_pim_contact_query_get_result_finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
void free_smartphone_pim_contact_query_get_multiple_results (FreeSmartphonePIMContactQuery* self, gint count, GAsyncReadyCallback _callback_, gpointer _user_data_);
GHashTable** free_smartphone_pim_contact_query_get_multiple_results_finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_pim_contact_query_dispose_ (FreeSmartphonePIMContactQuery* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_pim_contact_query_dispose__finish (FreeSmartphonePIMContactQuery* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_pim_contact_query_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_pim_contact_query_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_pim_contact_query_sync_get_type (void) G_GNUC_CONST;
gint free_smartphone_pim_contact_query_sync_get_result_count (FreeSmartphonePIMContactQuerySync* self, GError** error);
void free_smartphone_pim_contact_query_sync_rewind (FreeSmartphonePIMContactQuerySync* self, GError** error);
void free_smartphone_pim_contact_query_sync_skip (FreeSmartphonePIMContactQuerySync* self, gint count, GError** error);
gchar* free_smartphone_pim_contact_query_sync_get_contact_path (FreeSmartphonePIMContactQuerySync* self, GError** error);
GHashTable* free_smartphone_pim_contact_query_sync_get_result (FreeSmartphonePIMContactQuerySync* self, GError** error);
GHashTable** free_smartphone_pim_contact_query_sync_get_multiple_results (FreeSmartphonePIMContactQuerySync* self, gint count, int* result_length1, GError** error);
void free_smartphone_pim_contact_query_sync_dispose_ (FreeSmartphonePIMContactQuerySync* self, GError** error);
GType free_smartphone_audio_manager_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_audio_manager_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_audio_mode_get_type (void) G_GNUC_CONST;
FreeSmartphoneAudioMode free_smartphone_audio_mode_from_string (const char* str, GError** error);
const char* free_smartphone_audio_mode_to_string (FreeSmartphoneAudioMode value);
GQuark free_smartphone_audio_error_quark (void);
GType free_smartphone_audio_device_get_type (void) G_GNUC_CONST;
FreeSmartphoneAudioDevice free_smartphone_audio_device_from_string (const char* str, GError** error);
const char* free_smartphone_audio_device_to_string (FreeSmartphoneAudioDevice value);
GType free_smartphone_audio_control_get_type (void) G_GNUC_CONST;
FreeSmartphoneAudioControl free_smartphone_audio_control_from_string (const char* str, GError** error);
const char* free_smartphone_audio_control_to_string (FreeSmartphoneAudioControl value);
GType free_smartphone_audio_stream_get_type (void) G_GNUC_CONST;
FreeSmartphoneAudioStream free_smartphone_audio_stream_from_string (const char* str, GError** error);
const char* free_smartphone_audio_stream_to_string (FreeSmartphoneAudioStream value);
GType free_smartphone_audio_manager_get_type (void) G_GNUC_CONST;
void free_smartphone_audio_manager_set_mode (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioMode mode, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_audio_manager_set_mode_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_get_mode (FreeSmartphoneAudioManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneAudioMode free_smartphone_audio_manager_get_mode_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_set_device (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioDevice name, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_audio_manager_set_device_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_get_device (FreeSmartphoneAudioManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneAudioDevice free_smartphone_audio_manager_get_device_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_push_device (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioDevice device, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_audio_manager_push_device_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_pull_device (FreeSmartphoneAudioManager* self, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneAudioDevice free_smartphone_audio_manager_pull_device_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_get_available_devices (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioMode mode, GAsyncReadyCallback _callback_, gpointer _user_data_);
FreeSmartphoneAudioDevice* free_smartphone_audio_manager_get_available_devices_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, int* result_length1, GError** error);
void free_smartphone_audio_manager_get_volume (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, GAsyncReadyCallback _callback_, gpointer _user_data_);
gint free_smartphone_audio_manager_get_volume_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_set_volume (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, gint volume, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_audio_manager_set_volume_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_set_mute (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, gboolean mute, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_audio_manager_set_mute_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_get_mute (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioControl control, GAsyncReadyCallback _callback_, gpointer _user_data_);
gboolean free_smartphone_audio_manager_get_mute_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_register_session (FreeSmartphoneAudioManager* self, FreeSmartphoneAudioStream stream, GAsyncReadyCallback _callback_, gpointer _user_data_);
gchar* free_smartphone_audio_manager_register_session_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
void free_smartphone_audio_manager_release_session (FreeSmartphoneAudioManager* self, const gchar* token, GAsyncReadyCallback _callback_, gpointer _user_data_);
void free_smartphone_audio_manager_release_session_finish (FreeSmartphoneAudioManager* self, GAsyncResult* _res_, GError** error);
GType free_smartphone_audio_manager_sync_proxy_get_type (void) G_GNUC_CONST;
guint free_smartphone_audio_manager_sync_register_object (void* object, GDBusConnection* connection, const gchar* path, GError** error);
GType free_smartphone_audio_manager_sync_get_type (void) G_GNUC_CONST;
void free_smartphone_audio_manager_sync_set_mode (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioMode mode, GError** error);
FreeSmartphoneAudioMode free_smartphone_audio_manager_sync_get_mode (FreeSmartphoneAudioManagerSync* self, GError** error);
void free_smartphone_audio_manager_sync_set_device (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioDevice name, GError** error);
FreeSmartphoneAudioDevice free_smartphone_audio_manager_sync_get_device (FreeSmartphoneAudioManagerSync* self, GError** error);
void free_smartphone_audio_manager_sync_push_device (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioDevice device, GError** error);
FreeSmartphoneAudioDevice free_smartphone_audio_manager_sync_pull_device (FreeSmartphoneAudioManagerSync* self, GError** error);
FreeSmartphoneAudioDevice* free_smartphone_audio_manager_sync_get_available_devices (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioMode mode, int* result_length1, GError** error);
gint free_smartphone_audio_manager_sync_get_volume (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, GError** error);
void free_smartphone_audio_manager_sync_set_volume (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, gint volume, GError** error);
void free_smartphone_audio_manager_sync_set_mute (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, gboolean mute, GError** error);
gboolean free_smartphone_audio_manager_sync_get_mute (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioControl control, GError** error);
gchar* free_smartphone_audio_manager_sync_register_session (FreeSmartphoneAudioManagerSync* self, FreeSmartphoneAudioStream stream, GError** error);
void free_smartphone_audio_manager_sync_release_session (FreeSmartphoneAudioManagerSync* self, const gchar* token, GError** error);


G_END_DECLS

#endif
